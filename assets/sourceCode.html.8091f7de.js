import { r as resolveComponent, c as createElementBlock, a as createBaseVNode, b as createVNode, w as withCtx, F as Fragment, d as createTextVNode, e as createStaticVNode, o as openBlock } from "./app.f1ef7422.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.5a098b48.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "vue-router-\u6E90\u7801\u89E3\u8BFB",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#vue-router-\u6E90\u7801\u89E3\u8BFB",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" Vue Router \u6E90\u7801\u89E3\u8BFB")
], -1);
const _hoisted_2 = { class: "table-of-contents" };
const _hoisted_3 = /* @__PURE__ */ createTextVNode("\u76EE\u5F55\u7ED3\u6784");
const _hoisted_4 = /* @__PURE__ */ createTextVNode("createRouter");
const _hoisted_5 = /* @__PURE__ */ createTextVNode("install");
const _hoisted_6 = /* @__PURE__ */ createTextVNode("provide");
const _hoisted_7 = /* @__PURE__ */ createTextVNode("currentRoute");
const _hoisted_8 = /* @__PURE__ */ createTextVNode("pushWithRedirect");
const _hoisted_9 = /* @__PURE__ */ createTextVNode("navigate");
const _hoisted_10 = /* @__PURE__ */ createTextVNode("finalizeNavigation");
const _hoisted_11 = /* @__PURE__ */ createTextVNode("history \u7684\u6A21\u5F0F");
const _hoisted_12 = /* @__PURE__ */ createTextVNode("\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5");
const _hoisted_13 = /* @__PURE__ */ createTextVNode("createWebHistory");
const _hoisted_14 = /* @__PURE__ */ createTextVNode("useHistoryStateNavigation");
const _hoisted_15 = /* @__PURE__ */ createTextVNode("changeLocation");
const _hoisted_16 = /* @__PURE__ */ createTextVNode("useHistoryListeners");
const _hoisted_17 = /* @__PURE__ */ createTextVNode("finalizeNavigation");
const _hoisted_18 = /* @__PURE__ */ createTextVNode("markAsReady");
const _hoisted_19 = /* @__PURE__ */ createTextVNode("RouterView");
const _hoisted_20 = /* @__PURE__ */ createTextVNode("matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684");
const _hoisted_21 = /* @__PURE__ */ createTextVNode("createRouteRecordMatcher");
const _hoisted_22 = /* @__PURE__ */ createTextVNode("resolve");
const _hoisted_23 = /* @__PURE__ */ createTextVNode("\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0");
const _hoisted_24 = /* @__PURE__ */ createStaticVNode('<h2 id="\u76EE\u5F55\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u76EE\u5F55\u7ED3\u6784" aria-hidden="true">#</a> \u76EE\u5F55\u7ED3\u6784</h2><h2 id="createrouter" tabindex="-1"><a class="header-anchor" href="#createrouter" aria-hidden="true">#</a> createRouter</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// \u521B\u5EFA router \u5BF9\u8C61</span>\n  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>\n    currentRoute<span class="token punctuation">,</span> <span class="token comment">// \u5F53\u524D\u8DEF\u5F84</span>\n    addRoute<span class="token punctuation">,</span>\n    removeRoute<span class="token punctuation">,</span>\n    hasRoute<span class="token punctuation">,</span>\n    getRoutes<span class="token punctuation">,</span>\n    resolve<span class="token punctuation">,</span>\n    options<span class="token punctuation">,</span>\n    push<span class="token punctuation">,</span>\n    replace<span class="token punctuation">,</span>\n    go<span class="token punctuation">,</span>\n    <span class="token function-variable function">back</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">forward</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    beforeEach<span class="token operator">:</span> beforeGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n    beforeResolve<span class="token operator">:</span> beforeResolveGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n    afterEach<span class="token operator">:</span> afterGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n    onError<span class="token operator">:</span> errorHandlers<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n    isReady<span class="token punctuation">,</span>\n    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// \u5B89\u88C5\u8DEF\u7531\u51FD\u6570</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> router<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>\u8FD4\u56DE\u6765\u4E00\u4E2A router \u5BF9\u8C61\uFF0C\u901A\u8FC7 install \u6CE8\u518C\u5230 vue \u6839\u5B9E\u4F8B</p><h3 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> install</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// \u6CE8\u518C\u5168\u5C40\u8DEF\u7531\u7EC4\u4EF6</span>\n    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterLink&#39;</span><span class="token punctuation">,</span> RouterLink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span> RouterView<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// \u5168\u5C40\u914D\u7F6E\u5B9A\u4E49 $router \u548C $route</span>\n    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$router <span class="token operator">=</span> router<span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">,</span> <span class="token string">&#39;$route&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unref</span><span class="token punctuation">(</span>currentRoute<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// \u5728\u6D4F\u89C8\u5668\u7AEF\u521D\u59CB\u5316\u5BFC\u822A</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      isBrowser <span class="token operator">&amp;&amp;</span>\n      <span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span>\n      currentRoute<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// see above</span>\n      started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token function">push</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Unexpected error when starting the router:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// \u8DEF\u5F84\u53D8\u6210\u54CD\u5E94\u5F0F</span>\n    <span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      reactiveRoute<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// \u5168\u5C40\u6CE8\u5165 router \u548C reactiveRoute</span>\n    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">,</span> <span class="token function">reactive</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> unmountApp <span class="token operator">=</span> app<span class="token punctuation">.</span>unmount<span class="token punctuation">;</span>\n    installedApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// \u5E94\u7528\u5378\u8F7D\u7684\u65F6\u5019\uFF0C\u9700\u8981\u505A\u4E00\u4E9B\u8DEF\u7531\u6E05\u7406\u5DE5\u4F5C</span>\n    app<span class="token punctuation">.</span><span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      installedApps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>installedApps<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">removeHistoryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>\n        started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">unmountApp</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="provide" tabindex="-1"><a class="header-anchor" href="#provide" aria-hidden="true">#</a> provide</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">PolySymbol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  hasSymbol <span class="token operator">?</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;[vue-router]: &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;[vue-router]: &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> routerKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> routeLocationKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;route location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> routerViewLocationKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router view location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  reactiveRoute<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\napp<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">,</span> <span class="token function">reactive</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">,</span> currentRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>\u6B64\u5904\u7684\u4EE3\u7801\u662F\u62FC\u51D1\u7684\u3002</p><h2 id="currentroute" tabindex="-1"><a class="header-anchor" href="#currentroute" aria-hidden="true">#</a> currentRoute</h2><p>\u5176\u5B9E\u5C31\u662F\u5F53\u524D\u6D4F\u89C8\u5668\u7684\u8DEF\u5F84\u4FE1\u606F\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">START_LOCATION_NORMALIZED</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  query<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  hash<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  fullPath<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n  matched<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  meta<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  redirectedFrom<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>\u901A\u8FC7 router.push\u3001router.replace \u6539\u53D8\u5F53\u524D\u7684\u8DEF\u7531\u5BF9\u8C61\uFF0C\u5B83\u4EEC\u7684\u5E95\u5C42\u6700\u7EC8\u90FD\u662F\u901A\u8FC7 pushWithRedirect \u5B8C\u6210\u8DEF\u5F84\u7684\u5207\u6362\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token operator">:</span> RouteLocationRaw <span class="token operator">|</span> RouteLocation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token operator">:</span> RouteLocationRaw <span class="token operator">|</span> RouteLocationNormalized</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="pushwithredirect" tabindex="-1"><a class="header-anchor" href="#pushwithredirect" aria-hidden="true">#</a> pushWithRedirect</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> redirectedFrom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> targetLocation <span class="token operator">=</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> from <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> to<span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> force <span class="token operator">=</span> to<span class="token punctuation">.</span>force<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> replace <span class="token operator">=</span> to<span class="token punctuation">.</span>replace <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> toLocation <span class="token operator">=</span> targetLocation<span class="token punctuation">;</span>\n  toLocation<span class="token punctuation">.</span>redirectedFrom <span class="token operator">=</span> redirectedFrom<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> failure<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>force <span class="token operator">&amp;&amp;</span> <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span>stringifyQuery$<span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> targetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    failure <span class="token operator">=</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      to<span class="token operator">:</span> toLocation<span class="token punctuation">,</span>\n      from<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">handleScroll</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>failure <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">navigate</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>\n          error<span class="token punctuation">,</span>\n          <span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span> <span class="token operator">|</span>\n            <span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span> <span class="token operator">|</span>\n            <span class="token number">2</span> <span class="token comment">/* NAVIGATION_GUARD_REDIRECT */</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> error<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token function">triggerError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// \u5904\u7406\u9519\u8BEF</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        failure <span class="token operator">=</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> failure<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>navigate \u6267\u884C\u5BFC\u822A\u5B88\u536B\u51FD\u6570</li><li>finalizeNavigation \u6700\u7EC8\u7684\u8DEF\u5F84\u5207\u6362</li></ul><h3 id="navigate" tabindex="-1"><a class="header-anchor" href="#navigate" aria-hidden="true">#</a> navigate</h3><p>\u5B9E\u9645\u4E0A\u662F\u6267\u884C\u8DEF\u7531\u5207\u6362\u8FC7\u7A0B\u4E2D\u7684\u4E00\u7CFB\u5217\u5BFC\u822A\u5B88\u536B\u51FD\u6570</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> guards<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span> <span class="token operator">=</span>\n    <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// all components here have been resolved once because we are leaving</span>\n  guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>\n    leavingRecords<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span>\n    to<span class="token punctuation">,</span>\n    from\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// leavingRecords is already reversed</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> leavingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    record<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> canceledNavigationCheck <span class="token operator">=</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>\n    <span class="token keyword">null</span><span class="token punctuation">,</span>\n    to<span class="token punctuation">,</span>\n    from\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// run the queue of per route beforeRouteLeave guards</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// check global guards beforeEach</span>\n        guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// check in components beforeRouteUpdate</span>\n        guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>\n          updatingRecords<span class="token punctuation">,</span>\n          <span class="token string">&#39;beforeRouteUpdate&#39;</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">,</span>\n          from\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> updatingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          record<span class="token punctuation">.</span>updateGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// run the queue of per route beforeEnter guards</span>\n        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// check the route beforeEnter</span>\n        guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// do not trigger beforeEnter on reused views</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> beforeEnter <span class="token keyword">of</span> record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span>\n                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// run the queue of per route beforeEnter guards</span>\n        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// NOTE: at this point to.matched is normalized and does not contain any () =&gt; Promise&lt;Component&gt;</span>\n        <span class="token comment">// clear existing enterCallbacks, these are added by extractComponentsGuards</span>\n        to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>enterCallbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// check in-component beforeRouteEnter</span>\n        guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>\n          enteringRecords<span class="token punctuation">,</span>\n          <span class="token string">&#39;beforeRouteEnter&#39;</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">,</span>\n          from\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// run the queue of per route beforeEnter guards</span>\n        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// check global guards beforeResolve</span>\n        guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeResolveGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">// catch any navigation canceled</span>\n      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n        <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span><span class="token punctuation">)</span>\n          <span class="token operator">?</span> err\n          <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span><span class="token parameter">guards</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> guards<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="finalizenavigation" tabindex="-1"><a class="header-anchor" href="#finalizenavigation" aria-hidden="true">#</a> finalizeNavigation</h3><p>\u8FD9\u91CC\u5B8C\u6210\u771F\u6B63\u7684\u8DEF\u5F84\u5207\u6362</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span><span class="token parameter">toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> error<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> isFirstNavigation <span class="token operator">=</span> from <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">!</span>isBrowser <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPush<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>replace <span class="token operator">||</span> isFirstNavigation<span class="token punctuation">)</span>\n      routerHistory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n        toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>\n        <span class="token function">assign</span><span class="token punctuation">(</span>\n          <span class="token punctuation">{</span>\n            scroll<span class="token operator">:</span> isFirstNavigation <span class="token operator">&amp;&amp;</span> state <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>scroll<span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          data\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> routerHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> toLocation<span class="token punctuation">;</span>\n  <span class="token function">handleScroll</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> isFirstNavigation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>\u4E3B\u8981\u8C03\u53D6\u4E86\u4E0B\u9762\u4E24\u4E2A\u65B9\u6CD5\uFF1A</p><ul><li>routerHistory.push</li><li>routerHistory.replace</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> routerHistory <span class="token operator">=</span> options<span class="token punctuation">.</span>history<span class="token punctuation">;</span>\n</code></pre></div><p>routerHistory \u662F history \u4E2D\u7684 routerHistory\uFF0Chistory \u5728 createRouter \u65F6\u4F20\u5165\u3002history \u662F createWebHistory\u3001createWebHashHistory\u3001createMemoryHistory \u521B\u5EFA\u7684\u5BF9\u8C61\u3002</p><h2 id="history-\u7684\u6A21\u5F0F" tabindex="-1"><a class="header-anchor" href="#history-\u7684\u6A21\u5F0F" aria-hidden="true">#</a> history \u7684\u6A21\u5F0F</h2><h3 id="\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5" aria-hidden="true">#</a> \u6E90\u7801\u4E2D\u7684\u65B9\u6CD5</h3><ul><li>createBaseLocation</li><li>createCurrentLocation</li><li>useHistoryListeners</li><li>buildState</li><li>useHistoryStateNavigation <ul><li>changeLocation</li><li>replace</li><li>push</li></ul></li><li>createWebHistory\uFF08export\uFF09</li></ul><div class="custom-container tip"><p class="custom-container-title">\u95EE\u9898</p><p>\u6BCF\u5F53\u6211\u4EEC\u5207\u6362\u8DEF\u7531\u7684\u65F6\u5019\uFF0C\u4F1A\u53D1\u73B0\u6D4F\u89C8\u5668\u7684 URL \u53D1\u751F\u4E86\u53D8\u5316\uFF0C\u4F46\u662F\u9875\u9762\u5374\u6CA1\u6709\u5237\u65B0\uFF0C\u5B83\u662F\u600E\u4E48\u505A\u7684\u5462\uFF1F</p></div><h3 id="createwebhistory" tabindex="-1"><a class="header-anchor" href="#createwebhistory" aria-hidden="true">#</a> createWebHistory</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> historyNavigation <span class="token operator">=</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> historyListeners <span class="token operator">=</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span>\n    base<span class="token punctuation">,</span>\n    historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">,</span>\n    historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">,</span>\n    historyNavigation<span class="token punctuation">.</span>replace\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">delta<span class="token punctuation">,</span> triggerListeners <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>triggerListeners<span class="token punctuation">)</span> historyListeners<span class="token punctuation">.</span><span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> routerHistory <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// it&#39;s overridden right after</span>\n      location<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n      base<span class="token punctuation">,</span>\n      go<span class="token punctuation">,</span>\n      createHref<span class="token operator">:</span> <span class="token function">createHref</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    historyNavigation<span class="token punctuation">,</span>\n    historyListeners\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> routerHistory<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>routerHistory</code> \u5BF9\u8C61\u800C\u8A00\uFF0C\u5B83\u6709\u4E24\u4E2A\u91CD\u8981\u7684\u4F5C\u7528\uFF0C\u4E00\u4E2A\u662F\u8DEF\u5F84\u7684\u5207\u6362\uFF0C\u4E00\u4E2A\u662F\u76D1\u542C\u8DEF\u5F84\u7684\u53D8\u5316\u3002</p><p>\u8DEF\u5F84\u5207\u6362\u4E3B\u8981\u901A\u8FC7 <code>historyNavigation</code> \u6765\u5B8C\u6210\u7684\uFF0C\u5B83\u662F <code>useHistoryStateNavigation</code> \u51FD\u6570\u7684\u8FD4\u56DE\u503C\u3002</p><h3 id="usehistorystatenavigation" tabindex="-1"><a class="header-anchor" href="#usehistorystatenavigation" aria-hidden="true">#</a> useHistoryStateNavigation</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> location <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> currentLocation <span class="token operator">=</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> historyState <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> history<span class="token punctuation">.</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>historyState<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">changeLocation</span><span class="token punctuation">(</span>\n      currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        back<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        current<span class="token operator">:</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n        forward<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        position<span class="token operator">:</span> history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        replaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        scroll<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token boolean">true</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      history<span class="token punctuation">.</span>state<span class="token punctuation">,</span>\n      <span class="token function">buildState</span><span class="token punctuation">(</span>\n        historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>back<span class="token punctuation">,</span>\n        <span class="token comment">// keep back and forward entries but override current position</span>\n        to<span class="token punctuation">,</span>\n        historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>\n        <span class="token boolean">true</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      data<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> position<span class="token operator">:</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>position <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> currentState <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">,</span> history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      forward<span class="token operator">:</span> to<span class="token punctuation">,</span>\n      scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">history.replaceState(history.state, &#39;&#39;, url)\\n\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">changeLocation</span><span class="token punctuation">(</span>currentState<span class="token punctuation">.</span>current<span class="token punctuation">,</span> currentState<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function">buildState</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> to<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> position<span class="token operator">:</span> currentState<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      data\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    location<span class="token operator">:</span> currentLocation<span class="token punctuation">,</span>\n    state<span class="token operator">:</span> historyState<span class="token punctuation">,</span>\n    push<span class="token punctuation">,</span>\n    replace<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>\u8FD4\u56DE\u7684 push \u548C replace \u51FD\u6570\uFF0C\u4F1A\u6DFB\u52A0\u7ED9 routerHistory \u5BF9\u8C61\u4E0A\uFF0C\u56E0\u6B64\u5F53\u6211\u4EEC\u8C03\u7528 routerHistory.push \u6216\u8005\u662F routerHistory.replace \u65B9\u6CD5\u7684\u65F6\u5019\u5B9E\u9645\u4E0A\u5C31\u662F\u5728\u6267\u884C\u8FD9\u4E24\u4E2A\u51FD\u6570\u3002</p><p>push \u548C replace \u65B9\u6CD5\u5185\u90E8\u90FD\u662F\u6267\u884C\u4E86 <code>changeLocation</code> \u65B9\u6CD5\uFF0C\u8BE5\u51FD\u6570\u5185\u90E8\u6267\u884C\u4E86\u6D4F\u89C8\u5668\u5E95\u5C42\u7684 <code>history.pushState</code> \u6216\u8005 <code>history.replaceState</code> \u65B9\u6CD5\uFF0C\u4F1A\u5411\u5F53\u524D\u6D4F\u89C8\u5668\u4F1A\u8BDD\u7684\u5386\u53F2\u5806\u6808\u4E2D\u6DFB\u52A0\u4E00\u4E2A\u72B6\u6001\uFF0C\u8FD9\u6837\u5C31\u5728\u4E0D\u5237\u65B0\u9875\u9762\u7684\u60C5\u51B5\u4E0B\u4FEE\u6539\u4E86\u9875\u9762\u7684 URL\u3002</p><h3 id="changelocation" tabindex="-1"><a class="header-anchor" href="#changelocation" aria-hidden="true">#</a> changeLocation</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hashIndex <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> url <span class="token operator">=</span>\n    hashIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>\n      <span class="token operator">?</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>host <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span>\n          <span class="token operator">?</span> base\n          <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> to\n      <span class="token operator">:</span> <span class="token function">createBaseLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> base <span class="token operator">+</span> to<span class="token punctuation">;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// BROWSER QUIRK</span>\n    <span class="token comment">// NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds</span>\n    history<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replaceState&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;pushState&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Error with push/replace State&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// Force the navigation, this also resets the call count</span>\n    location<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replace&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="usehistorylisteners" tabindex="-1"><a class="header-anchor" href="#usehistorylisteners" aria-hidden="true">#</a> useHistoryListeners</h3><p>\u5047\u8BBE\u6211\u4EEC\u70B9\u51FB\u6D4F\u89C8\u5668\u7684\u56DE\u9000\u6309\u94AE\u56DE\u5230\u4E0A\u4E00\u4E2A URL\uFF0C\u8FD9\u9700\u8981\u6062\u590D\u5230\u4E0A\u4E00\u4E2A\u8DEF\u5F84\u4EE5\u53CA\u66F4\u65B0\u8DEF\u7531\u89C6\u56FE\uFF0C\u56E0\u6B64\u6211\u4EEC\u8FD8\u9700\u8981\u76D1\u542C\u8FD9\u79CD history \u53D8\u5316\u7684\u884C\u4E3A\uFF0C\u505A\u4E00\u4E9B\u76F8\u5E94\u7684\u5904\u7406\u3002history \u53D8\u5316\u7684\u76D1\u542C\u4E3B\u8981\u662F\u901A\u8FC7 historyListeners \u6765\u5B8C\u6210\u7684\uFF0C\u5B83\u662F useHistoryListeners \u51FD\u6570\u7684\u8FD4\u56DE\u503C\uFF0C</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> historyState<span class="token punctuation">,</span> currentLocation<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> pauseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">popStateHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> state <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> to <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> from <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> fromState <span class="token operator">=</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>\n      historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>pauseState <span class="token operator">&amp;&amp;</span> pauseState <span class="token operator">===</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        pauseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      delta <span class="token operator">=</span> fromState <span class="token operator">?</span> state<span class="token punctuation">.</span>position <span class="token operator">-</span> fromState<span class="token punctuation">.</span>position <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">listener</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        delta<span class="token punctuation">,</span>\n        type<span class="token operator">:</span> NavigationType<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>\n        direction<span class="token operator">:</span> delta\n          <span class="token operator">?</span> delta <span class="token operator">&gt;</span> <span class="token number">0</span>\n            <span class="token operator">?</span> NavigationDirection<span class="token punctuation">.</span>forward\n            <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>back\n          <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>unknown<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    pauseState <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">teardown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    teardowns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>teardown<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> teardown<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">beforeUnloadListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>\n      <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> teardown <span class="token keyword">of</span> teardowns<span class="token punctuation">)</span> <span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    pauseListeners<span class="token punctuation">,</span>\n    listen<span class="token punctuation">,</span>\n    destroy<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>\u6570\u5185\u90E8\u8FD8\u76D1\u542C\u4E86\u6D4F\u89C8\u5668\u5E95\u5C42 Window \u7684 popstate \u4E8B\u4EF6\uFF0C\u5F53\u6211\u4EEC\u70B9\u51FB\u6D4F\u89C8\u5668\u7684\u56DE\u9000\u6309\u94AE\u6216\u8005\u662F\u6267\u884C\u4E86 history.back \u65B9\u6CD5\u7684\u65F6\u5019\uFF0C\u4F1A\u89E6\u53D1\u4E8B\u4EF6\u7684\u56DE\u8C03\u51FD\u6570 <code>popStateHandler</code>\uFF0C\u8FDB\u800C\u904D\u5386\u4FA6\u542C\u5668 listeners\uFF0C\u6267\u884C\u6BCF\u4E00\u4E2A\u4FA6\u542C\u5668\u51FD\u6570\u3002</p><p>Vue Router \u662F\u5982\u4F55\u6DFB\u52A0\u8FD9\u4E9B\u4FA6\u542C\u5668\u7684\u5462\uFF1F\u539F\u6765\u5728\u5B89\u88C5\u8DEF\u7531\u7684\u65F6\u5019\uFF0C\u4F1A\u6267\u884C\u4E00\u6B21\u521D\u59CB\u5316\u5BFC\u822A\uFF0C\u6267\u884C\u4E86 push \u65B9\u6CD5\u8FDB\u800C\u6267\u884C\u4E86 <code>finalizeNavigation</code> \u65B9\u6CD5\u3002</p><h3 id="finalizenavigation-1" tabindex="-1"><a class="header-anchor" href="#finalizenavigation-1" aria-hidden="true">#</a> finalizeNavigation</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span><span class="token parameter">toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// only consider as push if it&#39;s not the first navigation</span>\n  <span class="token keyword">const</span> isFirstNavigation <span class="token operator">=</span> from <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">!</span>isBrowser <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n  <span class="token comment">// change URL only if the user did a push/replace and if it&#39;s not the initial navigation because</span>\n  <span class="token comment">// it&#39;s just reflecting the url</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPush<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// on the initial navigation, we want to reuse the scroll position from</span>\n    <span class="token comment">// history state if it exists</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>replace <span class="token operator">||</span> isFirstNavigation<span class="token punctuation">)</span>\n      routerHistory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n        toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>\n        <span class="token function">assign</span><span class="token punctuation">(</span>\n          <span class="token punctuation">{</span>\n            scroll<span class="token operator">:</span> isFirstNavigation <span class="token operator">&amp;&amp;</span> state <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>scroll<span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          data\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> routerHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// accept current navigation</span>\n  currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> toLocation<span class="token punctuation">;</span>\n  <span class="token function">handleScroll</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> isFirstNavigation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>\u5728 finalizeNavigation \u7684\u6700\u540E\uFF0C\u4F1A\u6267\u884C markAsReady \u65B9\u6CD5</p><h3 id="markasready" tabindex="-1"><a class="header-anchor" href="#markasready" aria-hidden="true">#</a> markAsReady</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * Mark the router as ready, resolving the promised returned by isReady(). Can\n * only be called once, otherwise does nothing.\n * <span class="token keyword">@param</span> <span class="token parameter">err</span> - optional error\n */</span>\n<span class="token keyword">function</span> <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token function">setupListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  readyHandlers\n    <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  readyHandlers<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="routerview" tabindex="-1"><a class="header-anchor" href="#routerview" aria-hidden="true">#</a> RouterView</h2><p>\u8DEF\u7531\u7EC4\u4EF6\u5C31\u662F\u901A\u8FC7 RouterView \u7EC4\u4EF6\u6E32\u67D3\u7684</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> RouterView <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    route<span class="token operator">:</span> Object<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">,</span> slots <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warnDeprecatedUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// provide\uFF1Aapp.provide(routeLocationKey, reactive(reactiveRoute));</span>\n    <span class="token keyword">const</span> injectedRoute <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// injectedRoute\u662F\u54CD\u5E94\u5F0F\u7684</span>\n    <span class="token keyword">const</span> depth <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>viewDepthKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 \u662F\u9ED8\u8BA4\u503C</span>\n    <span class="token keyword">const</span> matchedRouteRef <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>route <span class="token operator">||</span> injectedRoute<span class="token punctuation">)</span><span class="token punctuation">.</span>matched<span class="token punctuation">[</span>depth<span class="token punctuation">]</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">provide</span><span class="token punctuation">(</span>viewDepthKey<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">provide</span><span class="token punctuation">(</span>matchedRouteKey<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> viewRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">watch</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>viewRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>instance<span class="token punctuation">,</span> to<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>oldInstance<span class="token punctuation">,</span> from<span class="token punctuation">,</span> oldName<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          to<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> instance<span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">&amp;&amp;</span> instance <span class="token operator">===</span> oldInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            to<span class="token punctuation">.</span>leaveGuards <span class="token operator">=</span> from<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">;</span>\n            to<span class="token punctuation">.</span>updateGuards <span class="token operator">=</span> from<span class="token punctuation">.</span>updateGuards<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>\n          instance <span class="token operator">&amp;&amp;</span>\n          to <span class="token operator">&amp;&amp;</span>\n          <span class="token punctuation">(</span><span class="token operator">!</span>from <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>oldInstance<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token punctuation">(</span>to<span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n            <span class="token function">callback</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> route <span class="token operator">=</span> props<span class="token punctuation">.</span>route <span class="token operator">||</span> injectedRoute<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> matchedRoute <span class="token operator">=</span> matchedRouteRef<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> ViewComponent <span class="token operator">=</span> matchedRoute <span class="token operator">&amp;&amp;</span> matchedRoute<span class="token punctuation">.</span>components<span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> currentName <span class="token operator">=</span> props<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ViewComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> slots<span class="token punctuation">.</span>default\n          <span class="token operator">?</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token operator">:</span> ViewComponent<span class="token punctuation">,</span> route <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> routePropsOption <span class="token operator">=</span> matchedRoute<span class="token punctuation">.</span>props<span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> routeProps <span class="token operator">=</span> routePropsOption\n        <span class="token operator">?</span> routePropsOption <span class="token operator">===</span> <span class="token boolean">true</span>\n          <span class="token operator">?</span> route<span class="token punctuation">.</span>params\n          <span class="token operator">:</span> <span class="token keyword">typeof</span> routePropsOption <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>\n          <span class="token operator">?</span> <span class="token function">routePropsOption</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>\n          <span class="token operator">:</span> routePropsOption\n        <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">onVnodeUnmounted</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component<span class="token punctuation">.</span>isUnmounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          matchedRoute<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>currentName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>\n        ViewComponent<span class="token punctuation">,</span>\n        <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> routeProps<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          onVnodeUnmounted<span class="token punctuation">,</span>\n          ref<span class="token operator">:</span> viewRef<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> slots<span class="token punctuation">.</span>default\n        <span class="token operator">?</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token operator">:</span> component<span class="token punctuation">,</span> route <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token operator">:</span> component<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>setup \u51FD\u6570\u7684\u8FD4\u56DE\u503C\u662F\u4E00\u4E2A\u51FD\u6570\uFF0C\u90A3\u8FD9\u4E2A\u51FD\u6570\u5C31\u662F\u5B83\u7684\u6E32\u67D3\u51FD\u6570\u3002</li><li>depth \u5C31\u662F\u8868\u793A\u8FD9\u4E2A RouterView \u7684\u5D4C\u5957\u5C42\u7EA7\u3002</li><li>\u54CD\u5E94\u5F0F\u5173\u8054\u903B\u8F91\uFF1A<code>RouterView</code> -&gt; <code>ViewComponent</code> -&gt; <code>matchedRoute &amp;&amp; matchedRoute.components[props.name] </code> -&gt; <code>matchedRouteRef</code> -&gt; <code>(props.route || injectedRoute).matched[depth]</code></li><li>injectedRoute \u5C31\u662F\u6211\u4EEC\u5728\u524D\u9762\u5728\u5B89\u88C5\u8DEF\u7531\u65F6\u5019\uFF0C\u6CE8\u5165\u7684\u54CD\u5E94\u5F0F currentRoute \u5BF9\u8C61\uFF0C\u800C depth \u5C31\u662F\u8868\u793A\u8FD9\u4E2A RouterView \u7684\u5D4C\u5957\u5C42\u7EA7\u3002\u8FD9\u91CC\u7684 injectedRoute \u662F\u54CD\u5E94\u5F0F\u7684\u3002</li><li>RouterView \u7684\u6E32\u67D3\u7684\u8DEF\u7531\u7EC4\u4EF6\u548C\u5F53\u524D\u8DEF\u5F84 currentRoute \u7684 matched \u5BF9\u8C61\u76F8\u5173\uFF0C\u4E5F\u548C RouterView \u81EA\u8EAB\u7684\u5D4C\u5957\u5C42\u7EA7\u76F8\u5173\u3002</li></ul><h3 id="matched-\u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684" tabindex="-1"><a class="header-anchor" href="#matched-\u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684" aria-hidden="true">#</a> matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684</h3><p>\u6211\u4EEC\u6267\u884C <code>createRouter</code> \u51FD\u6570\u521B\u5EFA\u8DEF\u7531\u7684\u65F6\u5019\uFF0C\u5185\u90E8\u4F1A\u6267\u884C\u5982\u4E0B\u4EE3\u7801\u6765\u521B\u5EFA\u4E00\u4E2A matcher \u5BF9\u8C61\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">:</span> RouterOptions</span><span class="token punctuation">)</span><span class="token operator">:</span> Router <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> matcher <span class="token operator">=</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>routes<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>createRouterMatcher</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> globalOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> matchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> matcherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  globalOptions <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> strict<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sensitive<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    globalOptions\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> originalRecord</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> isRootAdd <span class="token operator">=</span> <span class="token operator">!</span>originalRecord<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> mainNormalizedRecord <span class="token operator">=</span> <span class="token function">normalizeRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mainNormalizedRecord<span class="token punctuation">.</span>aliasOf <span class="token operator">=</span> originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>record<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>globalOptions<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> normalizedRecords <span class="token operator">=</span> <span class="token punctuation">[</span>mainNormalizedRecord<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> matcher<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> originalMatcher<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> normalizedRecord <span class="token keyword">of</span> normalizedRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> <span class="token punctuation">{</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> normalizedRecord<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> parentPath <span class="token operator">=</span> parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> connectingSlash <span class="token operator">=</span>\n          parentPath<span class="token punctuation">[</span>parentPath<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>\n        normalizedRecord<span class="token punctuation">.</span>path <span class="token operator">=</span>\n          parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> connectingSlash <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      matcher <span class="token operator">=</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span>normalizedRecord<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n        <span class="token function">checkMissingParamsInAbsolutePath</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>originalRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        originalRecord<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">{</span>\n          <span class="token function">checkSameParams</span><span class="token punctuation">(</span>originalRecord<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        originalMatcher <span class="token operator">=</span> originalMatcher <span class="token operator">||</span> matcher<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>originalMatcher <span class="token operator">!==</span> matcher<span class="token punctuation">)</span> originalMatcher<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRootAdd <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token function">removeRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;children&#39;</span> <span class="token keyword">in</span> mainNormalizedRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> children <span class="token operator">=</span> mainNormalizedRecord<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">addRoute</span><span class="token punctuation">(</span>\n            children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>\n            matcher<span class="token punctuation">,</span>\n            originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      originalRecord <span class="token operator">=</span> originalRecord <span class="token operator">||</span> matcher<span class="token punctuation">;</span>\n      <span class="token function">insertMatcher</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> originalMatcher\n      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">removeRoute</span><span class="token punctuation">(</span>originalMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token operator">:</span> noop<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">insertMatcher</span><span class="token punctuation">(</span><span class="token parameter">matcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>\n      i <span class="token operator">&lt;</span> matchers<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>\n      <span class="token function">comparePathParserScore</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> matchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span>\n    <span class="token punctuation">)</span>\n      i<span class="token operator">++</span><span class="token punctuation">;</span>\n    matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      matcherMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// \u5B9A\u4E49\u5176\u5B83\u4E00\u4E9B\u8F85\u52A9\u51FD\u6570</span>\n\n  <span class="token comment">// \u6DFB\u52A0\u521D\u59CB\u8DEF\u5F84</span>\n  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> addRoute<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> removeRoute<span class="token punctuation">,</span> getRoutes<span class="token punctuation">,</span> getRecordMatcher <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>createRouterMatcher</code> \u51FD\u6570\u5185\u90E8\u5B9A\u4E49\u4E86\u4E00\u4E2A <code>matchers</code> \u6570\u7EC4\u548C\u4E00\u4E9B\u8F85\u52A9\u51FD\u6570</p><ul><li>addRoute</li><li>resolve</li><li>removeRoute</li><li>getRoutes</li><li>getRecordMatcher</li></ul><p>\u5728 createRouterMatcher \u51FD\u6570\u7684\u6700\u540E\uFF0C\u4F1A\u904D\u5386 routes \u8DEF\u5F84\u6570\u7EC4\u8C03\u7528 addRoute \u65B9\u6CD5\u6DFB\u52A0\u521D\u59CB\u8DEF\u5F84\u3002\u5728 addRoute \u51FD\u6570\u5185\u90E8\uFF0C\u9996\u5148\u4F1A\u628A route \u5BF9\u8C61\u6807\u51C6\u5316\u6210\u4E00\u4E2A record\uFF0C\u5176\u5B9E\u5C31\u662F\u7ED9\u8DEF\u5F84\u5BF9\u8C61\u6DFB\u52A0\u66F4\u4E30\u5BCC\u7684\u5C5E\u6027\u3002</p><p>\u7136\u540E\u518D\u6267\u884C createRouteRecordMatcher \u51FD\u6570\uFF0C\u4F20\u5165\u6807\u51C6\u5316\u7684 record \u5BF9\u8C61</p><h3 id="createrouterecordmatcher" tabindex="-1"><a class="header-anchor" href="#createrouterecordmatcher" aria-hidden="true">#</a> createRouteRecordMatcher</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">tokensToParser</span><span class="token punctuation">(</span><span class="token function">tokenizePath</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> existingKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> parser<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>existingKeys<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Found duplicated params with name &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; for path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Only the last one will be available on &quot;$route.params&quot;.</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      existingKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> matcher <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    record<span class="token punctuation">,</span>\n    parent<span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf <span class="token operator">===</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf<span class="token punctuation">)</span>\n      parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> matcher<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>\u5176\u5B9E createRouteRecordMatcher \u521B\u5EFA\u7684 matcher \u5BF9\u8C61\u4E0D\u4EC5\u4EC5\u62E5\u6709 record \u5C5E\u6027\u6765\u5B58\u50A8 record\uFF0C\u8FD8\u6269\u5C55\u4E86\u4E00\u4E9B\u5176\u4ED6\u5C5E\u6027\uFF0C\u9700\u8981\u6CE8\u610F\uFF0C\u5982\u679C\u5B58\u5728 parent matcher\uFF0C\u90A3\u4E48\u4F1A\u628A\u5F53\u524D matcher \u6DFB\u52A0\u5230 parent.children \u4E2D\u53BB\uFF0C\u8FD9\u6837\u5C31\u7EF4\u62A4\u4E86\u7236\u5B50\u5173\u7CFB\uFF0C\u6784\u9020\u4E86\u6811\u5F62\u7ED3\u6784\u3002</p><div style="color:red;"> matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684? </div><p>\u5207\u6362\u8DEF\u5F84\u4F1A\u6267\u884C pushWithRedirect \u65B9\u6CD5\uFF0C\u5185\u90E8\u4F1A\u6267\u884C\u4E00\u6BB5\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetLocation <span class="token operator">=</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> resolve</h3><p>\u6267\u884C resolve \u51FD\u6570\u89E3\u6790\u751F\u6210 targetLocation\uFF0C\u8FD9\u4E2A targetLocation \u6700\u540E\u4E5F\u4F1A\u5728 finalizeNavigation \u7684\u65F6\u5019\u8D4B\u503C currentRoute \u66F4\u65B0\u5F53\u524D\u8DEF\u5F84\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> currentLocation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> matcher<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> path<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> location <span class="token operator">&amp;&amp;</span> location<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    matcher <span class="token operator">=</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>\n      <span class="token keyword">throw</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        location<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n      <span class="token function">paramsFromLocation</span><span class="token punctuation">(</span>\n        currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span>\n        matcher<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>k<span class="token punctuation">.</span>optional<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> k<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      location<span class="token punctuation">.</span>params\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    path <span class="token operator">=</span> location<span class="token punctuation">.</span>path<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The Matcher cannot resolve relative paths but received &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Unless you directly called \\`matcher.resolve(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    matcher <span class="token operator">=</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      params <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    matcher <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>name\n      <span class="token operator">?</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n      <span class="token operator">:</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>\n      <span class="token keyword">throw</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        location<span class="token punctuation">,</span>\n        currentLocation<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> matched <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> parentMatcher <span class="token operator">=</span> matcher<span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>parentMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    matched<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>parentMatcher<span class="token punctuation">.</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    parentMatcher <span class="token operator">=</span> parentMatcher<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token punctuation">,</span>\n    path<span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    matched<span class="token punctuation">,</span>\n    meta<span class="token operator">:</span> <span class="token function">mergeMetaFields</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>resolve \u51FD\u6570\u4E3B\u8981\u505A\u7684\u4E8B\u60C5\u5C31\u662F\u6839\u636E location \u7684 name \u6216\u8005 path \u4ECE\u6211\u4EEC\u524D\u9762\u521B\u5EFA\u7684 matchers \u6570\u7EC4\u4E2D\u627E\u5230\u5BF9\u5E94\u7684 matcher\uFF0C\u7136\u540E\u518D\u987A\u7740 matcher \u7684 parent \u4E00\u76F4\u627E\u5230\u94FE\u8DEF\u4E0A\u6240\u6709\u5339\u914D\u7684 matcher\uFF0C\u7136\u540E\u83B7\u53D6\u5176\u4E2D\u7684 record \u5C5E\u6027\u6784\u9020\u6210\u4E00\u4E2A matched \u6570\u7EC4\uFF0C\u6700\u7EC8\u8FD4\u56DE\u5305\u542B matched \u5C5E\u6027\u7684\u65B0\u7684\u8DEF\u5F84\u5BF9\u8C61\u3002</p><p>\u8FD9\u4E48\u505A\u7684\u76EE\u7684\u5C31\u662F\u8BA9 matched \u6570\u7EC4\u5B8C\u6574\u8BB0\u5F55 record \u8DEF\u5F84\uFF0C\u5B83\u7684\u987A\u5E8F\u548C\u5D4C\u5957\u7684 RouterView \u7EC4\u4EF6\u987A\u5E8F\u4E00\u81F4\uFF0C\u4E5F\u5C31\u662F matched \u6570\u7EC4\u4E2D\u7684\u7B2C n \u4E2A\u5143\u7D20\u5C31\u4EE3\u8868\u7740 RouterView \u5D4C\u5957\u7684\u7B2C n \u5C42\u3002</p><p>\u56E0\u6B64 targetLocation \u548C to \u76F8\u6BD4\uFF0C\u5176\u5B9E\u5C31\u662F\u591A\u4E86\u4E00\u4E2A matched \u5BF9\u8C61\uFF0C\u8FD9\u6837\u518D\u56DE\u5230\u6211\u4EEC\u7684 RouterView \u7EC4\u4EF6\uFF0C\u5C31\u53EF\u4EE5\u4ECE<code>injectedRoute.matched[depth] [props.name]</code>\u4E2D\u62FF\u5230\u5BF9\u5E94\u7684\u7EC4\u4EF6\u5BF9\u8C61\u5B9A\u4E49\uFF0C\u53BB\u6E32\u67D3\u5BF9\u5E94\u7684\u7EC4\u4EF6\u4E86\u3002</p><h2 id="\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0" aria-hidden="true">#</a> \u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&#39;Login&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isAuthenticated<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Login&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>\u5BF9\u4E8E\u5BFC\u822A\u5B88\u536B\u800C\u8A00\uFF0C\u7ECF\u8FC7 Promise \u5316\u540E\u6DFB\u52A0\u5230 guards \u6570\u7EC4\u4E2D\uFF0C\u7136\u540E\u518D\u901A\u8FC7 runGuards \u4EE5\u53CA Promise \u7684\u65B9\u5F0F\u94FE\u5F0F\u8C03\u7528\uFF0C\u6700\u7EC8\u4F9D\u6B21\u987A\u5E8F\u6267\u884C\u8FD9\u4E9B\u5BFC\u822A\u5B88\u536B\u3002</p>', 80);
const _hoisted_104 = {
  href: "https://blog.csdn.net/weixin_40906515/article/details/120695253",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_105 = /* @__PURE__ */ createTextVNode("\u662F\u4EC0\u4E48\u4E8B\u8BA9\u5C24\u5927\u5982\u6B64\u751F\u6C14\uFF1F");
function _sfc_render(_ctx, _cache) {
  const _component_RouterLink = resolveComponent("RouterLink");
  const _component_OutboundLink = resolveComponent("OutboundLink");
  return openBlock(), createElementBlock(Fragment, null, [
    _hoisted_1,
    createBaseVNode("nav", _hoisted_2, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#\u76EE\u5F55\u7ED3\u6784" }, {
            default: withCtx(() => [
              _hoisted_3
            ]),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#createrouter" }, {
            default: withCtx(() => [
              _hoisted_4
            ]),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#install" }, {
                default: withCtx(() => [
                  _hoisted_5
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#provide" }, {
                default: withCtx(() => [
                  _hoisted_6
                ]),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#currentroute" }, {
            default: withCtx(() => [
              _hoisted_7
            ]),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#pushwithredirect" }, {
                default: withCtx(() => [
                  _hoisted_8
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#navigate" }, {
                default: withCtx(() => [
                  _hoisted_9
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#finalizenavigation" }, {
                default: withCtx(() => [
                  _hoisted_10
                ]),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#history-\u7684\u6A21\u5F0F" }, {
            default: withCtx(() => [
              _hoisted_11
            ]),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5" }, {
                default: withCtx(() => [
                  _hoisted_12
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#createwebhistory" }, {
                default: withCtx(() => [
                  _hoisted_13
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#usehistorystatenavigation" }, {
                default: withCtx(() => [
                  _hoisted_14
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#changelocation" }, {
                default: withCtx(() => [
                  _hoisted_15
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#usehistorylisteners" }, {
                default: withCtx(() => [
                  _hoisted_16
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#finalizenavigation-1" }, {
                default: withCtx(() => [
                  _hoisted_17
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#markasready" }, {
                default: withCtx(() => [
                  _hoisted_18
                ]),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#routerview" }, {
            default: withCtx(() => [
              _hoisted_19
            ]),
            _: 1
          }),
          createBaseVNode("ul", null, [
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#matched-\u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684" }, {
                default: withCtx(() => [
                  _hoisted_20
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#createrouterecordmatcher" }, {
                default: withCtx(() => [
                  _hoisted_21
                ]),
                _: 1
              })
            ]),
            createBaseVNode("li", null, [
              createVNode(_component_RouterLink, { to: "#resolve" }, {
                default: withCtx(() => [
                  _hoisted_22
                ]),
                _: 1
              })
            ])
          ])
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0" }, {
            default: withCtx(() => [
              _hoisted_23
            ]),
            _: 1
          })
        ])
      ])
    ]),
    _hoisted_24,
    createBaseVNode("ul", null, [
      createBaseVNode("li", null, [
        createBaseVNode("a", _hoisted_104, [
          _hoisted_105,
          createVNode(_component_OutboundLink)
        ])
      ])
    ])
  ], 64);
}
var sourceCode_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { sourceCode_html as default };
