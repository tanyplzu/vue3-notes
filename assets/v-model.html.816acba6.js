import { e as createStaticVNode } from "./app.f1ef7422.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.5a098b48.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> v-model</h1><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> vModelText <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> <span class="token punctuation">{</span> modifiers<span class="token operator">:</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> trim<span class="token punctuation">,</span> number <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span>_assign <span class="token operator">=</span> <span class="token function">getModelAssigner</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> castToNumber <span class="token operator">=</span>\n      number <span class="token operator">||</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> lazy <span class="token operator">?</span> <span class="token string">&#39;change&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> domValue <span class="token operator">=</span> el<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        domValue <span class="token operator">=</span> domValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>castToNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        domValue <span class="token operator">=</span> shared<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span>domValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      el<span class="token punctuation">.</span><span class="token function">_assign</span><span class="token punctuation">(</span>domValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        el<span class="token punctuation">.</span>value <span class="token operator">=</span> el<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;compositionstart&#39;</span><span class="token punctuation">,</span> onCompositionStart<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;compositionend&#39;</span><span class="token punctuation">,</span> onCompositionEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// Safari &lt; 10.2 &amp; UIWebView doesn&#39;t fire compositionend when</span>\n      <span class="token comment">// switching focus before confirming composition choice</span>\n      <span class="token comment">// this also fixes the issue where some browsers e.g. iOS Chrome</span>\n      <span class="token comment">// fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.</span>\n      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onCompositionEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// set value on mounted so it&#39;s after min/max for type=&quot;range&quot;</span>\n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span>value <span class="token operator">=</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> modifiers<span class="token operator">:</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> trim<span class="token punctuation">,</span> number <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span>_assign <span class="token operator">=</span> <span class="token function">getModelAssigner</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// avoid clearing unresolved text. #2302</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>activeElement <span class="token operator">===</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>trim <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token punctuation">(</span>number <span class="token operator">||</span> el<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        shared<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> value\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> newValue <span class="token operator">=</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>value <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      el<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>\u5728\u81EA\u5B9A\u4E49\u7EC4\u4EF6\u4E0A\u4F5C\u7528 v-model</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;custom-input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;modelValue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;input v-model=&quot;value&quot;&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modelValue<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:modelValue&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>', 4);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var vModel_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { vModel_html as default };
