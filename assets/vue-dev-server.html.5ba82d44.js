import { r as resolveComponent, c as createElementBlock, a as createBaseVNode, b as createVNode, w as withCtx, F as Fragment, d as createTextVNode, e as createStaticVNode, o as openBlock } from "./app.f1ef7422.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.5a098b48.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "vue-dev-server",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#vue-dev-server",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" vue-dev-server")
], -1);
const _hoisted_2 = { class: "table-of-contents" };
const _hoisted_3 = /* @__PURE__ */ createTextVNode("vue-dev-server");
const _hoisted_4 = /* @__PURE__ */ createTextVNode("vueMiddleware");
const _hoisted_5 = /* @__PURE__ */ createTextVNode("transformModuleImports.js");
const _hoisted_6 = /* @__PURE__ */ createTextVNode("readSource.js");
const _hoisted_7 = /* @__PURE__ */ createTextVNode("loadPkg.js");
const _hoisted_8 = /* @__PURE__ */ createStaticVNode('<p>vue-dev-server \u662F\u4E00\u4E2A\u73A9\u5177 vite\uFF0C\u4EE5\u4E0B\u662F\u5B83\u7684\u4EE3\u7801\uFF1A</p><h2 id="vue-dev-server-1" tabindex="-1"><a class="header-anchor" href="#vue-dev-server-1" aria-hidden="true">#</a> vue-dev-server</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>\n\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> vueMiddleware <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../middleware&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">vueMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server running at http://localhost:3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="vuemiddleware" tabindex="-1"><a class="header-anchor" href="#vuemiddleware" aria-hidden="true">#</a> vueMiddleware</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> vueCompiler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/component-compiler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> stat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> parseUrl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;parseurl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> transformModuleImports <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./transformModuleImports&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> loadPkg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./loadPkg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> readSource <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./readSource&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  cache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">vueMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> defaultOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> cache<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token constant">LRU</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lru-cache&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRU</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      max<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">length</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> compiler <span class="token operator">=</span> vueCompiler<span class="token punctuation">.</span><span class="token function">createDefaultCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> source<span class="token punctuation">,</span> mime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> mime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">injectSourceMapToBlock</span><span class="token punctuation">(</span><span class="token parameter">block<span class="token punctuation">,</span> lang</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> map <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> mapInject<span class="token punctuation">;</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>lang<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;js&#39;</span><span class="token operator">:</span>\n        mapInject <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">//# sourceMappingURL=data:application/json;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>map<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">&#39;css&#39;</span><span class="token operator">:</span>\n        mapInject <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/*# sourceMappingURL=data:application/json;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>map<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">*/\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>block<span class="token punctuation">,</span>\n      code<span class="token operator">:</span> mapInject <span class="token operator">+</span> block<span class="token punctuation">.</span>code<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">injectSourceMapToScript</span><span class="token punctuation">(</span><span class="token parameter">script</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">injectSourceMapToBlock</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">injectSourceMapsToStyles</span><span class="token punctuation">(</span><span class="token parameter">styles</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> styles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">style</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">injectSourceMapToBlock</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">tryCache</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> checkUpdateTime <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>checkUpdateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> cacheUpdateTime <span class="token operator">=</span> time<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> fileUpdateTime <span class="token operator">=</span> <span class="token punctuation">(</span>\n        <span class="token keyword">await</span> <span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheUpdateTime <span class="token operator">&lt;</span> fileUpdateTime<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">cacheData</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> updateTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> old <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">!=</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>updateTime<span class="token punctuation">)</span> time<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> updateTime<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// bundleSFC \u7F16\u8BD1\u5355\u6587\u4EF6\u7EC4\u4EF6</span>\n  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bundleSFC</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> filepath<span class="token punctuation">,</span> source<span class="token punctuation">,</span> updateTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readSource</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> descriptorResult <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">compileToDescriptor</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> assembledResult <span class="token operator">=</span> vueCompiler<span class="token punctuation">.</span><span class="token function">assemble</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> filepath<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>descriptorResult<span class="token punctuation">,</span>\n      script<span class="token operator">:</span> <span class="token function">injectSourceMapToScript</span><span class="token punctuation">(</span>descriptorResult<span class="token punctuation">.</span>script<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      styles<span class="token operator">:</span> <span class="token function">injectSourceMapsToStyles</span><span class="token punctuation">(</span>descriptorResult<span class="token punctuation">.</span>styles<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>assembledResult<span class="token punctuation">,</span> updateTime <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// \u5BF9 .vue \u7ED3\u5C3E\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>\n      <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tryCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Bundle Single-File Component</span>\n        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">bundleSFC</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        out <span class="token operator">=</span> result<span class="token punctuation">;</span>\n        <span class="token function">cacheData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> out<span class="token punctuation">,</span> result<span class="token punctuation">.</span>updateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> out<span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token string">&#39;application/javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// \u5BF9 .js \u7ED3\u5C3E\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>\n      <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tryCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// transform import statements</span>\n        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readSource</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        out <span class="token operator">=</span> <span class="token function">transformModuleImports</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">cacheData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> out<span class="token punctuation">,</span> result<span class="token punctuation">.</span>updateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token string">&#39;application/javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// \u5BF9 /__modules/ \u5F00\u5934\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/__modules/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> pkg <span class="token operator">=</span> req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/__modules\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tryCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Do not outdate modules</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        out <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">loadPkg</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">cacheData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Do not outdate modules</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token string">&#39;application/javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nexports<span class="token punctuation">.</span>vueMiddleware <span class="token operator">=</span> vueMiddleware<span class="token punctuation">;</span>\n</code></pre></div><p>vueMiddleware \u6700\u7EC8\u8FD4\u56DE\u4E00\u4E2A\u51FD\u6570\u3002\u8FD9\u4E2A\u51FD\u6570\u91CC\u4E3B\u8981\u505A\u4E86\u56DB\u4EF6\u4E8B\uFF1A</p><ul><li>\u5BF9 .vue \u7ED3\u5C3E\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</li><li>\u5BF9 .js \u7ED3\u5C3E\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</li><li>\u5BF9 /__modules/ \u5F00\u5934\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</li><li>\u5982\u679C\u4E0D\u662F\u4EE5\u4E0A\u4E09\u79CD\u60C5\u51B5\uFF0C\u6267\u884C next \u65B9\u6CD5\uFF0C\u628A\u63A7\u5236\u6743\u4EA4\u7ED9\u4E0B\u4E00\u4E2A\u4E2D\u95F4\u4EF6</li></ul><h2 id="transformmoduleimports-js" tabindex="-1"><a class="header-anchor" href="#transformmoduleimports-js" aria-hidden="true">#</a> transformModuleImports.js</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> recast <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;recast&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isPkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;validate-npm-package-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">transformModuleImports</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ast <span class="token operator">=</span> recast<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">visitImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> source <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPkg</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>source <span class="token operator">=</span> recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span>builders<span class="token punctuation">.</span><span class="token function">literal</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/__modules/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> recast<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nexports<span class="token punctuation">.</span>transformModuleImports <span class="token operator">=</span> transformModuleImports<span class="token punctuation">;</span>\n</code></pre></div><h2 id="readsource-js" tabindex="-1"><a class="header-anchor" href="#readsource-js" aria-hidden="true">#</a> readSource.js</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> stat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> parseUrl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;parseurl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readSource</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> pathname<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    filepath<span class="token punctuation">,</span>\n    source<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    updateTime<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">stat</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nexports<span class="token punctuation">.</span>readSource <span class="token operator">=</span> readSource<span class="token punctuation">;</span>\n</code></pre></div><h2 id="loadpkg-js" tabindex="-1"><a class="header-anchor" href="#loadpkg-js" aria-hidden="true">#</a> loadPkg.js</h2><p>\u76EE\u524D\u53EA\u652F\u6301 <code>Vue</code> \u6587\u4EF6\uFF0C\u4E5F\u5C31\u662F\u8BFB\u53D6\u8DEF\u5F84 <code>vue-dev-server/node_modules/vue/dist/vue.esm.browser.js</code> \u4E0B\u7684\u6587\u4EF6\u8FD4\u56DE</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadPkg</span><span class="token punctuation">(</span><span class="token parameter">pkg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">===</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> dir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&#39;vue.esm.browser.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// TODO</span>\n    <span class="token comment">// check if the package has a browser es module that can be used</span>\n    <span class="token comment">// otherwise bundle it with rollup on the fly?</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;npm imports support are not ready yet.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nexports<span class="token punctuation">.</span>loadPkg <span class="token operator">=</span> loadPkg<span class="token punctuation">;</span>\n</code></pre></div><p>\u8D44\u6599:</p>', 15);
const _hoisted_23 = /* @__PURE__ */ createBaseVNode("li", null, "\u4EE3\u7801\u5730\u5740\uFF1A https://github.com/vuejs/vue-dev-server", -1);
const _hoisted_24 = /* @__PURE__ */ createTextVNode("\u4EE3\u7801\u89E3\u8BFB\uFF1A");
const _hoisted_25 = {
  href: "https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&mid=2650758126&idx=1&sn=e506d684b281d84406689fb07d64c9dc&chksm=88665862bf11d174fbc3408338be4519ebfa4fbd609508abac2d4178fea992166aa828a30178&scene=178&cur_album_id=1342211915371675650#rd",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_26 = /* @__PURE__ */ createTextVNode("\u5C24\u96E8\u6EAA\u5199\u7684 100 \u591A\u884C\u7684\u201C\u73A9\u5177 vite\u201D\uFF0C\u5341\u5206\u6709\u52A9\u4E8E\u7406\u89E3 vite \u539F\u7406");
function _sfc_render(_ctx, _cache) {
  const _component_RouterLink = resolveComponent("RouterLink");
  const _component_OutboundLink = resolveComponent("OutboundLink");
  return openBlock(), createElementBlock(Fragment, null, [
    _hoisted_1,
    createBaseVNode("nav", _hoisted_2, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#vue-dev-server-1" }, {
            default: withCtx(() => [
              _hoisted_3
            ]),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#vuemiddleware" }, {
            default: withCtx(() => [
              _hoisted_4
            ]),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#transformmoduleimports-js" }, {
            default: withCtx(() => [
              _hoisted_5
            ]),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#readsource-js" }, {
            default: withCtx(() => [
              _hoisted_6
            ]),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#loadpkg-js" }, {
            default: withCtx(() => [
              _hoisted_7
            ]),
            _: 1
          })
        ])
      ])
    ]),
    _hoisted_8,
    createBaseVNode("ul", null, [
      _hoisted_23,
      createBaseVNode("li", null, [
        _hoisted_24,
        createBaseVNode("a", _hoisted_25, [
          _hoisted_26,
          createVNode(_component_OutboundLink)
        ])
      ])
    ])
  ], 64);
}
var vueDevServer_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { vueDevServer_html as default };
