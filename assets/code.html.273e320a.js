import { e as createStaticVNode } from "./app.f1ef7422.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.5a098b48.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="vue-router-v4-0-12" tabindex="-1"><a class="header-anchor" href="#vue-router-v4-0-12" aria-hidden="true">#</a> vue-router v4.0.12</h1><p><code>vue-router.esm-browser.js</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">/*!\n * vue-router v4.0.12\n * (c) 2021 Eduardo San Martin Morote\n * @license MIT\n */</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  getCurrentInstance<span class="token punctuation">,</span>\n  inject<span class="token punctuation">,</span>\n  onUnmounted<span class="token punctuation">,</span>\n  onDeactivated<span class="token punctuation">,</span>\n  onActivated<span class="token punctuation">,</span>\n  computed<span class="token punctuation">,</span>\n  unref<span class="token punctuation">,</span>\n  watchEffect<span class="token punctuation">,</span>\n  defineComponent<span class="token punctuation">,</span>\n  reactive<span class="token punctuation">,</span>\n  h<span class="token punctuation">,</span>\n  provide<span class="token punctuation">,</span>\n  ref<span class="token punctuation">,</span>\n  watch<span class="token punctuation">,</span>\n  shallowRef<span class="token punctuation">,</span>\n  nextTick<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> setupDevtoolsPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/devtools-api&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> hasSymbol <span class="token operator">=</span>\n  <span class="token keyword">typeof</span> Symbol <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Symbol<span class="token punctuation">.</span>toStringTag <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">PolySymbol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token comment">// vr = vue router</span>\n  hasSymbol <span class="token operator">?</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;[vue-router]: &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;[vue-router]: &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>\n<span class="token comment">// rvlm = Router View Location Matched</span>\n<span class="token doc-comment comment">/**\n * RouteRecord being rendered by the closest ancestor Router View. Used for\n * `onBeforeRouteUpdate` and `onBeforeRouteLeave`. rvlm stands for Router View\n * Location Matched\n *\n * <span class="token keyword">@internal</span>\n */</span>\n<span class="token keyword">const</span> matchedRouteKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;router view location matched&#39;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Allows overriding the router view depth to control which component in\n * `matched` is rendered. rvd stands for Router View Depth\n *\n * <span class="token keyword">@internal</span>\n */</span>\n<span class="token keyword">const</span> viewDepthKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router view depth&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Allows overriding the router instance returned by `useRouter` in tests. r\n * stands for router\n *\n * <span class="token keyword">@internal</span>\n */</span>\n<span class="token keyword">const</span> routerKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Allows overriding the current route returned by `useRoute` in tests. rl\n * stands for route location\n *\n * <span class="token keyword">@internal</span>\n */</span>\n<span class="token keyword">const</span> routeLocationKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;route location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Allows overriding the current route used by router-view. Internally this is\n * used when the `route` prop is passed.\n *\n * <span class="token keyword">@internal</span>\n */</span>\n<span class="token keyword">const</span> routerViewLocationKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router view location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> isBrowser <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">isESModule</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>__esModule <span class="token operator">||</span> <span class="token punctuation">(</span>hasSymbol <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> assign <span class="token operator">=</span> Object<span class="token punctuation">.</span>assign<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">applyToParams</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    newParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newParams<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// avoid using ...args as it breaks in older Edge builds</span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;[Vue Router warn]: &#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token constant">TRAILING_SLASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">removeTrailingSlash</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">TRAILING_SLASH_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Transforms an URI into a normalized history location\n *\n * <span class="token keyword">@param</span> <span class="token parameter">parseQuery</span>\n * <span class="token keyword">@param</span> <span class="token parameter">location</span> - URI to normalize\n * <span class="token keyword">@param</span> <span class="token parameter">currentLocation</span> - current absolute location. Allows resolving relative\n * paths. Must start with `/`. Defaults to `/`\n * <span class="token keyword">@returns</span> a normalized history location\n */</span>\n<span class="token keyword">function</span> <span class="token function">parseURL</span><span class="token punctuation">(</span>parseQuery<span class="token punctuation">,</span> location<span class="token punctuation">,</span> currentLocation <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> path<span class="token punctuation">,</span>\n    query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    searchString <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    hash <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// Could use URL and URLSearchParams but IE 11 doesn&#39;t support it</span>\n  <span class="token keyword">const</span> searchPos <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> hashPos <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">,</span> searchPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> searchPos <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    path <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> searchPos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    searchString <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>\n      searchPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      hashPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> hashPos <span class="token operator">:</span> location<span class="token punctuation">.</span>length\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    query <span class="token operator">=</span> <span class="token function">parseQuery</span><span class="token punctuation">(</span>searchString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    path <span class="token operator">=</span> path <span class="token operator">||</span> location<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hashPos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// keep the # character</span>\n    hash <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashPos<span class="token punctuation">,</span> location<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// no search and no query</span>\n  path <span class="token operator">=</span> <span class="token function">resolveRelativePath</span><span class="token punctuation">(</span>path <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> path <span class="token operator">:</span> location<span class="token punctuation">,</span> currentLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// empty path means a relative query or hash `?foo=f`, `#thing`</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    fullPath<span class="token operator">:</span> path <span class="token operator">+</span> <span class="token punctuation">(</span>searchString <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> searchString <span class="token operator">+</span> hash<span class="token punctuation">,</span>\n    path<span class="token punctuation">,</span>\n    query<span class="token punctuation">,</span>\n    hash<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Stringifies a URL object\n *\n * <span class="token keyword">@param</span> <span class="token parameter">stringifyQuery</span>\n * <span class="token keyword">@param</span> <span class="token parameter">location</span>\n */</span>\n<span class="token keyword">function</span> <span class="token function">stringifyURL</span><span class="token punctuation">(</span><span class="token parameter">stringifyQuery<span class="token punctuation">,</span> location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> query <span class="token operator">=</span> location<span class="token punctuation">.</span>query <span class="token operator">?</span> <span class="token function">stringifyQuery</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> location<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token punctuation">(</span>query <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> query <span class="token operator">+</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Strips off the base from the beginning of a location.pathname in a non\n * case-sensitive way.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">pathname</span> - location.pathname\n * <span class="token keyword">@param</span> <span class="token parameter">base</span> - base to strip off\n */</span>\n<span class="token keyword">function</span> <span class="token function">stripBase</span><span class="token punctuation">(</span><span class="token parameter">pathname<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// no base or base is not found at the beginning</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base <span class="token operator">||</span> <span class="token operator">!</span>pathname<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> pathname<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Checks if two RouteLocation are equal. This means that both locations are\n * pointing towards the same <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteRecord<span class="token punctuation">}</span> and that all `params`, `query`\n * parameters and `hash` are the same\n *\n * <span class="token keyword">@param</span> <span class="token parameter">a</span> - first <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteLocation<span class="token punctuation">}</span>\n * <span class="token keyword">@param</span> <span class="token parameter">b</span> - second <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteLocation<span class="token punctuation">}</span>\n */</span>\n<span class="token keyword">function</span> <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span><span class="token parameter">stringifyQuery<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> aLastIndex <span class="token operator">=</span> a<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> bLastIndex <span class="token operator">=</span> b<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    aLastIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>\n    aLastIndex <span class="token operator">===</span> bLastIndex <span class="token operator">&amp;&amp;</span>\n    <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>aLastIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>bLastIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token function">isSameRouteLocationParams</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>params<span class="token punctuation">,</span> b<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token function">stringifyQuery</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">stringifyQuery</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    a<span class="token punctuation">.</span>hash <span class="token operator">===</span> b<span class="token punctuation">.</span>hash\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\n * considered equal to the `RouteRecord` they are aliasing.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">a</span> - first <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteRecord<span class="token punctuation">}</span>\n * <span class="token keyword">@param</span> <span class="token parameter">b</span> - second <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteRecord<span class="token punctuation">}</span>\n */</span>\n<span class="token keyword">function</span> <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// since the original record has an undefined value for aliasOf</span>\n  <span class="token comment">// but all aliases point to the original record, this will always compare</span>\n  <span class="token comment">// the original record</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>aliasOf <span class="token operator">||</span> a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>aliasOf <span class="token operator">||</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isSameRouteLocationParams</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSameRouteLocationParamsValue</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isSameRouteLocationParamsValue</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token operator">?</span> <span class="token function">isEquivalentArray</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n    <span class="token operator">:</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n    <span class="token operator">?</span> <span class="token function">isEquivalentArray</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>\n    <span class="token operator">:</span> a <span class="token operator">===</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Check if two arrays are the same or if an array with one single entry is the\n * same as another primitive value. Used to check query and parameters\n *\n * <span class="token keyword">@param</span> <span class="token parameter">a</span> - array of values\n * <span class="token keyword">@param</span> <span class="token parameter">b</span> - array of values or a single value\n */</span>\n<span class="token keyword">function</span> <span class="token function">isEquivalentArray</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n    <span class="token operator">?</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">===</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token operator">:</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Resolves a relative path that starts with `.`.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">to</span> - path location we are resolving\n * <span class="token keyword">@param</span> <span class="token parameter">from</span> - currentLocation.path, should start with `/`\n */</span>\n<span class="token keyword">function</span> <span class="token function">resolveRelativePath</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> to<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>from<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Cannot resolve a relative location without an absolute path. Trying to resolve &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. It should look like &quot;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> to<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>to<span class="token punctuation">)</span> <span class="token keyword">return</span> from<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> fromSegments <span class="token operator">=</span> from<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> toSegments <span class="token operator">=</span> to<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> position <span class="token operator">=</span> fromSegments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> toPosition<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> segment<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>toPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> toPosition <span class="token operator">&lt;</span> toSegments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> toPosition<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    segment <span class="token operator">=</span> toSegments<span class="token punctuation">[</span>toPosition<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// can&#39;t go below zero</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> segment <span class="token operator">===</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment <span class="token operator">===</span> <span class="token string">&#39;..&#39;</span><span class="token punctuation">)</span> position<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token comment">// found something that is not relative path</span>\n    <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    fromSegments<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span>\n    toSegments\n      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>toPosition <span class="token operator">-</span> <span class="token punctuation">(</span>toPosition <span class="token operator">===</span> toSegments<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> NavigationType<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">NavigationType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  NavigationType<span class="token punctuation">[</span><span class="token string">&#39;pop&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">;</span>\n  NavigationType<span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;push&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NavigationType <span class="token operator">||</span> <span class="token punctuation">(</span>NavigationType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> NavigationDirection<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">NavigationDirection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  NavigationDirection<span class="token punctuation">[</span><span class="token string">&#39;back&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;back&#39;</span><span class="token punctuation">;</span>\n  NavigationDirection<span class="token punctuation">[</span><span class="token string">&#39;forward&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;forward&#39;</span><span class="token punctuation">;</span>\n  NavigationDirection<span class="token punctuation">[</span><span class="token string">&#39;unknown&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NavigationDirection <span class="token operator">||</span> <span class="token punctuation">(</span>NavigationDirection <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Starting location for Histories\n */</span>\n<span class="token keyword">const</span> <span class="token constant">START</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// Generic utils</span>\n<span class="token doc-comment comment">/**\n * Normalizes a base by removing any trailing slash and reading the base tag if\n * present.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">base</span> - base to normalize\n */</span>\n<span class="token keyword">function</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// respect &lt;base&gt; tag</span>\n      <span class="token keyword">const</span> baseEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      base <span class="token operator">=</span> <span class="token punctuation">(</span>baseEl <span class="token operator">&amp;&amp;</span> baseEl<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>\n      <span class="token comment">// strip full URL origin</span>\n      base <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+:\\/\\/[^\\/]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      base <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ensure leading slash when it was removed by the regex above avoid leading</span>\n  <span class="token comment">// slash with hash because the file could be read from the disk like file://</span>\n  <span class="token comment">// and the leading slash would cause problems</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">&amp;&amp;</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> base <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> base<span class="token punctuation">;</span>\n  <span class="token comment">// remove the trailing slash so all other method can just do `base + fullPath`</span>\n  <span class="token comment">// to build an href</span>\n  <span class="token keyword">return</span> <span class="token function">removeTrailingSlash</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// remove any character before the hash</span>\n<span class="token keyword">const</span> <span class="token constant">BEFORE_HASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^#]+#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">createHref</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> base<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">BEFORE_HASH_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> location<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getElementPosition</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> offset</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> docRect <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> elRect <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    behavior<span class="token operator">:</span> offset<span class="token punctuation">.</span>behavior<span class="token punctuation">,</span>\n    left<span class="token operator">:</span> elRect<span class="token punctuation">.</span>left <span class="token operator">-</span> docRect<span class="token punctuation">.</span>left <span class="token operator">-</span> <span class="token punctuation">(</span>offset<span class="token punctuation">.</span>left <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    top<span class="token operator">:</span> elRect<span class="token punctuation">.</span>top <span class="token operator">-</span> docRect<span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token punctuation">(</span>offset<span class="token punctuation">.</span>top <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">computeScrollPosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  left<span class="token operator">:</span> window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">,</span>\n  top<span class="token operator">:</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">scrollToPosition</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> scrollToOptions<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;el&#39;</span> <span class="token keyword">in</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> positionEl <span class="token operator">=</span> position<span class="token punctuation">.</span>el<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> isIdSelector <span class="token operator">=</span>\n      <span class="token keyword">typeof</span> positionEl <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span> positionEl<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token doc-comment comment">/**\n     * `id`s can accept pretty much any characters, including CSS combinators\n     * like `&gt;` or `~`. It&#39;s still possible to retrieve elements using\n     * `document.getElementById(&#39;~&#39;)` but it needs to be escaped when using\n     * `document.querySelector(&#39;#\\\\~&#39;)` for it to be valid. The only\n     * requirements for `id`s are them to be unique on the page and to not be\n     * empty (`id=&quot;&quot;`). Because of that, when passing an id selector, it should\n     * be properly escaped for it to work with `querySelector`. We could check\n     * for the id selector to be simple (no CSS combinators `+ &gt;~`) but that\n     * would make things inconsistent since they are valid characters for an\n     * `id` but would need to be escaped when using `querySelector`, breaking\n     * their usage and ending up in no selector returned. Selectors need to be\n     * escaped:\n     *\n     * - `#1-thing` becomes `#\\31 -thing`\n     * - `#with~symbols` becomes `#with\\\\~symbols`\n     *\n     * - More information about  the topic can be found at\n     *   https://mathiasbynens.be/notes/html5-id-class.\n     * - Practical example: https://mathiasbynens.be/demo/html5-id\n     */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> position<span class="token punctuation">.</span>el <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isIdSelector <span class="token operator">||</span> <span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> foundEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>isIdSelector <span class="token operator">&amp;&amp;</span> foundEl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">warn</span><span class="token punctuation">(</span>\n              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The selector &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>position<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should be passed as &quot;el: document.querySelector(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>position<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;)&quot; because it starts with &quot;#&quot;.</span><span class="token template-punctuation string">`</span></span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// return to avoid other warnings</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">warn</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The selector &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>position<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).</span><span class="token template-punctuation string">`</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// return to avoid other warnings</span>\n          <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> el <span class="token operator">=</span>\n      <span class="token keyword">typeof</span> positionEl <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>\n        <span class="token operator">?</span> isIdSelector\n          <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>positionEl<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>positionEl<span class="token punctuation">)</span>\n        <span class="token operator">:</span> positionEl<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Couldn&#39;t find element using selector &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>position<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; returned by scrollBehavior.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    scrollToOptions <span class="token operator">=</span> <span class="token function">getElementPosition</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    scrollToOptions <span class="token operator">=</span> position<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;scrollBehavior&#39;</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">)</span>\n    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>scrollToOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>\n      scrollToOptions<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> scrollToOptions<span class="token punctuation">.</span>left <span class="token operator">:</span> window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">,</span>\n      scrollToOptions<span class="token punctuation">.</span>top <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> scrollToOptions<span class="token punctuation">.</span>top <span class="token operator">:</span> window<span class="token punctuation">.</span>pageYOffset\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">getScrollKey</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> delta</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> position <span class="token operator">=</span> history<span class="token punctuation">.</span>state <span class="token operator">?</span> history<span class="token punctuation">.</span>state<span class="token punctuation">.</span>position <span class="token operator">-</span> delta <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> position <span class="token operator">+</span> path<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> scrollPositions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">saveScrollPosition</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> scrollPosition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  scrollPositions<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> scrollPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">getSavedScrollPosition</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> scroll <span class="token operator">=</span> scrollPositions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// consume it so it&#39;s not used again</span>\n  scrollPositions<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> scroll<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// TODO: RFC about how to save scroll position</span>\n<span class="token doc-comment comment">/**\n * ScrollBehavior instance used by the router to compute and restore the scroll\n * position when navigating.\n */</span>\n<span class="token comment">// export interface ScrollHandler&lt;ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry&gt; {</span>\n<span class="token comment">//   // returns a scroll position that can be saved in history</span>\n<span class="token comment">//   compute(): ScrollPositionEntry</span>\n<span class="token comment">//   // can take an extended ScrollPositionEntry</span>\n<span class="token comment">//   scroll(position: ScrollPosition): void</span>\n<span class="token comment">// }</span>\n<span class="token comment">// export const scrollHandler: ScrollHandler&lt;ScrollPosition&gt; = {</span>\n<span class="token comment">//   compute: computeScroll,</span>\n<span class="token comment">//   scroll: scrollToPosition,</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">createBaseLocation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> location<span class="token punctuation">.</span>protocol <span class="token operator">+</span> <span class="token string">&#39;//&#39;</span> <span class="token operator">+</span> location<span class="token punctuation">.</span>host<span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Creates a normalized history location from a window.location object\n * <span class="token keyword">@param</span> <span class="token parameter">location</span> -\n */</span>\n<span class="token keyword">function</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> search<span class="token punctuation">,</span> hash <span class="token punctuation">}</span> <span class="token operator">=</span> location<span class="token punctuation">;</span>\n  <span class="token comment">// allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end</span>\n  <span class="token keyword">const</span> hashPos <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> slicePos <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashPos<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashPos<span class="token punctuation">)</span><span class="token punctuation">.</span>length\n      <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> pathFromHash <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>slicePos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// prepend the starting slash to hash so the url starts with /#</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathFromHash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> pathFromHash <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> pathFromHash<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathFromHash<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> path <span class="token operator">+</span> search <span class="token operator">+</span> hash<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> historyState<span class="token punctuation">,</span> currentLocation<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// TODO: should it be a stack? a Dict. Check if the popstate listener</span>\n  <span class="token comment">// can trigger twice</span>\n  <span class="token keyword">let</span> pauseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">popStateHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> state <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> to <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> from <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> fromState <span class="token operator">=</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>\n      historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">;</span>\n      <span class="token comment">// ignore the popstate and reset the pauseState</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>pauseState <span class="token operator">&amp;&amp;</span> pauseState <span class="token operator">===</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        pauseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      delta <span class="token operator">=</span> fromState <span class="token operator">?</span> state<span class="token punctuation">.</span>position <span class="token operator">-</span> fromState<span class="token punctuation">.</span>position <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// console.log({ deltaFromCurrent })</span>\n    <span class="token comment">// Here we could also revert the navigation by calling history.go(-delta)</span>\n    <span class="token comment">// this listener will have to be adapted to not trigger again and to wait for the url</span>\n    <span class="token comment">// to be updated before triggering the listeners. Some kind of validation function would also</span>\n    <span class="token comment">// need to be passed to the listeners so the navigation can be accepted</span>\n    <span class="token comment">// call all listeners</span>\n    listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">listener</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        delta<span class="token punctuation">,</span>\n        type<span class="token operator">:</span> NavigationType<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>\n        direction<span class="token operator">:</span> delta\n          <span class="token operator">?</span> delta <span class="token operator">&gt;</span> <span class="token number">0</span>\n            <span class="token operator">?</span> NavigationDirection<span class="token punctuation">.</span>forward\n            <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>back\n          <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>unknown<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    pauseState <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// setup the listener and prepare teardown callbacks</span>\n    listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">teardown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    teardowns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>teardown<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> teardown<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">beforeUnloadListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>\n      <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> teardown <span class="token keyword">of</span> teardowns<span class="token punctuation">)</span> <span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// setup the listeners and prepare teardown callbacks</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    pauseListeners<span class="token punctuation">,</span>\n    listen<span class="token punctuation">,</span>\n    destroy<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Creates a state object\n */</span>\n<span class="token keyword">function</span> <span class="token function">buildState</span><span class="token punctuation">(</span>\n  <span class="token parameter">back<span class="token punctuation">,</span>\n  current<span class="token punctuation">,</span>\n  forward<span class="token punctuation">,</span>\n  replaced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  computeScroll <span class="token operator">=</span> <span class="token boolean">false</span></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    back<span class="token punctuation">,</span>\n    current<span class="token punctuation">,</span>\n    forward<span class="token punctuation">,</span>\n    replaced<span class="token punctuation">,</span>\n    position<span class="token operator">:</span> window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n    scroll<span class="token operator">:</span> computeScroll <span class="token operator">?</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> location <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>\n  <span class="token comment">// private variables</span>\n  <span class="token keyword">const</span> currentLocation <span class="token operator">=</span> <span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> historyState <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> history<span class="token punctuation">.</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// build current history entry as this is a fresh navigation</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>historyState<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">changeLocation</span><span class="token punctuation">(</span>\n      currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        back<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        current<span class="token operator">:</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n        forward<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n        <span class="token comment">// the length is off by one, we need to decrease it</span>\n        position<span class="token operator">:</span> history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        replaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token comment">// don&#39;t add a scroll as the user may have an anchor and we want</span>\n        <span class="token comment">// scrollBehavior to be triggered without a saved position</span>\n        scroll<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token boolean">true</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * if a base tag is provided and we are on a normal domain, we have to\n     * respect the provided `base` attribute because pushState() will use it and\n     * potentially erase anything before the `#` like at\n     * https://github.com/vuejs/vue-router-next/issues/685 where a base of\n     * `/folder/#` but a base of `/` would erase the `/folder/` section. If\n     * there is no host, the `&lt;base&gt;` tag makes no sense and if there isn&#39;t a\n     * base tag we can just use everything after the `#`.\n     */</span>\n    <span class="token keyword">const</span> hashIndex <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> url <span class="token operator">=</span>\n      hashIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>\n        <span class="token operator">?</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>host <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span>\n            <span class="token operator">?</span> base\n            <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> to\n        <span class="token operator">:</span> <span class="token function">createBaseLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> base <span class="token operator">+</span> to<span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token comment">// BROWSER QUIRK</span>\n      <span class="token comment">// NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds</span>\n      history<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replaceState&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;pushState&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Error with push/replace State&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// Force the navigation, this also resets the call count</span>\n      location<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replace&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      history<span class="token punctuation">.</span>state<span class="token punctuation">,</span>\n      <span class="token function">buildState</span><span class="token punctuation">(</span>\n        historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>back<span class="token punctuation">,</span>\n        <span class="token comment">// keep back and forward entries but override current position</span>\n        to<span class="token punctuation">,</span>\n        historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>\n        <span class="token boolean">true</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      data<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> position<span class="token operator">:</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>position <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Add to current entry the information of where we are going</span>\n    <span class="token comment">// as well as saving the current position</span>\n    <span class="token keyword">const</span> currentState <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// use current history state to gracefully handle a wrong call to</span>\n      <span class="token comment">// history.replaceState</span>\n      <span class="token comment">// https://github.com/vuejs/vue-router-next/issues/366</span>\n      historyState<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n      history<span class="token punctuation">.</span>state<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        forward<span class="token operator">:</span> to<span class="token punctuation">,</span>\n        scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">history.replaceState(history.state, &#39;&#39;, url)\\n\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">changeLocation</span><span class="token punctuation">(</span>currentState<span class="token punctuation">.</span>current<span class="token punctuation">,</span> currentState<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function">buildState</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> to<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> position<span class="token operator">:</span> currentState<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      data\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    location<span class="token operator">:</span> currentLocation<span class="token punctuation">,</span>\n    state<span class="token operator">:</span> historyState<span class="token punctuation">,</span>\n    push<span class="token punctuation">,</span>\n    replace<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Creates an HTML5 history. Most common history for single page applications.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">base</span> -\n */</span>\n<span class="token keyword">function</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> historyNavigation <span class="token operator">=</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> historyListeners <span class="token operator">=</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span>\n    base<span class="token punctuation">,</span>\n    historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">,</span>\n    historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">,</span>\n    historyNavigation<span class="token punctuation">.</span>replace\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">delta<span class="token punctuation">,</span> triggerListeners <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>triggerListeners<span class="token punctuation">)</span> historyListeners<span class="token punctuation">.</span><span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> routerHistory <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// it&#39;s overridden right after</span>\n      location<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n      base<span class="token punctuation">,</span>\n      go<span class="token punctuation">,</span>\n      createHref<span class="token operator">:</span> <span class="token function">createHref</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    historyNavigation<span class="token punctuation">,</span>\n    historyListeners\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> routerHistory<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\n * It&#39;s up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">base</span> - Base applied to all urls, defaults to &#39;/&#39;\n * <span class="token keyword">@returns</span> a history object that can be passed to the router constructor\n */</span>\n<span class="token keyword">function</span> <span class="token function">createMemoryHistory</span><span class="token punctuation">(</span>base <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">START</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    position<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// we are at the end, we can simply append a new entry</span>\n      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// we are in the middle, we remove everything from here in the queue</span>\n      queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">triggerListeners</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span> direction<span class="token punctuation">,</span> delta <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n      direction<span class="token punctuation">,</span>\n      delta<span class="token punctuation">,</span>\n      type<span class="token operator">:</span> NavigationType<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> callback <span class="token keyword">of</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> routerHistory <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// rewritten by Object.defineProperty</span>\n    location<span class="token operator">:</span> <span class="token constant">START</span><span class="token punctuation">,</span>\n    <span class="token comment">// TODO: should be kept in queue</span>\n    state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    base<span class="token punctuation">,</span>\n    createHref<span class="token operator">:</span> <span class="token function">createHref</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// remove current entry and decrement position</span>\n      queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>position<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">setLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">START</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">delta<span class="token punctuation">,</span> shouldTrigger <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> from <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>location<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> direction <span class="token operator">=</span>\n        <span class="token comment">// we are considering delta === 0 going forward, but in abstract mode</span>\n        <span class="token comment">// using 0 for the delta doesn&#39;t make sense like it does in html5 where</span>\n        <span class="token comment">// it reloads the page</span>\n        delta <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> NavigationDirection<span class="token punctuation">.</span>back <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>forward<span class="token punctuation">;</span>\n      position <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>position <span class="token operator">+</span> delta<span class="token punctuation">,</span> queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">triggerListeners</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>location<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          direction<span class="token punctuation">,</span>\n          delta<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> queue<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> routerHistory<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Creates a hash history. Useful for web applications with no host (e.g.\n * `file://`) or when configuring a server to handle any URL is not possible.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">base</span> - optional base to provide. Defaults to `location.pathname +\n * location.search` If there is a `&lt;base&gt;` tag in the `head`, its value will be\n * ignored in favor of this parameter **but note it affects all the\n * history.pushState() calls**, meaning that if you use a `&lt;base&gt;` tag, it&#39;s\n * `href` value **has to match this parameter** (ignoring anything after the\n * `#`).\n *\n * <span class="token keyword">@example</span>\n <span class="token example">* <span class="token code language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js</span>\n * <span class="token code language-javascript"><span class="token comment">// at https://example.com/folder</span></span>\n * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of `https://example.com/folder#`</span></span>\n * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/folder/&#39;</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of `https://example.com/folder/#`</span></span>\n * <span class="token code language-javascript"><span class="token comment">// if the `#` is provided in the base, it won&#39;t be added by `createWebHashHistory`</span></span>\n * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/folder/#/app/&#39;</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of `https://example.com/folder/#/app/`</span></span>\n * <span class="token code language-javascript"><span class="token comment">// you should avoid doing this because it changes the original url and breaks copying urls</span></span>\n * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/other-folder/&#39;</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of `https://example.com/other-folder/#`</span></span>\n *\n <span class="token code language-javascript"><span class="token operator">*</span> <span class="token comment">// at file:///usr/etc/folder/index.html</span></span>\n * <span class="token code language-javascript"><span class="token comment">// for locations with no `host`, the base is ignored</span></span>\n * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/iAmIgnored&#39;</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of `file:///usr/etc/folder/index.html#`</span></span>\n * <span class="token code language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`</span></span>\n */</span>\n<span class="token keyword">function</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Make sure this implementation is fine in terms of encoding, specially for IE11</span>\n  <span class="token comment">// for `file://`, directly use the pathname and ignore the base</span>\n  <span class="token comment">// location.pathname contains an initial `/` even at the root: `https://example.com`</span>\n  base <span class="token operator">=</span> location<span class="token punctuation">.</span>host <span class="token operator">?</span> base <span class="token operator">||</span> location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> location<span class="token punctuation">.</span>search <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// allow the user to provide a `#` in the middle: `/base/#/app`</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> base <span class="token operator">+=</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#/&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>base<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A hash base must end with a &quot;#&quot;:\\n&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>base<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should be &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>base<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#.*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token string">&#39;#&#39;</span>\n      <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isRouteLocation</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> route <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token punctuation">(</span>route <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> route <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isRouteName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Initial route location where the router is. Can be used in navigation guards\n * to differentiate the initial navigation.\n *\n * <span class="token keyword">@example</span>\n <span class="token example">* <span class="token code language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js</span>\n * <span class="token code language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">START_LOCATION</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span></span>\n *\n <span class="token code language-javascript"><span class="token operator">*</span> router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n *   <span class="token code language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">===</span> <span class="token constant">START_LOCATION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n *     <span class="token code language-javascript"><span class="token comment">// initial navigation</span></span>\n *   <span class="token code language-javascript"><span class="token punctuation">}</span></span>\n * <span class="token code language-javascript"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n * <span class="token code language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`</span></span>\n */</span>\n<span class="token keyword">const</span> <span class="token constant">START_LOCATION_NORMALIZED</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  query<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  hash<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  fullPath<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n  matched<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  meta<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  redirectedFrom<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> NavigationFailureSymbol <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;navigation failure&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Enumeration with all possible types for navigation failures. Can be passed to\n * <span class="token punctuation">{</span><span class="token keyword">@link</span> isNavigationFailure<span class="token punctuation">}</span> to check for specific failures.\n */</span>\n<span class="token keyword">var</span> NavigationFailureType<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">NavigationFailureType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * An aborted navigation is a navigation that failed because a navigation\n   * guard returned `false` or called `next(false)`\n   */</span>\n  NavigationFailureType<span class="token punctuation">[</span><span class="token punctuation">(</span>NavigationFailureType<span class="token punctuation">[</span><span class="token string">&#39;aborted&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;aborted&#39;</span><span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * A cancelled navigation is a navigation that failed because a more recent\n   * navigation finished started (not necessarily finished).\n   */</span>\n  NavigationFailureType<span class="token punctuation">[</span><span class="token punctuation">(</span>NavigationFailureType<span class="token punctuation">[</span><span class="token string">&#39;cancelled&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;cancelled&#39;</span><span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * A duplicated navigation is a navigation that failed because it was\n   * initiated while already being at the exact same location.\n   */</span>\n  NavigationFailureType<span class="token punctuation">[</span><span class="token punctuation">(</span>NavigationFailureType<span class="token punctuation">[</span><span class="token string">&#39;duplicated&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span>\n    <span class="token string">&#39;duplicated&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NavigationFailureType <span class="token operator">||</span> <span class="token punctuation">(</span>NavigationFailureType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// DEV only debug messages</span>\n<span class="token keyword">const</span> ErrorTypeMessages <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> location<span class="token punctuation">,</span> currentLocation <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">No match for\\n </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      currentLocation\n        <span class="token operator">?</span> <span class="token string">&#39;\\nwhile being at\\n&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">)</span>\n        <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">2</span> <span class="token comment">/* NAVIGATION_GUARD_REDIRECT */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Redirected from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">stringifyRoute</span><span class="token punctuation">(</span>\n      to\n    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; via a navigation guard.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Navigation aborted from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; via a navigation guard.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Navigation cancelled from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; with a new navigation.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Avoided redundant navigation to current location: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// keep full error messages in cjs versions</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n      <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ErrorTypeMessages<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        type<span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>NavigationFailureSymbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      params\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">&amp;&amp;</span>\n    NavigationFailureSymbol <span class="token keyword">in</span> error <span class="token operator">&amp;&amp;</span>\n    <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>type <span class="token operator">&amp;</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> propertiesToLog <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;params&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;query&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hash&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">stringifyRoute</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> to<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> to<span class="token punctuation">)</span> <span class="token keyword">return</span> to<span class="token punctuation">.</span>path<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> propertiesToLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> to<span class="token punctuation">)</span> location<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> to<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// default pattern for a param: non greedy everything but /</span>\n<span class="token keyword">const</span> <span class="token constant">BASE_PARAM_PATTERN</span> <span class="token operator">=</span> <span class="token string">&#39;[^/]+?&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">BASE_PATH_PARSER_OPTIONS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  sensitive<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  strict<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  start<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  end<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// Special Regex characters that must be escaped in static tokens</span>\n<span class="token keyword">const</span> <span class="token constant">REGEX_CHARS_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.+*?^${}()[\\]/\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\n *\n * <span class="token keyword">@param</span> <span class="token parameter">segments</span> - array of segments returned by tokenizePath\n * <span class="token keyword">@param</span> <span class="token parameter">extraOptions</span> - optional options for the regexp\n * <span class="token keyword">@returns</span> a PathParser\n */</span>\n<span class="token keyword">function</span> <span class="token function">tokensToParser</span><span class="token punctuation">(</span><span class="token parameter">segments<span class="token punctuation">,</span> extraOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">BASE_PATH_PARSER_OPTIONS</span><span class="token punctuation">,</span> extraOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// the amount of scores is the same as the length of segments except for the root segment &quot;/&quot;</span>\n  <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// the regexp as a string</span>\n  <span class="token keyword">let</span> pattern <span class="token operator">=</span> options<span class="token punctuation">.</span>start <span class="token operator">?</span> <span class="token string">&#39;^&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// extracted keys</span>\n  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> segment <span class="token keyword">of</span> segments<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// the root segment needs special treatment</span>\n    <span class="token keyword">const</span> segmentScores <span class="token operator">=</span> segment<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">90</span> <span class="token comment">/* Root */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// allow trailing slash</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>segment<span class="token punctuation">.</span>length<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> tokenIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> tokenIndex <span class="token operator">&lt;</span> segment<span class="token punctuation">.</span>length<span class="token punctuation">;</span> tokenIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> token <span class="token operator">=</span> segment<span class="token punctuation">[</span>tokenIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token comment">// resets the score if we are inside a sub segment /:a-other-:b</span>\n      <span class="token keyword">let</span> subSegmentScore <span class="token operator">=</span>\n        <span class="token number">40</span> <span class="token comment">/* Segment */</span> <span class="token operator">+</span>\n        <span class="token punctuation">(</span>options<span class="token punctuation">.</span>sensitive <span class="token operator">?</span> <span class="token number">0.25</span> <span class="token comment">/* BonusCaseSensitive */</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// prepend the slash if we are starting a new segment</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenIndex<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>\n        pattern <span class="token operator">+=</span> token<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">REGEX_CHARS_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        subSegmentScore <span class="token operator">+=</span> <span class="token number">40</span> <span class="token comment">/* Static */</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> repeatable<span class="token punctuation">,</span> optional<span class="token punctuation">,</span> regexp <span class="token punctuation">}</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>\n        keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          name<span class="token operator">:</span> value<span class="token punctuation">,</span>\n          repeatable<span class="token punctuation">,</span>\n          optional<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> re <span class="token operator">=</span> regexp <span class="token operator">?</span> regexp <span class="token operator">:</span> <span class="token constant">BASE_PARAM_PATTERN</span><span class="token punctuation">;</span>\n        <span class="token comment">// the user provided a custom regexp /:id(\\\\d+)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">!==</span> <span class="token constant">BASE_PARAM_PATTERN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          subSegmentScore <span class="token operator">+=</span> <span class="token number">10</span> <span class="token comment">/* BonusCustomRegExp */</span><span class="token punctuation">;</span>\n          <span class="token comment">// make sure the regexp is valid before using it</span>\n          <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Invalid custom RegExp for param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">): </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n                err<span class="token punctuation">.</span>message\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// when we repeat we must take care of the repeating leading slash</span>\n        <span class="token keyword">let</span> subPattern <span class="token operator">=</span> repeatable <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)(?:/(?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">))*)</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token comment">// prepend the slash if we are starting a new segment</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenIndex<span class="token punctuation">)</span>\n          subPattern <span class="token operator">=</span>\n            <span class="token comment">// avoid an optional / if there are more segments e.g. /:p?-static</span>\n            <span class="token comment">// or /:p?-:p2</span>\n            optional <span class="token operator">&amp;&amp;</span> segment<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span>\n              <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(?:/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>subPattern<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n              <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> subPattern<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> subPattern <span class="token operator">+=</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">;</span>\n        pattern <span class="token operator">+=</span> subPattern<span class="token punctuation">;</span>\n        subSegmentScore <span class="token operator">+=</span> <span class="token number">20</span> <span class="token comment">/* Dynamic */</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">8</span> <span class="token comment">/* BonusOptional */</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>repeatable<span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token comment">/* BonusRepeatable */</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">===</span> <span class="token string">&#39;.*&#39;</span><span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">50</span> <span class="token comment">/* BonusWildcard */</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      segmentScores<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subSegmentScore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// an empty array like /home/ -&gt; [[{home}], []]</span>\n    <span class="token comment">// if (!segment.length) pattern += &#39;/&#39;</span>\n    score<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>segmentScores<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// only apply the strict bonus to the last score</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> i <span class="token operator">=</span> score<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">0.7000000000000001</span> <span class="token comment">/* BonusStrict */</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// TODO: dev only warn double trailing slash</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/?&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;(?:/|$)&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> options<span class="token punctuation">.</span>sensitive <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> match <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> match<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> value <span class="token operator">=</span> match<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      params<span class="token punctuation">[</span>key<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>repeatable <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> params<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">stringify</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n    <span class="token comment">// for optional parameters to allow to be empty</span>\n    <span class="token keyword">let</span> avoidDuplicatedSlash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> segment <span class="token keyword">of</span> segments<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>avoidDuplicatedSlash <span class="token operator">||</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> path <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>\n      avoidDuplicatedSlash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> token <span class="token keyword">of</span> segment<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          path <span class="token operator">+=</span> token<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> repeatable<span class="token punctuation">,</span> optional <span class="token punctuation">}</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>\n          <span class="token keyword">const</span> param <span class="token operator">=</span> value <span class="token keyword">in</span> params <span class="token operator">?</span> params<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>repeatable<span class="token punctuation">)</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Provided param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is an array but it is not repeatable (* or + modifiers)</span><span class="token template-punctuation string">`</span></span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> text <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">?</span> param<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> param<span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// if we have more than one optional param like /:a?-static we</span>\n              <span class="token comment">// don&#39;t need to care about the optional param</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// remove the last slash as we could be at the end</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">// do not append a slash on the next iteration</span>\n                <span class="token keyword">else</span> avoidDuplicatedSlash <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Missing required param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          path <span class="token operator">+=</span> text<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> path<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    re<span class="token punctuation">,</span>\n    score<span class="token punctuation">,</span>\n    keys<span class="token punctuation">,</span>\n    parse<span class="token punctuation">,</span>\n    stringify<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Compares an array of numbers as used in PathParser.score and returns a\n * number. This function can be used to `sort` an array\n *\n * <span class="token keyword">@param</span> <span class="token parameter">a</span> - first array of numbers\n * <span class="token keyword">@param</span> <span class="token parameter">b</span> - second array of numbers\n * <span class="token keyword">@returns</span> 0 if both are equal, &lt; 0 if a should be sorted first, &gt; 0 if b\n * should be sorted first\n */</span>\n<span class="token keyword">function</span> <span class="token function">compareScoreArray</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> diff <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// only keep going if diff === 0</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token keyword">return</span> diff<span class="token punctuation">;</span>\n    i<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// if the last subsegment was Static, the shorter segments should be sorted first</span>\n  <span class="token comment">// otherwise sort the longest segment first</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">40</span> <span class="token comment">/* Static */</span> <span class="token operator">+</span> <span class="token number">40</span> <span class="token comment">/* Segment */</span>\n      <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span>\n      <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> b<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">40</span> <span class="token comment">/* Static */</span> <span class="token operator">+</span> <span class="token number">40</span> <span class="token comment">/* Segment */</span>\n      <span class="token operator">?</span> <span class="token number">1</span>\n      <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Compare function that can be used with `sort` to sort an array of PathParser\n *\n * <span class="token keyword">@param</span> <span class="token parameter">a</span> - first PathParser\n * <span class="token keyword">@param</span> <span class="token parameter">b</span> - second PathParser\n * <span class="token keyword">@returns</span> 0 if both are equal, &lt; 0 if a should be sorted first, &gt; 0 if b\n */</span>\n<span class="token keyword">function</span> <span class="token function">comparePathParserScore</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> aScore <span class="token operator">=</span> a<span class="token punctuation">.</span>score<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> bScore <span class="token operator">=</span> b<span class="token punctuation">.</span>score<span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> aScore<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> bScore<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> comp <span class="token operator">=</span> <span class="token function">compareScoreArray</span><span class="token punctuation">(</span>aScore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> bScore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// do not return if both are equal</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>comp<span class="token punctuation">)</span> <span class="token keyword">return</span> comp<span class="token punctuation">;</span>\n    i<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// if a and b share the same score entries but b has more, sort b first</span>\n  <span class="token keyword">return</span> bScore<span class="token punctuation">.</span>length <span class="token operator">-</span> aScore<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token comment">// this is the ternary version</span>\n  <span class="token comment">// return aScore.length &lt; bScore.length</span>\n  <span class="token comment">//   ? 1</span>\n  <span class="token comment">//   : aScore.length &gt; bScore.length</span>\n  <span class="token comment">//   ? -1</span>\n  <span class="token comment">//   : 0</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token constant">ROOT_TOKEN</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">VALID_PARAM_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z0-9_]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token comment">// After some profiling, the cache seems to be unnecessary because tokenizePath</span>\n<span class="token comment">// (the slowest part of adding a route) is very fast</span>\n<span class="token comment">// const tokenCache = new Map&lt;string, Token[][]&gt;()</span>\n<span class="token keyword">function</span> <span class="token function">tokenizePath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">ROOT_TOKEN</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Route paths should start with a &quot;/&quot;: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should be &quot;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// if (tokenCache.has(path)) return tokenCache.get(path)!</span>\n  <span class="token keyword">function</span> <span class="token function">crash</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ERR (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)/&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* Static */</span>\n  <span class="token keyword">let</span> previousState <span class="token operator">=</span> state<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// the segment will always be valid because we get into the initial state</span>\n  <span class="token comment">// with the leading /</span>\n  <span class="token keyword">let</span> segment<span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    segment <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// index on the path</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token comment">// char at index</span>\n  <span class="token keyword">let</span> char<span class="token punctuation">;</span>\n  <span class="token comment">// buffer of the value read</span>\n  <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// custom regexp for a param</span>\n  <span class="token keyword">let</span> customRe <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      segment<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        type<span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">,</span>\n        value<span class="token operator">:</span> buffer<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      state <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment">/* Param */</span> <span class="token operator">||</span>\n      state <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span> <span class="token operator">||</span>\n      state <span class="token operator">===</span> <span class="token number">3</span> <span class="token comment">/* ParamRegExpEnd */</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token function">crash</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A repeatable param (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) must be alone in its segment. eg: &#39;/:ids+.</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      segment<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        type<span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token punctuation">,</span>\n        value<span class="token operator">:</span> buffer<span class="token punctuation">,</span>\n        regexp<span class="token operator">:</span> customRe<span class="token punctuation">,</span>\n        repeatable<span class="token operator">:</span> char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span>\n        optional<span class="token operator">:</span> char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">crash</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid state to consume buffer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    buffer <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    buffer <span class="token operator">+=</span> char<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    char <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;\\\\&#39;</span> <span class="token operator">&amp;&amp;</span> state <span class="token operator">!==</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      previousState <span class="token operator">=</span> state<span class="token punctuation">;</span>\n      state <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">/* EscapeNext */</span><span class="token punctuation">;</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token operator">:</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          state <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token number">4</span> <span class="token comment">/* EscapeNext */</span><span class="token operator">:</span>\n        <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        state <span class="token operator">=</span> previousState<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token operator">:</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          state <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">VALID_PARAM_RE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          state <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">;</span>\n          <span class="token comment">// go back one character if we were not modifying</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">!==</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span><span class="token operator">:</span>\n        <span class="token comment">// TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)</span>\n        <span class="token comment">// it already works by escaping the closing )</span>\n        <span class="token comment">// https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#</span>\n        <span class="token comment">// is this really something people need since you can also write</span>\n        <span class="token comment">// /prefix_:p()_suffix</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// handle the escaped )</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>customRe<span class="token punctuation">[</span>customRe<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">)</span>\n            customRe <span class="token operator">=</span> customRe<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> char<span class="token punctuation">;</span>\n          <span class="token keyword">else</span> state <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">/* ParamRegExpEnd */</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          customRe <span class="token operator">+=</span> char<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token number">3</span> <span class="token comment">/* ParamRegExpEnd */</span><span class="token operator">:</span>\n        <span class="token comment">// same as finalizing a param</span>\n        <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        state <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">;</span>\n        <span class="token comment">// go back one character if we were not modifying</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">!==</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>\n        customRe <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token function">crash</span><span class="token punctuation">(</span><span class="token string">&#39;Unknown state&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span><span class="token punctuation">)</span>\n    <span class="token function">crash</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Unfinished custom RegExp for param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// tokenCache.set(path, tokens)</span>\n  <span class="token keyword">return</span> tokens<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">tokensToParser</span><span class="token punctuation">(</span><span class="token function">tokenizePath</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// warn against params with the same name</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> existingKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> parser<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>existingKeys<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Found duplicated params with name &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; for path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Only the last one will be available on &quot;$route.params&quot;.</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      existingKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> matcher <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    record<span class="token punctuation">,</span>\n    parent<span class="token punctuation">,</span>\n    <span class="token comment">// these needs to be populated by the parent</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// both are aliases or both are not aliases</span>\n    <span class="token comment">// we don&#39;t want to mix them because the order is used when</span>\n    <span class="token comment">// passing originalRecord in Matcher.addRoute</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf <span class="token operator">===</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf<span class="token punctuation">)</span>\n      parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> matcher<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Creates a Router Matcher.\n *\n * <span class="token keyword">@internal</span>\n * <span class="token keyword">@param</span> <span class="token parameter">routes</span> - array of initial routes\n * <span class="token keyword">@param</span> <span class="token parameter">globalOptions</span> - global route options\n */</span>\n<span class="token keyword">function</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> globalOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// normalized ordered array of matchers</span>\n  <span class="token keyword">const</span> matchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> matcherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  globalOptions <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> strict<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sensitive<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    globalOptions\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">getRecordMatcher</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> originalRecord</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// used later on to remove by name</span>\n    <span class="token keyword">const</span> isRootAdd <span class="token operator">=</span> <span class="token operator">!</span>originalRecord<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> mainNormalizedRecord <span class="token operator">=</span> <span class="token function">normalizeRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// we might be the child of an alias</span>\n    mainNormalizedRecord<span class="token punctuation">.</span>aliasOf <span class="token operator">=</span> originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>record<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>globalOptions<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// generate an array of records to correctly handle aliases</span>\n    <span class="token keyword">const</span> normalizedRecords <span class="token operator">=</span> <span class="token punctuation">[</span>mainNormalizedRecord<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;alias&#39;</span> <span class="token keyword">in</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> aliases <span class="token operator">=</span>\n        <span class="token keyword">typeof</span> record<span class="token punctuation">.</span>alias <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> <span class="token punctuation">[</span>record<span class="token punctuation">.</span>alias<span class="token punctuation">]</span> <span class="token operator">:</span> record<span class="token punctuation">.</span>alias<span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> alias <span class="token keyword">of</span> aliases<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        normalizedRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n          <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mainNormalizedRecord<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token comment">// this allows us to hold a copy of the `components` option</span>\n            <span class="token comment">// so that async components cache is hold on the original record</span>\n            components<span class="token operator">:</span> originalRecord\n              <span class="token operator">?</span> originalRecord<span class="token punctuation">.</span>record<span class="token punctuation">.</span>components\n              <span class="token operator">:</span> mainNormalizedRecord<span class="token punctuation">.</span>components<span class="token punctuation">,</span>\n            path<span class="token operator">:</span> alias<span class="token punctuation">,</span>\n            <span class="token comment">// we might be the child of an alias</span>\n            aliasOf<span class="token operator">:</span> originalRecord\n              <span class="token operator">?</span> originalRecord<span class="token punctuation">.</span>record\n              <span class="token operator">:</span> mainNormalizedRecord<span class="token punctuation">,</span>\n            <span class="token comment">// the aliases are always of the same kind as the original since they</span>\n            <span class="token comment">// are defined on the same record</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> matcher<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> originalMatcher<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> normalizedRecord <span class="token keyword">of</span> normalizedRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> normalizedRecord<span class="token punctuation">;</span>\n      <span class="token comment">// Build up the path for nested routes if the child isn&#39;t an absolute</span>\n      <span class="token comment">// route. Only add the / delimiter if the child path isn&#39;t empty and if the</span>\n      <span class="token comment">// parent path doesn&#39;t have a trailing slash</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> parentPath <span class="token operator">=</span> parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> connectingSlash <span class="token operator">=</span>\n          parentPath<span class="token punctuation">[</span>parentPath<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>\n        normalizedRecord<span class="token punctuation">.</span>path <span class="token operator">=</span>\n          parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> connectingSlash <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>normalizedRecord<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n          <span class="token string">&#39;Catch all routes (&quot;*&quot;) must now be defined using a param with a custom regexp.\\n&#39;</span> <span class="token operator">+</span>\n            <span class="token string">&#39;See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.&#39;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// create the object before hand so it can be passed to children</span>\n      matcher <span class="token operator">=</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span>normalizedRecord<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n        <span class="token function">checkMissingParamsInAbsolutePath</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// if we are an alias we must tell the original record that we exist</span>\n      <span class="token comment">// so we can be removed</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>originalRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        originalRecord<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">{</span>\n          <span class="token function">checkSameParams</span><span class="token punctuation">(</span>originalRecord<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// otherwise, the first record is the original and others are aliases</span>\n        originalMatcher <span class="token operator">=</span> originalMatcher <span class="token operator">||</span> matcher<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>originalMatcher <span class="token operator">!==</span> matcher<span class="token punctuation">)</span> originalMatcher<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// remove the route if named and only for the top record (avoid in nested calls)</span>\n        <span class="token comment">// this works because the original record is the first one</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRootAdd <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token function">removeRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;children&#39;</span> <span class="token keyword">in</span> mainNormalizedRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> children <span class="token operator">=</span> mainNormalizedRecord<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">addRoute</span><span class="token punctuation">(</span>\n            children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>\n            matcher<span class="token punctuation">,</span>\n            originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// if there was no original record, then the first one was not an alias and all</span>\n      <span class="token comment">// other alias (if any) need to reference this record when adding children</span>\n      originalRecord <span class="token operator">=</span> originalRecord <span class="token operator">||</span> matcher<span class="token punctuation">;</span>\n      <span class="token comment">// TODO: add normalized records for more flexibility</span>\n      <span class="token comment">// if (parent &amp;&amp; isAliasRecord(originalRecord)) {</span>\n      <span class="token comment">//   parent.children.push(originalRecord)</span>\n      <span class="token comment">// }</span>\n      <span class="token function">insertMatcher</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> originalMatcher\n      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// since other matchers are aliases, they should be removed by the original matcher</span>\n          <span class="token function">removeRoute</span><span class="token punctuation">(</span>originalMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token operator">:</span> noop<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token parameter">matcherRef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRouteName</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> matcher <span class="token operator">=</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        matcherMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>matchers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        matcher<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        matcher<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> matchers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcherRef<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span> matcherMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        matcherRef<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        matcherRef<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> matchers<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">insertMatcher</span><span class="token punctuation">(</span><span class="token parameter">matcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token comment">// console.log(&#39;i is&#39;, { i })</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>\n      i <span class="token operator">&lt;</span> matchers<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>\n      <span class="token function">comparePathParserScore</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> matchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span>\n    <span class="token punctuation">)</span>\n      i<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token comment">// console.log(&#39;END i is&#39;, { i })</span>\n    <span class="token comment">// while (i &lt; matchers.length &amp;&amp; matcher.score &lt;= matchers[i].score) i++</span>\n    matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// only add the original record to the name map</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      matcherMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> currentLocation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> matcher<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> path<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> location <span class="token operator">&amp;&amp;</span> location<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      matcher <span class="token operator">=</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          location<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n      params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n        <span class="token comment">// paramsFromLocation is a new object</span>\n        <span class="token function">paramsFromLocation</span><span class="token punctuation">(</span>\n          currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span>\n          <span class="token comment">// only keep params that exist in the resolved location</span>\n          <span class="token comment">// TODO: only keep optional params coming from a parent record</span>\n          matcher<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>k<span class="token punctuation">.</span>optional<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> k<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        location<span class="token punctuation">.</span>params\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// throws if cannot be stringified</span>\n      path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// no need to resolve the path with the matcher as it was provided</span>\n      <span class="token comment">// this also allows the user to control the encoding</span>\n      path <span class="token operator">=</span> location<span class="token punctuation">.</span>path<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The Matcher cannot resolve relative paths but received &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Unless you directly called \\`matcher.resolve(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      matcher <span class="token operator">=</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// matcher should have a value after the loop</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// TODO: dev warning of unused params if provided</span>\n        <span class="token comment">// we know the matcher works because we tested the regexp</span>\n        params <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// location is a relative path</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// match by name or path of current route</span>\n      matcher <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>name\n        <span class="token operator">?</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n        <span class="token operator">:</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          location<span class="token punctuation">,</span>\n          currentLocation<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n      <span class="token comment">// since we are navigating to the same location, we don&#39;t need to pick the</span>\n      <span class="token comment">// params like when `name` is provided</span>\n      params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> matched <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> parentMatcher <span class="token operator">=</span> matcher<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>parentMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// reversed order so parents are at the beginning</span>\n      matched<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>parentMatcher<span class="token punctuation">.</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      parentMatcher <span class="token operator">=</span> parentMatcher<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">,</span>\n      path<span class="token punctuation">,</span>\n      params<span class="token punctuation">,</span>\n      matched<span class="token punctuation">,</span>\n      meta<span class="token operator">:</span> <span class="token function">mergeMetaFields</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// add initial routes</span>\n  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> addRoute<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> removeRoute<span class="token punctuation">,</span> getRoutes<span class="token punctuation">,</span> getRecordMatcher <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">paramsFromLocation</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> params<span class="token punctuation">)</span> newParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newParams<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Normalizes a RouteRecordRaw. Creates a copy\n *\n * <span class="token keyword">@param</span> <span class="token parameter">record</span>\n * <span class="token keyword">@returns</span> the normalized version\n */</span>\n<span class="token keyword">function</span> <span class="token function">normalizeRouteRecord</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> record<span class="token punctuation">.</span>path<span class="token punctuation">,</span>\n    redirect<span class="token operator">:</span> record<span class="token punctuation">.</span>redirect<span class="token punctuation">,</span>\n    name<span class="token operator">:</span> record<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n    meta<span class="token operator">:</span> record<span class="token punctuation">.</span>meta <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    aliasOf<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    beforeEnter<span class="token operator">:</span> record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span>\n    props<span class="token operator">:</span> <span class="token function">normalizeRecordProps</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span> record<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    instances<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    leaveGuards<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    updateGuards<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    enterCallbacks<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    components<span class="token operator">:</span>\n      <span class="token string">&#39;components&#39;</span> <span class="token keyword">in</span> record\n        <span class="token operator">?</span> record<span class="token punctuation">.</span>components <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> record<span class="token punctuation">.</span>component <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Normalize the optional `props` in a record to always be an object similar to\n * components. Also accept a boolean for components.\n * <span class="token keyword">@param</span> <span class="token parameter">record</span>\n */</span>\n<span class="token keyword">function</span> <span class="token function">normalizeRecordProps</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> propsObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// props does not exist on redirect records but we can set false directly</span>\n  <span class="token keyword">const</span> props <span class="token operator">=</span> record<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;component&#39;</span> <span class="token keyword">in</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    propsObject<span class="token punctuation">.</span>default <span class="token operator">=</span> props<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// NOTE: we could also allow a function to be applied to every component.</span>\n    <span class="token comment">// Would need user feedback for use cases</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> record<span class="token punctuation">.</span>components<span class="token punctuation">)</span>\n      propsObject<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> props <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span> <span class="token operator">?</span> props <span class="token operator">:</span> props<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> propsObject<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Checks if a record or any of its parent is an alias\n * <span class="token keyword">@param</span> <span class="token parameter">record</span>\n */</span>\n<span class="token keyword">function</span> <span class="token function">isAliasRecord</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    record <span class="token operator">=</span> record<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Merge meta fields of an array of records\n *\n * <span class="token keyword">@param</span> <span class="token parameter">matched</span> - array of matched records\n */</span>\n<span class="token keyword">function</span> <span class="token function">mergeMetaFields</span><span class="token punctuation">(</span><span class="token parameter">matched</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> matched<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">meta<span class="token punctuation">,</span> record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">assign</span><span class="token punctuation">(</span>meta<span class="token punctuation">,</span> record<span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span><span class="token parameter">defaults<span class="token punctuation">,</span> partialOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> defaults<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> key <span class="token keyword">in</span> partialOptions <span class="token operator">?</span> partialOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> defaults<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> options<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isSameParam</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    a<span class="token punctuation">.</span>name <span class="token operator">===</span> b<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span>\n    a<span class="token punctuation">.</span>optional <span class="token operator">===</span> b<span class="token punctuation">.</span>optional <span class="token operator">&amp;&amp;</span>\n    a<span class="token punctuation">.</span>repeatable <span class="token operator">===</span> b<span class="token punctuation">.</span>repeatable\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Check if a path and its alias have the same required params\n *\n * <span class="token keyword">@param</span> <span class="token parameter">a</span> - original record\n * <span class="token keyword">@param</span> <span class="token parameter">b</span> - alias record\n */</span>\n<span class="token keyword">function</span> <span class="token function">checkSameParams</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> a<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span>optional <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">isSameParam</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Alias &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; and the original record: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should have the exact same param named &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> b<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span>optional <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">isSameParam</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Alias &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; and the original record: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should have the exact same param named &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">checkMissingParamsInAbsolutePath</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> parent<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>record<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">isSameParam</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Absolute path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>record<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should have the exact same param named &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; as its parent &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Encoding Rules \u2423 = Space Path: \u2423 &quot; &lt; &gt; # ? <span class="token punctuation">{</span> <span class="token punctuation">}</span> Query: \u2423 &quot; &lt; &gt; # &amp; = Hash: \u2423 &quot;\n * &lt; &gt; `\n *\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\n * defines some extra characters to be encoded. Most browsers do not encode them\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\n * also encode `!&#39;()*`. Leaving unencoded only ASCII alphanumeric(`a-zA-Z0-9`)\n * plus `-._~`. This extra safety should be applied to query by patching the\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\n * encoded everywhere because some browsers like FF encode it when directly\n * written while others don&#39;t. Safari and IE don&#39;t encode ``&quot;&lt;&gt;<span class="token punctuation">{</span><span class="token punctuation">}</span>``` in hash.\n */</span>\n<span class="token comment">// const EXTRA_RESERVED_RE = /[!&#39;()*]/g</span>\n<span class="token comment">// const encodeReservedReplacer = (c: string) =&gt; &#39;%&#39; + c.charCodeAt(0).toString(16)</span>\n<span class="token keyword">const</span> <span class="token constant">HASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %23</span>\n<span class="token keyword">const</span> <span class="token constant">AMPERSAND_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %26</span>\n<span class="token keyword">const</span> <span class="token constant">SLASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %2F</span>\n<span class="token keyword">const</span> <span class="token constant">EQUAL_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %3D</span>\n<span class="token keyword">const</span> <span class="token constant">IM_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %3F</span>\n<span class="token keyword">const</span> <span class="token constant">PLUS_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %2B</span>\n<span class="token doc-comment comment">/**\n * NOTE: It&#39;s not clear to me if we should encode the + symbol in queries, it\n * seems to be less flexible than not doing so and I can&#39;t find out the legacy\n * systems requiring this for regular requests like text/html. In the standard,\n * the encoding of the plus character is only mentioned for\n * application/x-www-form-urlencoded\n * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo\n * leave the plus character as is in queries. To be more flexible, we allow the\n * plus character on the query but it can also be manually encoded by the user.\n *\n * Resources:\n * - https://url.spec.whatwg.org/#urlencoded-parsing\n * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20\n */</span>\n<span class="token keyword">const</span> <span class="token constant">ENC_BRACKET_OPEN_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%5B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// [</span>\n<span class="token keyword">const</span> <span class="token constant">ENC_BRACKET_CLOSE_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%5D</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// ]</span>\n<span class="token keyword">const</span> <span class="token constant">ENC_CARET_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%5E</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// ^</span>\n<span class="token keyword">const</span> <span class="token constant">ENC_BACKTICK_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%60</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// `</span>\n<span class="token keyword">const</span> <span class="token constant">ENC_CURLY_OPEN_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%7B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// {</span>\n<span class="token keyword">const</span> <span class="token constant">ENC_PIPE_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%7C</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// |</span>\n<span class="token keyword">const</span> <span class="token constant">ENC_CURLY_CLOSE_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%7D</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// }</span>\n<span class="token keyword">const</span> <span class="token constant">ENC_SPACE_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%20</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// }</span>\n<span class="token doc-comment comment">/**\n * Encode characters that need to be encoded on the path, search and hash\n * sections of the URL.\n *\n * <span class="token keyword">@internal</span>\n * <span class="token keyword">@param</span> <span class="token parameter">text</span> - string to encode\n * <span class="token keyword">@returns</span> encoded string\n */</span>\n<span class="token keyword">function</span> <span class="token function">commonEncode</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> text<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_PIPE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_BRACKET_OPEN_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_BRACKET_CLOSE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Encode characters that need to be encoded on the hash section of the URL.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">text</span> - string to encode\n * <span class="token keyword">@returns</span> encoded string\n */</span>\n<span class="token keyword">function</span> <span class="token function">encodeHash</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">commonEncode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CURLY_OPEN_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CURLY_CLOSE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CARET_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;^&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Encode characters that need to be encoded query values on the query\n * section of the URL.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">text</span> - string to encode\n * <span class="token keyword">@returns</span> encoded string\n */</span>\n<span class="token keyword">function</span> <span class="token function">encodeQueryValue</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token function">commonEncode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n      <span class="token comment">// Encode the space as +, encode the + to differentiate it from the space</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">PLUS_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;%2B&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_SPACE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">HASH_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;%23&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">AMPERSAND_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;%26&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_BACKTICK_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;`&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CURLY_OPEN_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CURLY_CLOSE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CARET_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;^&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Like `encodeQueryValue</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> but also encodes the </span><span class="token template-punctuation string">`</span></span><span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> character.\n *\n * @param text - string to encode\n */\nfunction encodeQueryKey(text) {\n  return encodeQueryValue(text).replace(EQUAL_RE, &#39;%3D&#39;);\n}\n/**\n * Encode characters that need to be encoded on the path section of the URL.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nfunction encodePath(text) {\n  return commonEncode(text).replace(HASH_RE, &#39;%23&#39;).replace(IM_RE, &#39;%3F&#39;);\n}\n/**\n * Encode characters that need to be encoded on the path section of the URL as a\n * param. This function encodes everything {@link encodePath} does plus the\n * slash (</span><span class="token template-punctuation string">`</span></span><span class="token operator">/</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">) character. If </span><span class="token template-punctuation string">`</span></span>text<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> is </span><span class="token template-punctuation string">`</span></span><span class="token keyword">null</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> or </span><span class="token template-punctuation string">`</span></span><span class="token keyword">undefined</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, returns an empty\n * string instead.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nfunction encodeParam(text) {\n  return text == null ? &#39;&#39; : encodePath(text).replace(SLASH_RE, &#39;%2F&#39;);\n}\n/**\n * Decode text using </span><span class="token template-punctuation string">`</span></span>decodeURIComponent<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">. Returns the original text if it\n * fails.\n *\n * @param text - string to decode\n * @returns decoded string\n */\nfunction decode(text) {\n  try {\n    return decodeURIComponent(&#39;&#39; + text);\n  } catch (err) {\n    warn(</span><span class="token template-punctuation string">`</span></span>Error decoding <span class="token string">&quot;${text}&quot;</span><span class="token punctuation">.</span> Using original value<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">);\n  }\n  return &#39;&#39; + text;\n}\n\n/**\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\n * version with the leading </span><span class="token template-punctuation string">`</span></span><span class="token operator">?</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> and without Should work as URLSearchParams\n\n * @internal\n *\n * @param search - search string to parse\n * @returns a query object\n */\nfunction parseQuery(search) {\n  const query = {};\n  // avoid creating an object with an empty key and empty value\n  // because of split(&#39;&amp;&#39;)\n  if (search === &#39;&#39; || search === &#39;?&#39;) return query;\n  const hasLeadingIM = search[0] === &#39;?&#39;;\n  const searchParams = (hasLeadingIM ? search.slice(1) : search).split(&#39;&amp;&#39;);\n  for (let i = 0; i &lt; searchParams.length; ++i) {\n    // pre decode the + into space\n    const searchParam = searchParams[i].replace(PLUS_RE, &#39; &#39;);\n    // allow the = character\n    const eqPos = searchParam.indexOf(&#39;=&#39;);\n    const key = decode(eqPos &lt; 0 ? searchParam : searchParam.slice(0, eqPos));\n    const value = eqPos &lt; 0 ? null : decode(searchParam.slice(eqPos + 1));\n    if (key in query) {\n      // an extra variable for ts types\n      let currentValue = query[key];\n      if (!Array.isArray(currentValue)) {\n        currentValue = query[key] = [currentValue];\n      }\n      currentValue.push(value);\n    } else {\n      query[key] = value;\n    }\n  }\n  return query;\n}\n/**\n * Stringifies a {@link LocationQueryRaw} object. Like </span><span class="token template-punctuation string">`</span></span>URLSearchParams<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, it\n * doesn&#39;t prepend a </span><span class="token template-punctuation string">`</span></span><span class="token operator">?</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n *\n * @internal\n *\n * @param query - query object to stringify\n * @returns string version of the query without the leading </span><span class="token template-punctuation string">`</span></span><span class="token operator">?</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n */\nfunction stringifyQuery(query) {\n  let search = &#39;&#39;;\n  for (let key in query) {\n    const value = query[key];\n    key = encodeQueryKey(key);\n    if (value == null) {\n      // only null adds the value\n      if (value !== undefined) {\n        search += (search.length ? &#39;&amp;&#39; : &#39;&#39;) + key;\n      }\n      continue;\n    }\n    // keep null values\n    const values = Array.isArray(value)\n      ? value.map((v) =&gt; v &amp;&amp; encodeQueryValue(v))\n      : [value &amp;&amp; encodeQueryValue(value)];\n    values.forEach((value) =&gt; {\n      // skip undefined values in arrays as if they were not present\n      // smaller code than using filter\n      if (value !== undefined) {\n        // only append &amp; with non-empty search\n        search += (search.length ? &#39;&amp;&#39; : &#39;&#39;) + key;\n        if (value != null) search += &#39;=&#39; + value;\n      }\n    });\n  }\n  return search;\n}\n/**\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\n * numbers into strings, removing keys with an undefined value and replacing\n * undefined with null in arrays\n *\n * @param query - query object to normalize\n * @returns a normalized query object\n */\nfunction normalizeQuery(query) {\n  const normalizedQuery = {};\n  for (const key in query) {\n    const value = query[key];\n    if (value !== undefined) {\n      normalizedQuery[key] = Array.isArray(value)\n        ? value.map((v) =&gt; (v == null ? null : &#39;&#39; + v))\n        : value == null\n        ? value\n        : &#39;&#39; + value;\n    }\n  }\n  return normalizedQuery;\n}\n\n/**\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\n */\nfunction useCallbacks() {\n  let handlers = [];\n  function add(handler) {\n    handlers.push(handler);\n    return () =&gt; {\n      const i = handlers.indexOf(handler);\n      if (i &gt; -1) handlers.splice(i, 1);\n    };\n  }\n  function reset() {\n    handlers = [];\n  }\n  return {\n    add,\n    list: () =&gt; handlers,\n    reset,\n  };\n}\n\nfunction registerGuard(record, name, guard) {\n  const removeFromList = () =&gt; {\n    record[name].delete(guard);\n  };\n  onUnmounted(removeFromList);\n  onDeactivated(removeFromList);\n  onActivated(() =&gt; {\n    record[name].add(guard);\n  });\n  record[name].add(guard);\n}\n/**\n * Add a navigation guard that triggers whenever the component for the current\n * location is about to be left. Similar to {@link beforeRouteLeave} but can be\n * used in any component. The guard is removed when the component is unmounted.\n *\n * @param leaveGuard - {@link NavigationGuard}\n */\nfunction onBeforeRouteLeave(leaveGuard) {\n  if (!getCurrentInstance()) {\n    warn(\n      &#39;getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function&#39;\n    );\n    return;\n  }\n  const activeRecord = inject(\n    matchedRouteKey,\n    // to avoid warning\n    {}\n  ).value;\n  if (!activeRecord) {\n    warn(\n      &#39;No active route record was found when calling </span><span class="token template-punctuation string">`</span></span><span class="token function">onBeforeRouteLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">. Make sure you call this function inside of a component child of &lt;router-view&gt;. Maybe you called it inside of App.vue?&#39;\n    );\n    return;\n  }\n  registerGuard(activeRecord, &#39;leaveGuards&#39;, leaveGuard);\n}\n/**\n * Add a navigation guard that triggers whenever the current location is about\n * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any\n * component. The guard is removed when the component is unmounted.\n *\n * @param updateGuard - {@link NavigationGuard}\n */\nfunction onBeforeRouteUpdate(updateGuard) {\n  if (!getCurrentInstance()) {\n    warn(\n      &#39;getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function&#39;\n    );\n    return;\n  }\n  const activeRecord = inject(\n    matchedRouteKey,\n    // to avoid warning\n    {}\n  ).value;\n  if (!activeRecord) {\n    warn(\n      &#39;No active route record was found when calling </span><span class="token template-punctuation string">`</span></span><span class="token function">onBeforeRouteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">. Make sure you call this function inside of a component child of &lt;router-view&gt;. Maybe you called it inside of App.vue?&#39;\n    );\n    return;\n  }\n  registerGuard(activeRecord, &#39;updateGuards&#39;, updateGuard);\n}\nfunction guardToPromiseFn(guard, to, from, record, name) {\n  // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\n  const enterCallbackArray =\n    record &amp;&amp;\n    // name is defined if record is because of the function overload\n    (record.enterCallbacks[name] = record.enterCallbacks[name] || []);\n  return () =&gt;\n    new Promise((resolve, reject) =&gt; {\n      const next = (valid) =&gt; {\n        if (valid === false)\n          reject(\n            createRouterError(4 /* NAVIGATION_ABORTED */, {\n              from,\n              to,\n            })\n          );\n        else if (valid instanceof Error) {\n          reject(valid);\n        } else if (isRouteLocation(valid)) {\n          reject(\n            createRouterError(2 /* NAVIGATION_GUARD_REDIRECT */, {\n              from: to,\n              to: valid,\n            })\n          );\n        } else {\n          if (\n            enterCallbackArray &amp;&amp;\n            // since enterCallbackArray is truthy, both record and name also are\n            record.enterCallbacks[name] === enterCallbackArray &amp;&amp;\n            typeof valid === &#39;function&#39;\n          )\n            enterCallbackArray.push(valid);\n          resolve();\n        }\n      };\n      // wrapping with Promise.resolve allows it to work with both async and sync guards\n      const guardReturn = guard.call(\n        record &amp;&amp; record.instances[name],\n        to,\n        from,\n        canOnlyBeCalledOnce(next, to, from)\n      );\n      let guardCall = Promise.resolve(guardReturn);\n      if (guard.length &lt; 3) guardCall = guardCall.then(next);\n      if (guard.length &gt; 2) {\n        const message = </span><span class="token template-punctuation string">`</span></span>The <span class="token string">&quot;next&quot;</span> callback was never called inside <span class="token keyword">of</span> $<span class="token punctuation">{</span>\n          guard<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">+</span> guard<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n        <span class="token punctuation">}</span><span class="token operator">:</span>\\n$<span class="token punctuation">{</span>guard<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\\n<span class="token punctuation">.</span> If you are returning a value instead <span class="token keyword">of</span> calling <span class="token string">&quot;next&quot;</span><span class="token punctuation">,</span> make sure to remove the <span class="token string">&quot;next&quot;</span> parameter from your <span class="token keyword">function</span><span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">;\n        if (typeof guardReturn === &#39;object&#39; &amp;&amp; &#39;then&#39; in guardReturn) {\n          guardCall = guardCall.then((resolvedValue) =&gt; {\n            // @ts-expect-error: _called is added at canOnlyBeCalledOnce\n            if (!next._called) {\n              warn(message);\n              return Promise.reject(new Error(&#39;Invalid navigation guard&#39;));\n            }\n            return resolvedValue;\n          });\n          // TODO: test me!\n        } else if (guardReturn !== undefined) {\n          // @ts-expect-error: _called is added at canOnlyBeCalledOnce\n          if (!next._called) {\n            warn(message);\n            reject(new Error(&#39;Invalid navigation guard&#39;));\n            return;\n          }\n        }\n      }\n      guardCall.catch((err) =&gt; reject(err));\n    });\n}\nfunction canOnlyBeCalledOnce(next, to, from) {\n  let called = 0;\n  return function () {\n    if (called++ === 1)\n      warn(\n        </span><span class="token template-punctuation string">`</span></span>The <span class="token string">&quot;next&quot;</span> callback was called more than once <span class="token keyword">in</span> one navigation guard when going <span class="token keyword">from</span> <span class="token string">&quot;${from.fullPath}&quot;</span> to <span class="token string">&quot;${to.fullPath}&quot;</span><span class="token punctuation">.</span> It should be called exactly one time <span class="token keyword">in</span> each navigation guard<span class="token punctuation">.</span> This will fail <span class="token keyword">in</span> production<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      );\n    // @ts-expect-error: we put it in the original one because it&#39;s easier to check\n    next._called = true;\n    if (called === 1) next.apply(null, arguments);\n  };\n}\nfunction extractComponentsGuards(matched, guardType, to, from) {\n  const guards = [];\n  for (const record of matched) {\n    for (const name in record.components) {\n      let rawComponent = record.components[name];\n      {\n        if (\n          !rawComponent ||\n          (typeof rawComponent !== &#39;object&#39; &amp;&amp;\n            typeof rawComponent !== &#39;function&#39;)\n        ) {\n          warn(\n            </span><span class="token template-punctuation string">`</span></span>Component <span class="token string">&quot;${name}&quot;</span> <span class="token keyword">in</span> record <span class="token keyword">with</span> path <span class="token string">&quot;${record.path}&quot;</span> is not<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n              </span><span class="token template-punctuation string">`</span></span> a valid component<span class="token punctuation">.</span> Received <span class="token string">&quot;${String(rawComponent)}&quot;</span><span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          );\n          // throw to ensure we stop here but warn to ensure the message isn&#39;t\n          // missed by the user\n          throw new Error(&#39;Invalid route component&#39;);\n        } else if (&#39;then&#39; in rawComponent) {\n          // warn if user wrote import(&#39;/component.vue&#39;) instead of () =&gt;\n          // import(&#39;./component.vue&#39;)\n          warn(\n            </span><span class="token template-punctuation string">`</span></span>Component <span class="token string">&quot;${name}&quot;</span> <span class="token keyword">in</span> record <span class="token keyword">with</span> path <span class="token string">&quot;${record.path}&quot;</span> is a <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n              </span><span class="token template-punctuation string">`</span></span>Promise instead <span class="token keyword">of</span> a <span class="token keyword">function</span> that returns a Promise<span class="token punctuation">.</span> Did you <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n              </span><span class="token template-punctuation string">`</span></span>write <span class="token string">&quot;import(&#39;./MyPage.vue&#39;)&quot;</span> instead <span class="token keyword">of</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n              </span><span class="token template-punctuation string">`</span></span><span class="token string">&quot;() =&gt; import(&#39;./MyPage.vue&#39;)&quot;</span> <span class="token operator">?</span> This will <span class="token keyword">break</span> <span class="token keyword">in</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n              </span><span class="token template-punctuation string">`</span></span>production <span class="token keyword">if</span> not fixed<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          );\n          const promise = rawComponent;\n          rawComponent = () =&gt; promise;\n        } else if (\n          rawComponent.__asyncLoader &amp;&amp;\n          // warn only once per component\n          !rawComponent.__warnedDefineAsync\n        ) {\n          rawComponent.__warnedDefineAsync = true;\n          warn(\n            </span><span class="token template-punctuation string">`</span></span>Component <span class="token string">&quot;${name}&quot;</span> <span class="token keyword">in</span> record <span class="token keyword">with</span> path <span class="token string">&quot;${record.path}&quot;</span> is defined <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n              </span><span class="token template-punctuation string">`</span></span>using <span class="token string">&quot;defineAsyncComponent()&quot;</span><span class="token punctuation">.</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n              </span><span class="token template-punctuation string">`</span></span>Write <span class="token string">&quot;() =&gt; import(&#39;./MyPage.vue&#39;)&quot;</span> instead <span class="token keyword">of</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n              </span><span class="token template-punctuation string">`</span></span><span class="token string">&quot;defineAsyncComponent(() =&gt; import(&#39;./MyPage.vue&#39;))&quot;</span><span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          );\n        }\n      }\n      // skip update and leave guards if the route component is not mounted\n      if (guardType !== &#39;beforeRouteEnter&#39; &amp;&amp; !record.instances[name]) continue;\n      if (isRouteComponent(rawComponent)) {\n        // __vccOpts is added by vue-class-component and contain the regular options\n        const options = rawComponent.__vccOpts || rawComponent;\n        const guard = options[guardType];\n        guard &amp;&amp; guards.push(guardToPromiseFn(guard, to, from, record, name));\n      } else {\n        // start requesting the chunk already\n        let componentPromise = rawComponent();\n        if (!(&#39;catch&#39; in componentPromise)) {\n          warn(\n            </span><span class="token template-punctuation string">`</span></span>Component <span class="token string">&quot;${name}&quot;</span> <span class="token keyword">in</span> record <span class="token keyword">with</span> path <span class="token string">&quot;${record.path}&quot;</span> is a <span class="token keyword">function</span> that does not <span class="token keyword">return</span> a Promise<span class="token punctuation">.</span> If you were passing a functional component<span class="token punctuation">,</span> make sure to add a <span class="token string">&quot;displayName&quot;</span> to the component<span class="token punctuation">.</span> This will <span class="token keyword">break</span> <span class="token keyword">in</span> production <span class="token keyword">if</span> not fixed<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          );\n          componentPromise = Promise.resolve(componentPromise);\n        }\n        guards.push(() =&gt;\n          componentPromise.then((resolved) =&gt; {\n            if (!resolved)\n              return Promise.reject(\n                new Error(\n                  </span><span class="token template-punctuation string">`</span></span>Couldn&#39;t resolve component <span class="token string">&quot;${name}&quot;</span> at <span class="token string">&quot;${record.path}&quot;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n                )\n              );\n            const resolvedComponent = isESModule(resolved)\n              ? resolved.default\n              : resolved;\n            // replace the function with the resolved component\n            record.components[name] = resolvedComponent;\n            // __vccOpts is added by vue-class-component and contain the regular options\n            const options = resolvedComponent.__vccOpts || resolvedComponent;\n            const guard = options[guardType];\n            return guard &amp;&amp; guardToPromiseFn(guard, to, from, record, name)();\n          })\n        );\n      }\n    }\n  }\n  return guards;\n}\n/**\n * Allows differentiating lazy components from functional components and vue-class-component\n *\n * @param component\n */\nfunction isRouteComponent(component) {\n  return (\n    typeof component === &#39;object&#39; ||\n    &#39;displayName&#39; in component ||\n    &#39;props&#39; in component ||\n    &#39;__vccOpts&#39; in component\n  );\n}\n\n// TODO: we could allow currentRoute as a prop to expose </span><span class="token template-punctuation string">`</span></span>isActive<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> and\n// </span><span class="token template-punctuation string">`</span></span>isExactActive<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> behavior should go through an RFC\nfunction useLink(props) {\n  const router = inject(routerKey);\n  const currentRoute = inject(routeLocationKey);\n  const route = computed(() =&gt; router.resolve(unref(props.to)));\n  const activeRecordIndex = computed(() =&gt; {\n    const { matched } = route.value;\n    const { length } = matched;\n    const routeMatched = matched[length - 1];\n    const currentMatched = currentRoute.matched;\n    if (!routeMatched || !currentMatched.length) return -1;\n    const index = currentMatched.findIndex(\n      isSameRouteRecord.bind(null, routeMatched)\n    );\n    if (index &gt; -1) return index;\n    // possible parent record\n    const parentRecordPath = getOriginalPath(matched[length - 2]);\n    return (\n      // we are dealing with nested routes\n      length &gt; 1 &amp;&amp;\n        // if the parent and matched route have the same path, this link is\n        // referring to the empty child. Or we currently are on a different\n        // child of the same parent\n        getOriginalPath(routeMatched) === parentRecordPath &amp;&amp;\n        // avoid comparing the child with its parent\n        currentMatched[currentMatched.length - 1].path !== parentRecordPath\n        ? currentMatched.findIndex(\n            isSameRouteRecord.bind(null, matched[length - 2])\n          )\n        : index\n    );\n  });\n  const isActive = computed(\n    () =&gt;\n      activeRecordIndex.value &gt; -1 &amp;&amp;\n      includesParams(currentRoute.params, route.value.params)\n  );\n  const isExactActive = computed(\n    () =&gt;\n      activeRecordIndex.value &gt; -1 &amp;&amp;\n      activeRecordIndex.value === currentRoute.matched.length - 1 &amp;&amp;\n      isSameRouteLocationParams(currentRoute.params, route.value.params)\n  );\n  function navigate(e = {}) {\n    if (guardEvent(e)) {\n      return router[unref(props.replace) ? &#39;replace&#39; : &#39;push&#39;](\n        unref(props.to)\n        // avoid uncaught errors are they are logged anyway\n      ).catch(noop);\n    }\n    return Promise.resolve();\n  }\n  // devtools only\n  if (isBrowser) {\n    const instance = getCurrentInstance();\n    if (instance) {\n      const linkContextDevtools = {\n        route: route.value,\n        isActive: isActive.value,\n        isExactActive: isExactActive.value,\n      };\n      // @ts-expect-error: this is internal\n      instance.__vrl_devtools = instance.__vrl_devtools || [];\n      // @ts-expect-error: this is internal\n      instance.__vrl_devtools.push(linkContextDevtools);\n      watchEffect(\n        () =&gt; {\n          linkContextDevtools.route = route.value;\n          linkContextDevtools.isActive = isActive.value;\n          linkContextDevtools.isExactActive = isExactActive.value;\n        },\n        { flush: &#39;post&#39; }\n      );\n    }\n  }\n  return {\n    route,\n    href: computed(() =&gt; route.value.href),\n    isActive,\n    isExactActive,\n    navigate,\n  };\n}\nconst RouterLinkImpl = /*#__PURE__*/ defineComponent({\n  name: &#39;RouterLink&#39;,\n  props: {\n    to: {\n      type: [String, Object],\n      required: true,\n    },\n    replace: Boolean,\n    activeClass: String,\n    // inactiveClass: String,\n    exactActiveClass: String,\n    custom: Boolean,\n    ariaCurrentValue: {\n      type: String,\n      default: &#39;page&#39;,\n    },\n  },\n  useLink,\n  setup(props, { slots }) {\n    const link = reactive(useLink(props));\n    const { options } = inject(routerKey);\n    const elClass = computed(() =&gt; ({\n      [getLinkClass(\n        props.activeClass,\n        options.linkActiveClass,\n        &#39;router-link-active&#39;\n      )]: link.isActive,\n      // [getLinkClass(\n      //   props.inactiveClass,\n      //   options.linkInactiveClass,\n      //   &#39;router-link-inactive&#39;\n      // )]: !link.isExactActive,\n      [getLinkClass(\n        props.exactActiveClass,\n        options.linkExactActiveClass,\n        &#39;router-link-exact-active&#39;\n      )]: link.isExactActive,\n    }));\n    return () =&gt; {\n      const children = slots.default &amp;&amp; slots.default(link);\n      return props.custom\n        ? children\n        : h(\n            &#39;a&#39;,\n            {\n              &#39;aria-current&#39;: link.isExactActive\n                ? props.ariaCurrentValue\n                : null,\n              href: link.href,\n              // this would override user added attrs but Vue will still add\n              // the listener so we end up triggering both\n              onClick: link.navigate,\n              class: elClass.value,\n            },\n            children\n          );\n    };\n  },\n});\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a link that triggers a navigation on click.\n */\nconst RouterLink = RouterLinkImpl;\nfunction guardEvent(e) {\n  // don&#39;t redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return;\n  // don&#39;t redirect when preventDefault called\n  if (e.defaultPrevented) return;\n  // don&#39;t redirect on right click\n  if (e.button !== undefined &amp;&amp; e.button !== 0) return;\n  // don&#39;t redirect if </span><span class="token template-punctuation string">`</span></span>target<span class="token operator">=</span><span class="token string">&quot;_blank&quot;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  // @ts-expect-error getAttribute does exist\n  if (e.currentTarget &amp;&amp; e.currentTarget.getAttribute) {\n    // @ts-expect-error getAttribute exists\n    const target = e.currentTarget.getAttribute(&#39;target&#39;);\n    if (/\\b_blank\\b/i.test(target)) return;\n  }\n  // this may be a Weex event which doesn&#39;t have this method\n  if (e.preventDefault) e.preventDefault();\n  return true;\n}\nfunction includesParams(outer, inner) {\n  for (const key in inner) {\n    const innerValue = inner[key];\n    const outerValue = outer[key];\n    if (typeof innerValue === &#39;string&#39;) {\n      if (innerValue !== outerValue) return false;\n    } else {\n      if (\n        !Array.isArray(outerValue) ||\n        outerValue.length !== innerValue.length ||\n        innerValue.some((value, i) =&gt; value !== outerValue[i])\n      )\n        return false;\n    }\n  }\n  return true;\n}\n/**\n * Get the original path value of a record by following its aliasOf\n * @param record\n */\nfunction getOriginalPath(record) {\n  return record ? (record.aliasOf ? record.aliasOf.path : record.path) : &#39;&#39;;\n}\n/**\n * Utility class to get the active class based on defaults.\n * @param propClass\n * @param globalClass\n * @param defaultClass\n */\nconst getLinkClass = (propClass, globalClass, defaultClass) =&gt;\n  propClass != null\n    ? propClass\n    : globalClass != null\n    ? globalClass\n    : defaultClass;\n\nconst RouterViewImpl = /*#__PURE__*/ defineComponent({\n  name: &#39;RouterView&#39;,\n  // #674 we manually inherit them\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      default: &#39;default&#39;,\n    },\n    route: Object,\n  },\n  setup(props, { attrs, slots }) {\n    warnDeprecatedUsage();\n    const injectedRoute = inject(routerViewLocationKey);\n    const routeToDisplay = computed(() =&gt; props.route || injectedRoute.value);\n    const depth = inject(viewDepthKey, 0);\n    const matchedRouteRef = computed(() =&gt; routeToDisplay.value.matched[depth]);\n    provide(viewDepthKey, depth + 1);\n    provide(matchedRouteKey, matchedRouteRef);\n    provide(routerViewLocationKey, routeToDisplay);\n    const viewRef = ref();\n    // watch at the same time the component instance, the route record we are\n    // rendering, and the name\n    watch(\n      () =&gt; [viewRef.value, matchedRouteRef.value, props.name],\n      ([instance, to, name], [oldInstance, from, oldName]) =&gt; {\n        // copy reused instances\n        if (to) {\n          // this will update the instance for new instances as well as reused\n          // instances when navigating to a new route\n          to.instances[name] = instance;\n          // the component instance is reused for a different route or name so\n          // we copy any saved update or leave guards. With async setup, the\n          // mounting component will mount before the matchedRoute changes,\n          // making instance === oldInstance, so we check if guards have been\n          // added before. This works because we remove guards when\n          // unmounting/deactivating components\n          if (from &amp;&amp; from !== to &amp;&amp; instance &amp;&amp; instance === oldInstance) {\n            if (!to.leaveGuards.size) {\n              to.leaveGuards = from.leaveGuards;\n            }\n            if (!to.updateGuards.size) {\n              to.updateGuards = from.updateGuards;\n            }\n          }\n        }\n        // trigger beforeRouteEnter next callbacks\n        if (\n          instance &amp;&amp;\n          to &amp;&amp;\n          // if there is no instance but to and from are the same this might be\n          // the first visit\n          (!from || !isSameRouteRecord(to, from) || !oldInstance)\n        ) {\n          (to.enterCallbacks[name] || []).forEach((callback) =&gt;\n            callback(instance)\n          );\n        }\n      },\n      { flush: &#39;post&#39; }\n    );\n    return () =&gt; {\n      const route = routeToDisplay.value;\n      const matchedRoute = matchedRouteRef.value;\n      const ViewComponent = matchedRoute &amp;&amp; matchedRoute.components[props.name];\n      // we need the value at the time we render because when we unmount, we\n      // navigated to a different location so the value is different\n      const currentName = props.name;\n      if (!ViewComponent) {\n        return normalizeSlot(slots.default, {\n          Component: ViewComponent,\n          route,\n        });\n      }\n      // props from route configuration\n      const routePropsOption = matchedRoute.props[props.name];\n      const routeProps = routePropsOption\n        ? routePropsOption === true\n          ? route.params\n          : typeof routePropsOption === &#39;function&#39;\n          ? routePropsOption(route)\n          : routePropsOption\n        : null;\n      const onVnodeUnmounted = (vnode) =&gt; {\n        // remove the instance reference to prevent leak\n        if (vnode.component.isUnmounted) {\n          matchedRoute.instances[currentName] = null;\n        }\n      };\n      const component = h(\n        ViewComponent,\n        assign({}, routeProps, attrs, {\n          onVnodeUnmounted,\n          ref: viewRef,\n        })\n      );\n      if (isBrowser &amp;&amp; component.ref) {\n        // TODO: can display if it&#39;s an alias, its props\n        const info = {\n          depth,\n          name: matchedRoute.name,\n          path: matchedRoute.path,\n          meta: matchedRoute.meta,\n        };\n        const internalInstances = Array.isArray(component.ref)\n          ? component.ref.map((r) =&gt; r.i)\n          : [component.ref.i];\n        internalInstances.forEach((instance) =&gt; {\n          // @ts-expect-error\n          instance.__vrv_devtools = info;\n        });\n      }\n      return (\n        // pass the vnode to the slot as a prop.\n        // h and &lt;component :is=&quot;...&quot;&gt; both accept vnodes\n        normalizeSlot(slots.default, { Component: component, route }) ||\n        component\n      );\n    };\n  },\n});\nfunction normalizeSlot(slot, data) {\n  if (!slot) return null;\n  const slotContent = slot(data);\n  return slotContent.length === 1 ? slotContent[0] : slotContent;\n}\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to display the current route the user is at.\n */\nconst RouterView = RouterViewImpl;\n// warn against deprecated usage with &lt;transition&gt; &amp; &lt;keep-alive&gt;\n// due to functional component being no longer eager in Vue 3\nfunction warnDeprecatedUsage() {\n  const instance = getCurrentInstance();\n  const parentName = instance.parent &amp;&amp; instance.parent.type.name;\n  if (\n    parentName &amp;&amp;\n    (parentName === &#39;KeepAlive&#39; || parentName.includes(&#39;Transition&#39;))\n  ) {\n    const comp = parentName === &#39;KeepAlive&#39; ? &#39;keep-alive&#39; : &#39;transition&#39;;\n    warn(\n      </span><span class="token template-punctuation string">`</span></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span> can no longer be used directly inside <span class="token operator">&lt;</span>transition<span class="token operator">&gt;</span> or <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span><span class="token punctuation">.</span>\\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n        </span><span class="token template-punctuation string">`</span></span>Use slot props instead<span class="token operator">:</span>\\n\\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n        </span><span class="token template-punctuation string">`</span></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">&quot;{ Component }&quot;</span><span class="token operator">&gt;</span>\\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n        </span><span class="token template-punctuation string">`</span></span>  <span class="token operator">&lt;</span>$<span class="token punctuation">{</span>comp<span class="token punctuation">}</span><span class="token operator">&gt;</span>\\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n        </span><span class="token template-punctuation string">`</span></span>    <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">&quot;Component&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n        </span><span class="token template-punctuation string">`</span></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>$<span class="token punctuation">{</span>comp<span class="token punctuation">}</span><span class="token operator">&gt;</span>\\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> +\n        </span><span class="token template-punctuation string">`</span></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    );\n  }\n}\n\nfunction formatRouteLocation(routeLocation, tooltip) {\n  const copy = assign({}, routeLocation, {\n    // remove variables that can contain vue instances\n    matched: routeLocation.matched.map((matched) =&gt;\n      omit(matched, [&#39;instances&#39;, &#39;children&#39;, &#39;aliasOf&#39;])\n    ),\n  });\n  return {\n    _custom: {\n      type: null,\n      readOnly: true,\n      display: routeLocation.fullPath,\n      tooltip,\n      value: copy,\n    },\n  };\n}\nfunction formatDisplay(display) {\n  return {\n    _custom: {\n      display,\n    },\n  };\n}\n// to support multiple router instances\nlet routerId = 0;\nfunction addDevtools(app, router, matcher) {\n  // Take over router.beforeEach and afterEach\n  // make sure we are not registering the devtool twice\n  if (router.__hasDevtools) return;\n  router.__hasDevtools = true;\n  // increment to support multiple router instances\n  const id = routerId++;\n  setupDevtoolsPlugin(\n    {\n      id: &#39;org.vuejs.router&#39; + (id ? &#39;.&#39; + id : &#39;&#39;),\n      label: &#39;Vue Router&#39;,\n      packageName: &#39;vue-router&#39;,\n      homepage: &#39;https://next.router.vuejs.org/&#39;,\n      logo: &#39;https://vuejs.org/images/icons/favicon-96x96.png&#39;,\n      componentStateTypes: [&#39;Routing&#39;],\n      app,\n    },\n    (api) =&gt; {\n      // display state added by the router\n      api.on.inspectComponent((payload, ctx) =&gt; {\n        if (payload.instanceData) {\n          payload.instanceData.state.push({\n            type: &#39;Routing&#39;,\n            key: &#39;$route&#39;,\n            editable: false,\n            value: formatRouteLocation(\n              router.currentRoute.value,\n              &#39;Current Route&#39;\n            ),\n          });\n        }\n      });\n      // mark router-link as active and display tags on router views\n      api.on.visitComponentTree(({ treeNode: node, componentInstance }) =&gt; {\n        if (componentInstance.__vrv_devtools) {\n          const info = componentInstance.__vrv_devtools;\n          node.tags.push({\n            label: (info.name ? </span><span class="token template-punctuation string">`</span></span>$<span class="token punctuation">{</span>info<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> : &#39;&#39;) + info.path,\n            textColor: 0,\n            tooltip: &#39;This component is rendered by &amp;lt;router-view&amp;gt;&#39;,\n            backgroundColor: PINK_500,\n          });\n        }\n        // if multiple useLink are used\n        if (Array.isArray(componentInstance.__vrl_devtools)) {\n          componentInstance.__devtoolsApi = api;\n          componentInstance.__vrl_devtools.forEach((devtoolsData) =&gt; {\n            let backgroundColor = ORANGE_400;\n            let tooltip = &#39;&#39;;\n            if (devtoolsData.isExactActive) {\n              backgroundColor = LIME_500;\n              tooltip = &#39;This is exactly active&#39;;\n            } else if (devtoolsData.isActive) {\n              backgroundColor = BLUE_600;\n              tooltip = &#39;This link is active&#39;;\n            }\n            node.tags.push({\n              label: devtoolsData.route.path,\n              textColor: 0,\n              tooltip,\n              backgroundColor,\n            });\n          });\n        }\n      });\n      watch(router.currentRoute, () =&gt; {\n        // refresh active state\n        refreshRoutesView();\n        api.notifyComponentUpdate();\n        api.sendInspectorTree(routerInspectorId);\n        api.sendInspectorState(routerInspectorId);\n      });\n      const navigationsLayerId = &#39;router:navigations:&#39; + id;\n      api.addTimelineLayer({\n        id: navigationsLayerId,\n        label: </span><span class="token template-punctuation string">`</span></span>Router$<span class="token punctuation">{</span>id <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> id <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span> Navigations<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">,\n        color: 0x40a8c4,\n      });\n      // const errorsLayerId = &#39;router:errors&#39;\n      // api.addTimelineLayer({\n      //   id: errorsLayerId,\n      //   label: &#39;Router Errors&#39;,\n      //   color: 0xea5455,\n      // })\n      router.onError((error, to) =&gt; {\n        api.addTimelineEvent({\n          layerId: navigationsLayerId,\n          event: {\n            title: &#39;Error during Navigation&#39;,\n            subtitle: to.fullPath,\n            logType: &#39;error&#39;,\n            time: Date.now(),\n            data: { error },\n            groupId: to.meta.__navigationId,\n          },\n        });\n      });\n      // attached to </span><span class="token template-punctuation string">`</span></span>meta<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> and used to group events\n      let navigationId = 0;\n      router.beforeEach((to, from) =&gt; {\n        const data = {\n          guard: formatDisplay(&#39;beforeEach&#39;),\n          from: formatRouteLocation(\n            from,\n            &#39;Current Location during this navigation&#39;\n          ),\n          to: formatRouteLocation(to, &#39;Target location&#39;),\n        };\n        // Used to group navigations together, hide from devtools\n        Object.defineProperty(to.meta, &#39;__navigationId&#39;, {\n          value: navigationId++,\n        });\n        api.addTimelineEvent({\n          layerId: navigationsLayerId,\n          event: {\n            time: Date.now(),\n            title: &#39;Start of navigation&#39;,\n            subtitle: to.fullPath,\n            data,\n            groupId: to.meta.__navigationId,\n          },\n        });\n      });\n      router.afterEach((to, from, failure) =&gt; {\n        const data = {\n          guard: formatDisplay(&#39;afterEach&#39;),\n        };\n        if (failure) {\n          data.failure = {\n            _custom: {\n              type: Error,\n              readOnly: true,\n              display: failure ? failure.message : &#39;&#39;,\n              tooltip: &#39;Navigation Failure&#39;,\n              value: failure,\n            },\n          };\n          data.status = formatDisplay(&#39;\u274C&#39;);\n        } else {\n          data.status = formatDisplay(&#39;\u2705&#39;);\n        }\n        // we set here to have the right order\n        data.from = formatRouteLocation(\n          from,\n          &#39;Current Location during this navigation&#39;\n        );\n        data.to = formatRouteLocation(to, &#39;Target location&#39;);\n        api.addTimelineEvent({\n          layerId: navigationsLayerId,\n          event: {\n            title: &#39;End of navigation&#39;,\n            subtitle: to.fullPath,\n            time: Date.now(),\n            data,\n            logType: failure ? &#39;warning&#39; : &#39;default&#39;,\n            groupId: to.meta.__navigationId,\n          },\n        });\n      });\n      /**\n       * Inspector of Existing routes\n       */\n      const routerInspectorId = &#39;router-inspector:&#39; + id;\n      api.addInspector({\n        id: routerInspectorId,\n        label: &#39;Routes&#39; + (id ? &#39; &#39; + id : &#39;&#39;),\n        icon: &#39;book&#39;,\n        treeFilterPlaceholder: &#39;Search routes&#39;,\n      });\n      function refreshRoutesView() {\n        // the routes view isn&#39;t active\n        if (!activeRoutesPayload) return;\n        const payload = activeRoutesPayload;\n        // children routes will appear as nested\n        let routes = matcher.getRoutes().filter((route) =&gt; !route.parent);\n        // reset match state to false\n        routes.forEach(resetMatchStateOnRouteRecord);\n        // apply a match state if there is a payload\n        if (payload.filter) {\n          routes = routes.filter((route) =&gt;\n            // save matches state based on the payload\n            isRouteMatching(route, payload.filter.toLowerCase())\n          );\n        }\n        // mark active routes\n        routes.forEach((route) =&gt;\n          markRouteRecordActive(route, router.currentRoute.value)\n        );\n        payload.rootNodes = routes.map(formatRouteRecordForInspector);\n      }\n      let activeRoutesPayload;\n      api.on.getInspectorTree((payload) =&gt; {\n        activeRoutesPayload = payload;\n        if (payload.app === app &amp;&amp; payload.inspectorId === routerInspectorId) {\n          refreshRoutesView();\n        }\n      });\n      /**\n       * Display information about the currently selected route record\n       */\n      api.on.getInspectorState((payload) =&gt; {\n        if (payload.app === app &amp;&amp; payload.inspectorId === routerInspectorId) {\n          const routes = matcher.getRoutes();\n          const route = routes.find(\n            (route) =&gt; route.record.__vd_id === payload.nodeId\n          );\n          if (route) {\n            payload.state = {\n              options: formatRouteRecordMatcherForStateInspector(route),\n            };\n          }\n        }\n      });\n      api.sendInspectorTree(routerInspectorId);\n      api.sendInspectorState(routerInspectorId);\n    }\n  );\n}\nfunction modifierForKey(key) {\n  if (key.optional) {\n    return key.repeatable ? &#39;*&#39; : &#39;?&#39;;\n  } else {\n    return key.repeatable ? &#39;+&#39; : &#39;&#39;;\n  }\n}\nfunction formatRouteRecordMatcherForStateInspector(route) {\n  const { record } = route;\n  const fields = [{ editable: false, key: &#39;path&#39;, value: record.path }];\n  if (record.name != null) {\n    fields.push({\n      editable: false,\n      key: &#39;name&#39;,\n      value: record.name,\n    });\n  }\n  fields.push({ editable: false, key: &#39;regexp&#39;, value: route.re });\n  if (route.keys.length) {\n    fields.push({\n      editable: false,\n      key: &#39;keys&#39;,\n      value: {\n        _custom: {\n          type: null,\n          readOnly: true,\n          display: route.keys\n            .map((key) =&gt; </span><span class="token template-punctuation string">`</span></span>$<span class="token punctuation">{</span>key<span class="token punctuation">.</span>name<span class="token punctuation">}</span>$<span class="token punctuation">{</span><span class="token function">modifierForKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">)\n            .join(&#39; &#39;),\n          tooltip: &#39;Param keys&#39;,\n          value: route.keys,\n        },\n      },\n    });\n  }\n  if (record.redirect != null) {\n    fields.push({\n      editable: false,\n      key: &#39;redirect&#39;,\n      value: record.redirect,\n    });\n  }\n  if (route.alias.length) {\n    fields.push({\n      editable: false,\n      key: &#39;aliases&#39;,\n      value: route.alias.map((alias) =&gt; alias.record.path),\n    });\n  }\n  fields.push({\n    key: &#39;score&#39;,\n    editable: false,\n    value: {\n      _custom: {\n        type: null,\n        readOnly: true,\n        display: route.score.map((score) =&gt; score.join(&#39;, &#39;)).join(&#39; | &#39;),\n        tooltip: &#39;Score used to sort routes&#39;,\n        value: route.score,\n      },\n    },\n  });\n  return fields;\n}\n/**\n * Extracted from tailwind palette\n */\nconst PINK_500 = 0xec4899;\nconst BLUE_600 = 0x2563eb;\nconst LIME_500 = 0x84cc16;\nconst CYAN_400 = 0x22d3ee;\nconst ORANGE_400 = 0xfb923c;\n// const GRAY_100 = 0xf4f4f5\nconst DARK = 0x666666;\nfunction formatRouteRecordForInspector(route) {\n  const tags = [];\n  const { record } = route;\n  if (record.name != null) {\n    tags.push({\n      label: String(record.name),\n      textColor: 0,\n      backgroundColor: CYAN_400,\n    });\n  }\n  if (record.aliasOf) {\n    tags.push({\n      label: &#39;alias&#39;,\n      textColor: 0,\n      backgroundColor: ORANGE_400,\n    });\n  }\n  if (route.__vd_match) {\n    tags.push({\n      label: &#39;matches&#39;,\n      textColor: 0,\n      backgroundColor: PINK_500,\n    });\n  }\n  if (route.__vd_exactActive) {\n    tags.push({\n      label: &#39;exact&#39;,\n      textColor: 0,\n      backgroundColor: LIME_500,\n    });\n  }\n  if (route.__vd_active) {\n    tags.push({\n      label: &#39;active&#39;,\n      textColor: 0,\n      backgroundColor: BLUE_600,\n    });\n  }\n  if (record.redirect) {\n    tags.push({\n      label:\n        &#39;redirect: &#39; +\n        (typeof record.redirect === &#39;string&#39; ? record.redirect : &#39;Object&#39;),\n      textColor: 0xffffff,\n      backgroundColor: DARK,\n    });\n  }\n  // add an id to be able to select it. Using the </span><span class="token template-punctuation string">`</span></span>path<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> is not possible because\n  // empty path children would collide with their parents\n  let id = record.__vd_id;\n  if (id == null) {\n    id = String(routeRecordId++);\n    record.__vd_id = id;\n  }\n  return {\n    id,\n    label: record.path,\n    tags,\n    children: route.children.map(formatRouteRecordForInspector),\n  };\n}\n//  incremental id for route records and inspector state\nlet routeRecordId = 0;\nconst EXTRACT_REGEXP_RE = /^\\/(.*)\\/([a-z]*)$/;\nfunction markRouteRecordActive(route, currentRoute) {\n  // no route will be active if matched is empty\n  // reset the matching state\n  const isExactActive =\n    currentRoute.matched.length &amp;&amp;\n    isSameRouteRecord(\n      currentRoute.matched[currentRoute.matched.length - 1],\n      route.record\n    );\n  route.__vd_exactActive = route.__vd_active = isExactActive;\n  if (!isExactActive) {\n    route.__vd_active = currentRoute.matched.some((match) =&gt;\n      isSameRouteRecord(match, route.record)\n    );\n  }\n  route.children.forEach((childRoute) =&gt;\n    markRouteRecordActive(childRoute, currentRoute)\n  );\n}\nfunction resetMatchStateOnRouteRecord(route) {\n  route.__vd_match = false;\n  route.children.forEach(resetMatchStateOnRouteRecord);\n}\nfunction isRouteMatching(route, filter) {\n  const found = String(route.re).match(EXTRACT_REGEXP_RE);\n  route.__vd_match = false;\n  if (!found || found.length &lt; 3) {\n    return false;\n  }\n  // use a regexp without $ at the end to match nested routes better\n  const nonEndingRE = new RegExp(found[1].replace(/\\$$/, &#39;&#39;), found[2]);\n  if (nonEndingRE.test(filter)) {\n    // mark children as matches\n    route.children.forEach((child) =&gt; isRouteMatching(child, filter));\n    // exception case: </span><span class="token template-punctuation string">`</span></span><span class="token operator">/</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    if (route.record.path !== &#39;/&#39; || filter === &#39;/&#39;) {\n      route.__vd_match = route.re.test(filter);\n      return true;\n    }\n    // hide the / route\n    return false;\n  }\n  const path = route.record.path.toLowerCase();\n  const decodedPath = decode(path);\n  // also allow partial matching on the path\n  if (\n    !filter.startsWith(&#39;/&#39;) &amp;&amp;\n    (decodedPath.includes(filter) || path.includes(filter))\n  )\n    return true;\n  if (decodedPath.startsWith(filter) || path.startsWith(filter)) return true;\n  if (route.record.name &amp;&amp; String(route.record.name).includes(filter))\n    return true;\n  return route.children.some((child) =&gt; isRouteMatching(child, filter));\n}\nfunction omit(obj, keys) {\n  const ret = {};\n  for (const key in obj) {\n    if (!keys.includes(key)) {\n      // @ts-expect-error\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\n/**\n * Creates a Router instance that can be used by a Vue app.\n *\n * @param options - {@link RouterOptions}\n */\nfunction createRouter(options) {\n  const matcher = createRouterMatcher(options.routes, options);\n  const parseQuery$1 = options.parseQuery || parseQuery;\n  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;\n  const routerHistory = options.history;\n  if (!routerHistory)\n    throw new Error(\n      &#39;Provide the &quot;history&quot; option when calling &quot;createRouter()&quot;:&#39; +\n        &#39; https://next.router.vuejs.org/api/#history.&#39;\n    );\n  const beforeGuards = useCallbacks();\n  const beforeResolveGuards = useCallbacks();\n  const afterGuards = useCallbacks();\n  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);\n  let pendingLocation = START_LOCATION_NORMALIZED;\n  // leave the scrollRestoration if no scrollBehavior is provided\n  if (isBrowser &amp;&amp; options.scrollBehavior &amp;&amp; &#39;scrollRestoration&#39; in history) {\n    history.scrollRestoration = &#39;manual&#39;;\n  }\n  const normalizeParams = applyToParams.bind(\n    null,\n    (paramValue) =&gt; &#39;&#39; + paramValue\n  );\n  const encodeParams = applyToParams.bind(null, encodeParam);\n  const decodeParams =\n    // @ts-expect-error: intentionally avoid the type check\n    applyToParams.bind(null, decode);\n  function addRoute(parentOrRoute, route) {\n    let parent;\n    let record;\n    if (isRouteName(parentOrRoute)) {\n      parent = matcher.getRecordMatcher(parentOrRoute);\n      record = route;\n    } else {\n      record = parentOrRoute;\n    }\n    return matcher.addRoute(record, parent);\n  }\n  function removeRoute(name) {\n    const recordMatcher = matcher.getRecordMatcher(name);\n    if (recordMatcher) {\n      matcher.removeRoute(recordMatcher);\n    } else {\n      warn(</span><span class="token template-punctuation string">`</span></span>Cannot remove non<span class="token operator">-</span>existent route <span class="token string">&quot;${String(name)}&quot;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">);\n    }\n  }\n  function getRoutes() {\n    return matcher.getRoutes().map((routeMatcher) =&gt; routeMatcher.record);\n  }\n  function hasRoute(name) {\n    return !!matcher.getRecordMatcher(name);\n  }\n  function resolve(rawLocation, currentLocation) {\n    // const objectLocation = routerLocationAsObject(rawLocation)\n    // we create a copy to modify it later\n    currentLocation = assign({}, currentLocation || currentRoute.value);\n    if (typeof rawLocation === &#39;string&#39;) {\n      const locationNormalized = parseURL(\n        parseQuery$1,\n        rawLocation,\n        currentLocation.path\n      );\n      const matchedRoute = matcher.resolve(\n        { path: locationNormalized.path },\n        currentLocation\n      );\n      const href = routerHistory.createHref(locationNormalized.fullPath);\n      {\n        if (href.startsWith(&#39;//&#39;))\n          warn(\n            </span><span class="token template-punctuation string">`</span></span>Location <span class="token string">&quot;${rawLocation}&quot;</span> resolved to <span class="token string">&quot;${href}&quot;</span><span class="token punctuation">.</span> <span class="token constant">A</span> resolved location cannot start <span class="token keyword">with</span> multiple slashes<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          );\n        else if (!matchedRoute.matched.length) {\n          warn(</span><span class="token template-punctuation string">`</span></span>No match found <span class="token keyword">for</span> location <span class="token keyword">with</span> path <span class="token string">&quot;${rawLocation}&quot;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">);\n        }\n      }\n      // locationNormalized is always a new object\n      return assign(locationNormalized, matchedRoute, {\n        params: decodeParams(matchedRoute.params),\n        hash: decode(locationNormalized.hash),\n        redirectedFrom: undefined,\n        href,\n      });\n    }\n    let matcherLocation;\n    // path could be relative in object as well\n    if (&#39;path&#39; in rawLocation) {\n      if (\n        &#39;params&#39; in rawLocation &amp;&amp;\n        !(&#39;name&#39; in rawLocation) &amp;&amp;\n        // @ts-expect-error: the type is never\n        Object.keys(rawLocation.params).length\n      ) {\n        warn(\n          </span><span class="token template-punctuation string">`</span></span>Path &quot;$<span class="token punctuation">{</span>\n            <span class="token comment">// @ts-expect-error: the type is never</span>\n            rawLocation<span class="token punctuation">.</span>path\n          <span class="token punctuation">}</span>&quot; was passed <span class="token keyword">with</span> params but they will be ignored<span class="token punctuation">.</span> Use a named route alongside params instead<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n        );\n      }\n      matcherLocation = assign({}, rawLocation, {\n        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path)\n          .path,\n      });\n    } else {\n      // remove any nullish param\n      const targetParams = assign({}, rawLocation.params);\n      for (const key in targetParams) {\n        if (targetParams[key] == null) {\n          delete targetParams[key];\n        }\n      }\n      // pass encoded values to the matcher so it can produce encoded path and fullPath\n      matcherLocation = assign({}, rawLocation, {\n        params: encodeParams(rawLocation.params),\n      });\n      // current location params are decoded, we need to encode them in case the\n      // matcher merges the params\n      currentLocation.params = encodeParams(currentLocation.params);\n    }\n    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);\n    const hash = rawLocation.hash || &#39;&#39;;\n    if (hash &amp;&amp; !hash.startsWith(&#39;#&#39;)) {\n      warn(\n        </span><span class="token template-punctuation string">`</span></span><span class="token constant">A</span> \\<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hash\\` should always start with the character &quot;#&quot;. Replace &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; with &quot;#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// decoding them) the matcher might have merged current location params so</span>\n    <span class="token comment">// we need to run the decoding again</span>\n    matchedRoute<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token function">normalizeParams</span><span class="token punctuation">(</span><span class="token function">decodeParams</span><span class="token punctuation">(</span>matchedRoute<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> fullPath <span class="token operator">=</span> <span class="token function">stringifyURL</span><span class="token punctuation">(</span>\n      stringifyQuery$<span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> rawLocation<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        hash<span class="token operator">:</span> <span class="token function">encodeHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        path<span class="token operator">:</span> matchedRoute<span class="token punctuation">.</span>path<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> href <span class="token operator">=</span> routerHistory<span class="token punctuation">.</span><span class="token function">createHref</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>href<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;//&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Location &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rawLocation<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; resolved to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. A resolved location cannot start with multiple slashes.</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchedRoute<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">No match found for location with path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n            <span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> rawLocation <span class="token operator">?</span> rawLocation<span class="token punctuation">.</span>path <span class="token operator">:</span> rawLocation\n          <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span>\n        fullPath<span class="token punctuation">,</span>\n        <span class="token comment">// keep the hash encoded so fullPath is effectively path + encodedQuery +</span>\n        <span class="token comment">// hash</span>\n        hash<span class="token punctuation">,</span>\n        query<span class="token operator">:</span>\n          <span class="token comment">// if the user is using a custom query lib like qs, we might have</span>\n          <span class="token comment">// nested objects, so we keep the query as is, meaning it can contain</span>\n          <span class="token comment">// numbers at `$route.query`, but at the point, the user will have to</span>\n          <span class="token comment">// use their own type anyway.</span>\n          <span class="token comment">// https://github.com/vuejs/vue-router-next/issues/328#issuecomment-649481567</span>\n          stringifyQuery$<span class="token number">1</span> <span class="token operator">===</span> stringifyQuery\n            <span class="token operator">?</span> <span class="token function">normalizeQuery</span><span class="token punctuation">(</span>rawLocation<span class="token punctuation">.</span>query<span class="token punctuation">)</span>\n            <span class="token operator">:</span> rawLocation<span class="token punctuation">.</span>query <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      matchedRoute<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        redirectedFrom<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n        href<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">locationAsObject</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>\n      <span class="token operator">?</span> <span class="token function">parseURL</span><span class="token punctuation">(</span>parseQuery$<span class="token number">1</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">.</span>path<span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">!==</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        from<span class="token punctuation">,</span>\n        to<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> lastMatched <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastMatched <span class="token operator">&amp;&amp;</span> lastMatched<span class="token punctuation">.</span>redirect<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> redirect <span class="token punctuation">}</span> <span class="token operator">=</span> lastMatched<span class="token punctuation">;</span>\n      <span class="token keyword">let</span> newTargetLocation <span class="token operator">=</span>\n        <span class="token keyword">typeof</span> redirect <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">redirect</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token operator">:</span> redirect<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newTargetLocation <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        newTargetLocation <span class="token operator">=</span>\n          newTargetLocation<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> newTargetLocation<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span>\n            <span class="token operator">?</span> <span class="token punctuation">(</span>newTargetLocation <span class="token operator">=</span> <span class="token function">locationAsObject</span><span class="token punctuation">(</span>newTargetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token operator">:</span> <span class="token comment">// force empty params</span>\n              <span class="token punctuation">{</span> path<span class="token operator">:</span> newTargetLocation <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token comment">// @ts-expect-error: force empty params when a string is passed to let</span>\n        <span class="token comment">// the router parse them again</span>\n        newTargetLocation<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> newTargetLocation<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> newTargetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Invalid redirect found:\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>\n            newTargetLocation<span class="token punctuation">,</span>\n            <span class="token keyword">null</span><span class="token punctuation">,</span>\n            <span class="token number">2</span>\n          <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n when navigating to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n            to<span class="token punctuation">.</span>fullPath\n          <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. A redirect must contain a name or path. This will break in production.</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid redirect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token function">assign</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span>\n          query<span class="token operator">:</span> to<span class="token punctuation">.</span>query<span class="token punctuation">,</span>\n          hash<span class="token operator">:</span> to<span class="token punctuation">.</span>hash<span class="token punctuation">,</span>\n          params<span class="token operator">:</span> to<span class="token punctuation">.</span>params<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        newTargetLocation\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> redirectedFrom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> targetLocation <span class="token operator">=</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> from <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> to<span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> force <span class="token operator">=</span> to<span class="token punctuation">.</span>force<span class="token punctuation">;</span>\n    <span class="token comment">// to could be a string where `replace` is a function</span>\n    <span class="token keyword">const</span> replace <span class="token operator">=</span> to<span class="token punctuation">.</span>replace <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> shouldRedirect <span class="token operator">=</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span>targetLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>\n        <span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          state<span class="token operator">:</span> data<span class="token punctuation">,</span>\n          force<span class="token punctuation">,</span>\n          replace<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">// keep original redirectedFrom if it exists</span>\n        redirectedFrom <span class="token operator">||</span> targetLocation\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// if it was a redirect we already called `pushWithRedirect` above</span>\n    <span class="token keyword">const</span> toLocation <span class="token operator">=</span> targetLocation<span class="token punctuation">;</span>\n    toLocation<span class="token punctuation">.</span>redirectedFrom <span class="token operator">=</span> redirectedFrom<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> failure<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>force <span class="token operator">&amp;&amp;</span> <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span>stringifyQuery$<span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> targetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      failure <span class="token operator">=</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        to<span class="token operator">:</span> toLocation<span class="token punctuation">,</span>\n        from<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// trigger scroll to allow scrolling to the same anchor</span>\n      <span class="token function">handleScroll</span><span class="token punctuation">(</span>\n        from<span class="token punctuation">,</span>\n        from<span class="token punctuation">,</span>\n        <span class="token comment">// this is a push, the only way for it to be triggered from a</span>\n        <span class="token comment">// history.listen is with a redirect, which makes it become a push</span>\n        <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token comment">// This cannot be the first navigation because the initial location</span>\n        <span class="token comment">// cannot be manually navigated to</span>\n        <span class="token boolean">false</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>failure <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">navigate</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n        <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n          <span class="token operator">?</span> error\n          <span class="token operator">:</span> <span class="token comment">// reject any unknown error</span>\n            <span class="token function">triggerError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>failure<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* NAVIGATION_GUARD_REDIRECT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>\n              <span class="token comment">// we are redirecting to the same location we were already at</span>\n              <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span>\n                stringifyQuery$<span class="token number">1</span><span class="token punctuation">,</span>\n                <span class="token function">resolve</span><span class="token punctuation">(</span>failure<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                toLocation\n              <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n              <span class="token comment">// and we have done it a couple of times</span>\n              redirectedFrom <span class="token operator">&amp;&amp;</span>\n              <span class="token comment">// @ts-expect-error: added only in dev</span>\n              <span class="token punctuation">(</span>redirectedFrom<span class="token punctuation">.</span>_count <span class="token operator">=</span> redirectedFrom<span class="token punctuation">.</span>_count\n                <span class="token operator">?</span> <span class="token comment">// @ts-expect-error</span>\n                  redirectedFrom<span class="token punctuation">.</span>_count <span class="token operator">+</span> <span class="token number">1</span>\n                <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span>\n            <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token function">warn</span><span class="token punctuation">(</span>\n                <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Detected an infinite redirection in a navigation guard when going from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>toLocation<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Aborting to avoid a Stack Overflow. This will break in production if not fixed.</span><span class="token template-punctuation string">`</span></span>\n              <span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>\n                <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Infinite redirect in navigation guard&#39;</span><span class="token punctuation">)</span>\n              <span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>\n              <span class="token comment">// keep options</span>\n              <span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>failure<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                state<span class="token operator">:</span> data<span class="token punctuation">,</span>\n                force<span class="token punctuation">,</span>\n                replace<span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token comment">// preserve the original redirectedFrom if any</span>\n              redirectedFrom <span class="token operator">||</span> toLocation\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment">// if we fail we don&#39;t finalize the navigation</span>\n          failure <span class="token operator">=</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> failure<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/**\n   * Helper to reject and skip all navigation guards if a new navigation happened\n   * <span class="token keyword">@param</span> <span class="token parameter">to</span>\n   * <span class="token keyword">@param</span> <span class="token parameter">from</span>\n   */</span>\n  <span class="token keyword">function</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> error <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// TODO: refactor the whole before guards by internally using router.beforeEach</span>\n  <span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> guards<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span> <span class="token operator">=</span>\n      <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// all components here have been resolved once because we are leaving</span>\n    guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>\n      leavingRecords<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span>\n      to<span class="token punctuation">,</span>\n      from\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// leavingRecords is already reversed</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> leavingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      record<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> canceledNavigationCheck <span class="token operator">=</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>\n      <span class="token keyword">null</span><span class="token punctuation">,</span>\n      to<span class="token punctuation">,</span>\n      from\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// run the queue of per route beforeRouteLeave guards</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// check global guards beforeEach</span>\n          guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// check in components beforeRouteUpdate</span>\n          guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>\n            updatingRecords<span class="token punctuation">,</span>\n            <span class="token string">&#39;beforeRouteUpdate&#39;</span><span class="token punctuation">,</span>\n            to<span class="token punctuation">,</span>\n            from\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> updatingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            record<span class="token punctuation">.</span>updateGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n              guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// run the queue of per route beforeEnter guards</span>\n          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// check the route beforeEnter</span>\n          guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// do not trigger beforeEnter on reused views</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> beforeEnter <span class="token keyword">of</span> record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span>\n                  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// run the queue of per route beforeEnter guards</span>\n          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// NOTE: at this point to.matched is normalized and does not contain any () =&gt; Promise&lt;Component&gt;</span>\n          <span class="token comment">// clear existing enterCallbacks, these are added by extractComponentsGuards</span>\n          to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>enterCallbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// check in-component beforeRouteEnter</span>\n          guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>\n            enteringRecords<span class="token punctuation">,</span>\n            <span class="token string">&#39;beforeRouteEnter&#39;</span><span class="token punctuation">,</span>\n            to<span class="token punctuation">,</span>\n            from\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// run the queue of per route beforeEnter guards</span>\n          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// check global guards beforeResolve</span>\n          guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeResolveGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token comment">// catch any navigation canceled</span>\n        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n          <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span><span class="token punctuation">)</span>\n            <span class="token operator">?</span> err\n            <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// navigation is confirmed, call afterGuards</span>\n    <span class="token comment">// TODO: wrap with error handlers</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> afterGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">guard</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/**\n   * - Cleans up any navigation guards\n   * - Changes the url if necessary\n   * - Calls the scrollBehavior\n   */</span>\n  <span class="token keyword">function</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span><span class="token parameter">toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// a more recent navigation took place</span>\n    <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> error<span class="token punctuation">;</span>\n    <span class="token comment">// only consider as push if it&#39;s not the first navigation</span>\n    <span class="token keyword">const</span> isFirstNavigation <span class="token operator">=</span> from <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">!</span>isBrowser <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token comment">// change URL only if the user did a push/replace and if it&#39;s not the initial navigation because</span>\n    <span class="token comment">// it&#39;s just reflecting the url</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isPush<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// on the initial navigation, we want to reuse the scroll position from</span>\n      <span class="token comment">// history state if it exists</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>replace <span class="token operator">||</span> isFirstNavigation<span class="token punctuation">)</span>\n        routerHistory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n          toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>\n          <span class="token function">assign</span><span class="token punctuation">(</span>\n            <span class="token punctuation">{</span>\n              scroll<span class="token operator">:</span> isFirstNavigation <span class="token operator">&amp;&amp;</span> state <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>scroll<span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            data\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">else</span> routerHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// accept current navigation</span>\n    currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> toLocation<span class="token punctuation">;</span>\n    <span class="token function">handleScroll</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> isFirstNavigation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> removeHistoryListener<span class="token punctuation">;</span>\n  <span class="token comment">// attach listener to history to trigger navigations</span>\n  <span class="token keyword">function</span> <span class="token function">setupListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    removeHistoryListener <span class="token operator">=</span> routerHistory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> _from<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// cannot be a redirect route because it was in history</span>\n      <span class="token keyword">const</span> toLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// due to dynamic routing, and to hash history with manual navigation</span>\n      <span class="token comment">// (manually changing the url or calling history.hash = &#39;#/somewhere&#39;),</span>\n      <span class="token comment">// there could be a redirect record in history</span>\n      <span class="token keyword">const</span> shouldRedirect <span class="token operator">=</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>\n          <span class="token function">assign</span><span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">,</span> <span class="token punctuation">{</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          toLocation\n        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      pendingLocation <span class="token operator">=</span> toLocation<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> from <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token comment">// TODO: should be moved to web history?</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">saveScrollPosition</span><span class="token punctuation">(</span>\n          <span class="token function">getScrollKey</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> info<span class="token punctuation">.</span>delta<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">navigate</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>\n            <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>\n              error<span class="token punctuation">,</span>\n              <span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span>\n            <span class="token punctuation">)</span>\n          <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> error<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* NAVIGATION_GUARD_REDIRECT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Here we could call if (info.delta) routerHistory.go(-info.delta,</span>\n            <span class="token comment">// false) but this is bug prone as we have no way to wait the</span>\n            <span class="token comment">// navigation to be finished before calling pushWithRedirect. Using</span>\n            <span class="token comment">// a setTimeout of 16ms seems to work but there is not guarantee for</span>\n            <span class="token comment">// it to work on every browser. So Instead we do not restore the</span>\n            <span class="token comment">// history entry and trigger a new navigation as requested by the</span>\n            <span class="token comment">// navigation guard.</span>\n            <span class="token comment">// the error is already handled by router.push we just want to avoid</span>\n            <span class="token comment">// logging the error</span>\n            <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>\n              error<span class="token punctuation">.</span>to<span class="token punctuation">,</span>\n              toLocation\n              <span class="token comment">// avoid an uncaught rejection, let push call triggerError</span>\n            <span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token comment">// manual change in hash history #916 ending up in the URL not</span>\n                <span class="token comment">// changing but it was changed by the manual url change, so we</span>\n                <span class="token comment">// need to manually change it ourselves</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>\n                  <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>\n                    failure<span class="token punctuation">,</span>\n                    <span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span> <span class="token operator">|</span> <span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span>\n                  <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                  <span class="token operator">!</span>info<span class="token punctuation">.</span>delta <span class="token operator">&amp;&amp;</span>\n                  info<span class="token punctuation">.</span>type <span class="token operator">===</span> NavigationType<span class="token punctuation">.</span>pop\n                <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// avoid the then branch</span>\n            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token comment">// do not restore history on unknown direction</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">)</span> routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// unrecognized error, transfer to the global handler</span>\n          <span class="token keyword">return</span> <span class="token function">triggerError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          failure <span class="token operator">=</span>\n            failure <span class="token operator">||</span>\n            <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span>\n              <span class="token comment">// after navigation, all matched components are resolved</span>\n              toLocation<span class="token punctuation">,</span>\n              from<span class="token punctuation">,</span>\n              <span class="token boolean">false</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// revert the navigation</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>\n              info<span class="token punctuation">.</span>type <span class="token operator">===</span> NavigationType<span class="token punctuation">.</span>pop <span class="token operator">&amp;&amp;</span>\n              <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>\n                failure<span class="token punctuation">,</span>\n                <span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span> <span class="token operator">|</span> <span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span>\n              <span class="token punctuation">)</span>\n            <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token comment">// manual change in hash history #916</span>\n              <span class="token comment">// it&#39;s like a push but lacks the information of the direction</span>\n              routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n          <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Initialization and Errors</span>\n  <span class="token keyword">let</span> readyHandlers <span class="token operator">=</span> <span class="token function">useCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> errorHandlers <span class="token operator">=</span> <span class="token function">useCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> ready<span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * Trigger errorHandlers added via onError and throws the error as well\n   *\n   * <span class="token keyword">@param</span> <span class="token parameter">error</span> - error to throw\n   * <span class="token keyword">@param</span> <span class="token parameter">to</span> - location we were navigating to when the error happened\n   * <span class="token keyword">@param</span> <span class="token parameter">from</span> - location we were navigating from when the error happened\n   * <span class="token keyword">@returns</span> the error as a rejected promise\n   */</span>\n  <span class="token keyword">function</span> <span class="token function">triggerError</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">markAsReady</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> list <span class="token operator">=</span> errorHandlers<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handler</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;uncaught error during route navigation:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ready <span class="token operator">&amp;&amp;</span> currentRoute<span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      readyHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/**\n   * Mark the router as ready, resolving the promised returned by isReady(). Can\n   * only be called once, otherwise does nothing.\n   * <span class="token keyword">@param</span> <span class="token parameter">err</span> - optional error\n   */</span>\n  <span class="token keyword">function</span> <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token function">setupListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    readyHandlers\n      <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    readyHandlers<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Scroll behavior</span>\n  <span class="token keyword">function</span> <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> isFirstNavigation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollBehavior <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBrowser <span class="token operator">||</span> <span class="token operator">!</span>scrollBehavior<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> scrollPosition <span class="token operator">=</span>\n      <span class="token punctuation">(</span><span class="token operator">!</span>isPush <span class="token operator">&amp;&amp;</span> <span class="token function">getSavedScrollPosition</span><span class="token punctuation">(</span><span class="token function">getScrollKey</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n      <span class="token punctuation">(</span><span class="token punctuation">(</span>isFirstNavigation <span class="token operator">||</span> <span class="token operator">!</span>isPush<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        history<span class="token punctuation">.</span>state <span class="token operator">&amp;&amp;</span>\n        history<span class="token punctuation">.</span>state<span class="token punctuation">.</span>scroll<span class="token punctuation">)</span> <span class="token operator">||</span>\n      <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">scrollBehavior</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> scrollPosition<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> position <span class="token operator">&amp;&amp;</span> <span class="token function">scrollToPosition</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">triggerError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">go</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">delta</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> started<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> installedApps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>\n    currentRoute<span class="token punctuation">,</span>\n    addRoute<span class="token punctuation">,</span>\n    removeRoute<span class="token punctuation">,</span>\n    hasRoute<span class="token punctuation">,</span>\n    getRoutes<span class="token punctuation">,</span>\n    resolve<span class="token punctuation">,</span>\n    options<span class="token punctuation">,</span>\n    push<span class="token punctuation">,</span>\n    replace<span class="token punctuation">,</span>\n    go<span class="token punctuation">,</span>\n    <span class="token function-variable function">back</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">forward</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    beforeEach<span class="token operator">:</span> beforeGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n    beforeResolve<span class="token operator">:</span> beforeResolveGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n    afterEach<span class="token operator">:</span> afterGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n    onError<span class="token operator">:</span> errorHandlers<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n    isReady<span class="token punctuation">,</span>\n    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterLink&#39;</span><span class="token punctuation">,</span> RouterLink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span> RouterView<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$router <span class="token operator">=</span> router<span class="token punctuation">;</span>\n      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">,</span> <span class="token string">&#39;$route&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unref</span><span class="token punctuation">(</span>currentRoute<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// this initial navigation is only necessary on client, on server it doesn&#39;t</span>\n      <span class="token comment">// make sense because it will create an extra unnecessary navigation and could</span>\n      <span class="token comment">// lead to problems</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        isBrowser <span class="token operator">&amp;&amp;</span>\n        <span class="token comment">// used for the initial navigation client side to avoid pushing</span>\n        <span class="token comment">// multiple times when the router is used in multiple apps</span>\n        <span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span>\n        currentRoute<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// see above</span>\n        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token function">push</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Unexpected error when starting the router:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// @ts-expect-error: the key matches</span>\n        reactiveRoute<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">,</span> <span class="token function">reactive</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">,</span> currentRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> unmountApp <span class="token operator">=</span> app<span class="token punctuation">.</span>unmount<span class="token punctuation">;</span>\n      installedApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      app<span class="token punctuation">.</span><span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        installedApps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// the router is not attached to an app anymore</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>installedApps<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// invalidate the current navigation</span>\n          pendingLocation <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>\n          removeHistoryListener <span class="token operator">&amp;&amp;</span> <span class="token function">removeHistoryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>\n          started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n          ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">unmountApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">addDevtools</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> router<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> router<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span><span class="token parameter">guards</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> guards<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> leavingRecords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> updatingRecords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> enteringRecords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">,</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> recordFrom <span class="token operator">=</span> from<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> recordFrom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        updatingRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">else</span> leavingRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> recordTo <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>recordTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// the type doesn&#39;t matter because we are comparing per reference</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> recordTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        enteringRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordTo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Returns the router instance. Equivalent to using `$router` inside\n * templates.\n */</span>\n<span class="token keyword">function</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token doc-comment comment">/**\n * Returns the current route location. Equivalent to using `$route` inside\n * templates.\n */</span>\n<span class="token keyword">function</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span>\n  NavigationFailureType<span class="token punctuation">,</span>\n  RouterLink<span class="token punctuation">,</span>\n  RouterView<span class="token punctuation">,</span>\n  <span class="token constant">START_LOCATION_NORMALIZED</span> <span class="token keyword">as</span> <span class="token constant">START_LOCATION</span><span class="token punctuation">,</span>\n  createMemoryHistory<span class="token punctuation">,</span>\n  createRouter<span class="token punctuation">,</span>\n  createRouterMatcher<span class="token punctuation">,</span>\n  createWebHashHistory<span class="token punctuation">,</span>\n  createWebHistory<span class="token punctuation">,</span>\n  isNavigationFailure<span class="token punctuation">,</span>\n  matchedRouteKey<span class="token punctuation">,</span>\n  onBeforeRouteLeave<span class="token punctuation">,</span>\n  onBeforeRouteUpdate<span class="token punctuation">,</span>\n  parseQuery<span class="token punctuation">,</span>\n  routeLocationKey<span class="token punctuation">,</span>\n  routerKey<span class="token punctuation">,</span>\n  routerViewLocationKey<span class="token punctuation">,</span>\n  stringifyQuery<span class="token punctuation">,</span>\n  useLink<span class="token punctuation">,</span>\n  useRoute<span class="token punctuation">,</span>\n  useRouter<span class="token punctuation">,</span>\n  viewDepthKey<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>', 3);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var code_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { code_html as default };
