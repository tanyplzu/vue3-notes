import { e as createStaticVNode } from "./app.f1ef7422.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.5a098b48.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="usenamespace" tabindex="-1"><a class="header-anchor" href="#usenamespace" aria-hidden="true">#</a> useNamespace</h1><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> defaultNamespace <span class="token operator">=</span> <span class="token string">&#39;el&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> statePrefix <span class="token operator">=</span> <span class="token string">&#39;is-&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">_bem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  namespace<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  block<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  blockSuffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  element<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  modifier<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> cls <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">namespace</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>block<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>blockSuffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cls <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>blockSuffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cls <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>modifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cls <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>modifier<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> cls<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useNamespace</span> <span class="token operator">=</span> <span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> namespace <span class="token operator">=</span> <span class="token function">useGlobalConfig</span><span class="token punctuation">(</span><span class="token string">&#39;namespace&#39;</span><span class="token punctuation">,</span> defaultNamespace<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>blockSuffix <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> blockSuffix<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    element <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">m</span> <span class="token operator">=</span> <span class="token punctuation">(</span>modifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    modifier <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> modifier<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">be</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockSuffix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> element<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    blockSuffix <span class="token operator">&amp;&amp;</span> element\n      <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> blockSuffix<span class="token punctuation">,</span> element<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">em</span> <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> modifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    element <span class="token operator">&amp;&amp;</span> modifier\n      <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> modifier<span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">bm</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockSuffix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> modifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    blockSuffix <span class="token operator">&amp;&amp;</span> modifier\n      <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> blockSuffix<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> modifier<span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">bem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockSuffix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> element<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> modifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    blockSuffix <span class="token operator">&amp;&amp;</span> element <span class="token operator">&amp;&amp;</span> modifier\n      <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> blockSuffix<span class="token punctuation">,</span> element<span class="token punctuation">,</span> modifier<span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token keyword">is</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">?</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> name <span class="token operator">&amp;&amp;</span> state <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>statePrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// for css var</span>\n  <span class="token comment">// --el-xxx: value;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">cssVar</span> <span class="token operator">=</span> <span class="token punctuation">(</span>object<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> styles<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        styles<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>namespace<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> styles<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// with block</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">cssVarBlock</span> <span class="token operator">=</span> <span class="token punctuation">(</span>object<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> styles<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        styles<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>namespace<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>block<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> styles<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">cssVarName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>namespace<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">cssVarBlockName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>namespace<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>block<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    namespace<span class="token punctuation">,</span>\n    b<span class="token punctuation">,</span>\n    e<span class="token punctuation">,</span>\n    m<span class="token punctuation">,</span>\n    be<span class="token punctuation">,</span>\n    em<span class="token punctuation">,</span>\n    bm<span class="token punctuation">,</span>\n    bem<span class="token punctuation">,</span>\n    <span class="token keyword">is</span><span class="token punctuation">,</span>\n    <span class="token comment">// css</span>\n    cssVar<span class="token punctuation">,</span>\n    cssVarName<span class="token punctuation">,</span>\n    cssVarBlock<span class="token punctuation">,</span>\n    cssVarBlockName<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>bem \u683C\u5F0F\uFF1A <code>namespace-block-blockSuffix__element--modifier</code>\uFF0C<code>el-form-item__button--hover</code></p><ul><li>namespace: el</li><li>block: form</li><li>blockSuffix: item</li><li>button: element</li><li>modifier: hover</li></ul><p>namespace \u8FD4\u56DE\u7684\u65B9\u6CD5</p><ul><li>namespace: el,\u53EF\u81EA\u5B9A\u4E49</li><li>b: <code>namespace-block-blockSuffix</code> \u6216 <code>namespace-block</code></li><li>e: <code>namespace-block__element</code>,</li><li>m: <code>namespace-block--modifier</code>,</li><li>be\uFF1A <code>namespace-block-blockSuffix__element</code>,</li><li>em\uFF1A<code>namespace-block__element--modifier</code>,</li><li>bm\uFF1A<code>namespace-block-blockSuffix--modifier</code>,</li><li>bem: <code>namespace-block-blockSuffix__element--modifier</code>,</li><li>is: <code>is-link</code>,</li><li>cssVar,</li><li>cssVarName,</li><li>cssVarBlock,</li><li>cssVarBlockName,</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> globalConfig <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>ConfigProviderContext<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useGlobalConfig</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ConfigProviderContext<span class="token punctuation">,</span>\n  <span class="token constant">D</span> <span class="token keyword">extends</span> ConfigProviderContext<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span>\n  defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">D</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span>ConfigProviderContext<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token constant">D</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useGlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>ConfigProviderContext<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useGlobalConfig</span><span class="token punctuation">(</span>\n  key<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">keyof</span> ConfigProviderContext<span class="token punctuation">,</span>\n  defaultValue <span class="token operator">=</span> <span class="token keyword">undefined</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">?</span> <span class="token function">inject</span><span class="token punctuation">(</span>configProviderContextKey<span class="token punctuation">,</span> globalConfig<span class="token punctuation">)</span>\n    <span class="token operator">:</span> globalConfig<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> config<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">??</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>', 8);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var useNamespace_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { useNamespace_html as default };
