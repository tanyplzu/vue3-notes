import { e as createStaticVNode } from "./app.f1ef7422.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.5a098b48.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="form-item" tabindex="-1"><a class="header-anchor" href="#form-item" aria-hidden="true">#</a> form-item</h1><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>formItemRef<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-form-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>formItemClass<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LabelWrap</span>\n      <span class="token attr-name">:is-auto-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>labelStyle.width === <span class="token punctuation">&#39;</span>auto<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">:update-all</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elForm.labelWidth === <span class="token punctuation">&#39;</span>auto<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span>\n    <span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span>\n        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>label || $slots.label<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>labelFor<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-form-item__label<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>labelStyle<span class="token punctuation">&quot;</span></span>\n      <span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>label<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>currentLabel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n          {{ currentLabel }}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LabelWrap</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-form-item__content<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contentStyle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-zoom-in-top<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shouldShowError<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:error</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>validateMessage<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-form-item__error<span class="token punctuation">&quot;</span></span>\n            <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{\n              <span class="token punctuation">&#39;</span>el-form-item__error--inline<span class="token punctuation">&#39;</span>:\n                typeof inlineMessage === <span class="token punctuation">&#39;</span>boolean<span class="token punctuation">&#39;</span>\n                  ? inlineMessage\n                  : elForm.inlineMessage || false,\n            }<span class="token punctuation">&quot;</span></span>\n          <span class="token punctuation">&gt;</span></span>\n            {{ validateMessage }}\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  computed<span class="token punctuation">,</span>\n  defineComponent<span class="token punctuation">,</span>\n  getCurrentInstance<span class="token punctuation">,</span>\n  inject<span class="token punctuation">,</span>\n  onBeforeUnmount<span class="token punctuation">,</span>\n  onMounted<span class="token punctuation">,</span>\n  provide<span class="token punctuation">,</span>\n  reactive<span class="token punctuation">,</span>\n  ref<span class="token punctuation">,</span>\n  toRefs<span class="token punctuation">,</span>\n  watch<span class="token punctuation">,</span>\n  nextTick<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">NOOP</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> AsyncValidator <span class="token keyword">from</span> <span class="token string">&#39;async-validator&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> addUnit<span class="token punctuation">,</span> getPropByPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/util&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> isValidComponentSize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/validators&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> elFormItemKey<span class="token punctuation">,</span> elFormKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/tokens&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useSize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/hooks&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> LabelWrap <span class="token keyword">from</span> <span class="token string">&#39;./label-wrap&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> type <span class="token punctuation">{</span> PropType<span class="token punctuation">,</span> CSSProperties <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> type <span class="token punctuation">{</span> ComponentSize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/types&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> type <span class="token punctuation">{</span>\n  ElFormContext<span class="token punctuation">,</span>\n  ValidateFieldCallback<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/tokens&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> type <span class="token punctuation">{</span> FormItemRule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./form.type&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;ElFormItem&#39;</span><span class="token punctuation">,</span>\n  componentName<span class="token operator">:</span> <span class="token string">&#39;ElFormItem&#39;</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span>\n    LabelWrap<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n    label<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    labelWidth<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    prop<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    required<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">,</span> Array<span class="token punctuation">]</span> <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>FormItemRule <span class="token operator">|</span> FormItemRule<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    error<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    validateStatus<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token keyword">for</span><span class="token operator">:</span> String<span class="token punctuation">,</span>\n    inlineMessage<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Boolean<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    showMessage<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    size<span class="token operator">:</span> <span class="token punctuation">{</span>\n      type<span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>ComponentSize<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n      validator<span class="token operator">:</span> isValidComponentSize<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> elForm <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>elFormKey<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> ElFormContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> validateState <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> validateMessage <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> isValidationEnabled <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> computedLabelWidth <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> formItemRef <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> isNested <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> parent <span class="token operator">=</span> vm<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>type<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&#39;ElForm&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>type<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;ElFormItem&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> initialValue <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// \u8868\u5355\u57DF\u9A8C\u8BC1\u9519\u8BEF\u4FE1\u606F, \u8BBE\u7F6E\u8BE5\u503C\u4F1A\u4F7F\u8868\u5355\u9A8C\u8BC1\u72B6\u6001\u53D8\u4E3A error\uFF0C\u5E76\u663E\u793A\u8BE5\u9519\u8BEF\u4FE1\u606F</span>\n    <span class="token function">watch</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>error<span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        validateMessage<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>\n        validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">?</span> <span class="token string">&#39;error&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">watch</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>validateStatus<span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> labelFor <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>for <span class="token operator">||</span> props<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> labelStyle <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> ret<span class="token operator">:</span> CSSProperties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>elForm<span class="token punctuation">.</span>labelPosition <span class="token operator">===</span> <span class="token string">&#39;top&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> labelWidth <span class="token operator">=</span> <span class="token function">addUnit</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>labelWidth <span class="token operator">||</span> elForm<span class="token punctuation">.</span>labelWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>labelWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        ret<span class="token punctuation">.</span>width <span class="token operator">=</span> labelWidth<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> contentStyle <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> ret<span class="token operator">:</span> CSSProperties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>elForm<span class="token punctuation">.</span>labelPosition <span class="token operator">===</span> <span class="token string">&#39;top&#39;</span> <span class="token operator">||</span> elForm<span class="token punctuation">.</span>inline<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>label <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>props<span class="token punctuation">.</span>labelWidth <span class="token operator">&amp;&amp;</span> isNested<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> labelWidth <span class="token operator">=</span> <span class="token function">addUnit</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>labelWidth <span class="token operator">||</span> elForm<span class="token punctuation">.</span>labelWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>label <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>slots<span class="token punctuation">.</span>label<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        ret<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> labelWidth<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> fieldValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> model <span class="token operator">=</span> elForm<span class="token punctuation">.</span>model<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>model <span class="token operator">||</span> <span class="token operator">!</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">let</span> path <span class="token operator">=</span> props<span class="token punctuation">.</span>prop<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> isRequired <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">&amp;&amp;</span> rules<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>rule<span class="token punctuation">.</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> required<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> sizeClass <span class="token operator">=</span> <span class="token function">useSize</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> formItem<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">validate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n      <span class="token parameter">trigger<span class="token operator">:</span> string<span class="token punctuation">,</span>\n      callback<span class="token operator">:</span> ValidateFieldCallback <span class="token operator">=</span> <span class="token constant">NOOP</span></span>\n    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValidationEnabled<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token function">getFilteredRule</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>rules <span class="token operator">||</span> rules<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>required <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;validating&#39;</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> descriptor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">&amp;&amp;</span> rules<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">delete</span> rule<span class="token punctuation">.</span>trigger<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      descriptor<span class="token punctuation">[</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> rules<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncValidator</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      model<span class="token punctuation">[</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> fieldValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token punctuation">{</span> firstFields<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">errors<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>errors <span class="token operator">?</span> <span class="token string">&#39;success&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">;</span>\n        validateMessage<span class="token punctuation">.</span>value <span class="token operator">=</span> errors\n          <span class="token operator">?</span> errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is required</span><span class="token template-punctuation string">`</span></span>\n          <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n        <span class="token comment">// fix: #3860 after version 3.5.2, async-validator also return fields if validation fails</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span>validateMessage<span class="token punctuation">.</span>value<span class="token punctuation">,</span> errors <span class="token operator">?</span> fields <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        elForm<span class="token punctuation">.</span>emit<span class="token operator">?.</span><span class="token punctuation">(</span>\n          <span class="token string">&#39;validate&#39;</span><span class="token punctuation">,</span>\n          props<span class="token punctuation">.</span>prop<span class="token punctuation">,</span>\n          <span class="token operator">!</span>errors<span class="token punctuation">,</span>\n          validateMessage<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token keyword">null</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">clearValidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n      validateMessage<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">resetField</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> model <span class="token operator">=</span> elForm<span class="token punctuation">.</span>model<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> value <span class="token operator">=</span> fieldValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token keyword">let</span> path <span class="token operator">=</span> props<span class="token punctuation">.</span>prop<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> prop <span class="token operator">=</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        prop<span class="token punctuation">.</span>o<span class="token punctuation">[</span>prop<span class="token punctuation">.</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        prop<span class="token punctuation">.</span>o<span class="token punctuation">[</span>prop<span class="token punctuation">.</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">clearValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">getRules</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> formRules <span class="token operator">=</span> elForm<span class="token punctuation">.</span>rules<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> selfRules <span class="token operator">=</span> props<span class="token punctuation">.</span>rules<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> requiredRule <span class="token operator">=</span>\n        props<span class="token punctuation">.</span>required <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>props<span class="token punctuation">.</span>required <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">const</span> prop <span class="token operator">=</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>formRules<span class="token punctuation">,</span> props<span class="token punctuation">.</span>prop <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> normalizedRule <span class="token operator">=</span> formRules\n        <span class="token operator">?</span> prop<span class="token punctuation">.</span>o<span class="token punctuation">[</span>props<span class="token punctuation">.</span>prop <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> prop<span class="token punctuation">.</span>v\n        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>selfRules <span class="token operator">||</span> normalizedRule <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>requiredRule<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">getFilteredRule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">trigger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> rules\n        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rule<span class="token punctuation">.</span>trigger <span class="token operator">||</span> trigger <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span>trigger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> rule<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> rule<span class="token punctuation">.</span>trigger <span class="token operator">===</span> trigger<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>rule <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">evaluateValidationEnabled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      isValidationEnabled<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>length<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">updateComputedLabelWidth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">width<span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      computedLabelWidth<span class="token punctuation">.</span>value <span class="token operator">=</span> width <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> elFormItem <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      size<span class="token operator">:</span> sizeClass<span class="token punctuation">,</span>\n      validateState<span class="token punctuation">,</span>\n      $el<span class="token operator">:</span> formItemRef<span class="token punctuation">,</span>\n      evaluateValidationEnabled<span class="token punctuation">,</span>\n      resetField<span class="token punctuation">,</span>\n      clearValidate<span class="token punctuation">,</span>\n      validate<span class="token punctuation">,</span>\n      updateComputedLabelWidth<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        elForm<span class="token operator">?.</span><span class="token function">addField</span><span class="token punctuation">(</span>elFormItem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">const</span> value <span class="token operator">=</span> fieldValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        initialValue <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>value<span class="token punctuation">]</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>\n\n        <span class="token function">evaluateValidationEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      elForm<span class="token operator">?.</span><span class="token function">removeField</span><span class="token punctuation">(</span>elFormItem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">provide</span><span class="token punctuation">(</span>elFormItemKey<span class="token punctuation">,</span> elFormItem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> formItemClass <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token string">&#39;el-form-item--feedback&#39;</span><span class="token operator">:</span> elForm<span class="token punctuation">.</span>statusIcon<span class="token punctuation">,</span>\n        <span class="token string">&#39;is-error&#39;</span><span class="token operator">:</span> validateState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;is-validating&#39;</span><span class="token operator">:</span> validateState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;validating&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;is-success&#39;</span><span class="token operator">:</span> validateState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;is-required&#39;</span><span class="token operator">:</span> isRequired<span class="token punctuation">.</span>value <span class="token operator">||</span> props<span class="token punctuation">.</span>required<span class="token punctuation">,</span>\n        <span class="token string">&#39;is-no-asterisk&#39;</span><span class="token operator">:</span> elForm<span class="token punctuation">.</span>hideRequiredAsterisk<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      sizeClass<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">el-form-item--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sizeClass<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> shouldShowError <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        validateState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;error&#39;</span> <span class="token operator">&amp;&amp;</span>\n        props<span class="token punctuation">.</span>showMessage <span class="token operator">&amp;&amp;</span>\n        elForm<span class="token punctuation">.</span>showMessage\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> currentLabel <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>label <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>elForm<span class="token punctuation">.</span>labelSuffix <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      formItemRef<span class="token punctuation">,</span>\n      formItemClass<span class="token punctuation">,</span>\n      shouldShowError<span class="token punctuation">,</span>\n      elForm<span class="token punctuation">,</span>\n      labelStyle<span class="token punctuation">,</span>\n      contentStyle<span class="token punctuation">,</span>\n      validateMessage<span class="token punctuation">,</span>\n      labelFor<span class="token punctuation">,</span>\n      resetField<span class="token punctuation">,</span>\n      clearValidate<span class="token punctuation">,</span>\n      currentLabel<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>', 2);
function _sfc_render(_ctx, _cache) {
  return _hoisted_1;
}
var formItem_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { formItem_html as default };
