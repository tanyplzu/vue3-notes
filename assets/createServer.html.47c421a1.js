import { r as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, b as createVNode, w as withCtx, F as Fragment, d as createTextVNode, e as createStaticVNode } from "./app.11f00557.js";
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "createserver",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#createserver",
    "aria-hidden": "true"
  }, "#"),
  /* @__PURE__ */ createTextVNode(" createServer")
], -1);
const _hoisted_2 = { class: "table-of-contents" };
const _hoisted_3 = /* @__PURE__ */ createTextVNode("createServer");
const _hoisted_4 = /* @__PURE__ */ createTextVNode("ViteDevServer");
const _hoisted_5 = /* @__PURE__ */ createTextVNode("\u4E00\u4E2A\u4F8B\u5B50");
const _hoisted_6 = /* @__PURE__ */ createStaticVNode('<h2 id="createserver-1" tabindex="-1"><a class="header-anchor" href="#createserver-1" aria-hidden="true">#</a> createServer</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span>\n  <span class="token parameter">inlineConfig<span class="token operator">:</span> InlineConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span>inlineConfig<span class="token punctuation">,</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// \u9879\u76EE\u6839\u76EE\u5F55\uFF08index.html \u6587\u4EF6\u6240\u5728\u7684\u4F4D\u7F6E\uFF09\u3002\u53EF\u4EE5\u662F\u4E00\u4E2A\u7EDD\u5BF9\u8DEF\u5F84\uFF0C\u6216\u8005\u4E00\u4E2A\u76F8\u5BF9\u4E8E\u8BE5\u914D\u7F6E\u6587\u4EF6\u672C\u8EAB\u7684\u8DEF\u5F84\u3002</span>\n  <span class="token keyword">const</span> root <span class="token operator">=</span> config<span class="token punctuation">.</span>root\n  <span class="token keyword">const</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span>server\n  <span class="token keyword">const</span> httpsOptions <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveHttpsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> middlewareMode <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>middlewareMode <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    middlewareMode <span class="token operator">=</span> <span class="token string">&#39;ssr&#39;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> middlewares <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Connect<span class="token punctuation">.</span>Server\n  <span class="token keyword">const</span> httpServer <span class="token operator">=</span> middlewareMode\n    <span class="token operator">?</span> <span class="token keyword">null</span>\n    <span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">resolveHttpServer</span><span class="token punctuation">(</span>serverConfig<span class="token punctuation">,</span> middlewares<span class="token punctuation">,</span> httpsOptions<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token function">createWebSocketServer</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> config<span class="token punctuation">,</span> httpsOptions<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> ignored <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>watchOptions <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig<span class="token punctuation">.</span>watch <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// \u4F7F\u7528chokidar\u76D1\u63A7root\u76EE\u5F55\uFF0C\u5FFD\u7565node_modules\u3001.git</span>\n  <span class="token keyword">const</span> watcher <span class="token operator">=</span> chokidar<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    ignored<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&#39;**/node_modules/**&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;**/.git/**&#39;</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>ignored<span class="token punctuation">)</span> <span class="token operator">?</span> ignored <span class="token operator">:</span> <span class="token punctuation">[</span>ignored<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    ignoreInitial<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    ignorePermissionErrors<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    disableGlobbing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>watchOptions\n  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> FSWatcher\n\n  <span class="token keyword">const</span> plugins <span class="token operator">=</span> config<span class="token punctuation">.</span>plugins\n  <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createPluginContainer</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> watcher<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> moduleGraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleGraph</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> closeHttpServer <span class="token operator">=</span> <span class="token function">createServerCloseFn</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">)</span>\n\n  <span class="token comment">// eslint-disable-next-line prefer-const</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">exitProcess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n\n  <span class="token keyword">const</span> server<span class="token operator">:</span> ViteDevServer <span class="token operator">=</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">,</span>\n    middlewares<span class="token punctuation">,</span>\n    <span class="token keyword">get</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      config<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ViteDevServer.app is deprecated. Use ViteDevServer.middlewares instead.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n      <span class="token keyword">return</span> middlewares\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    httpServer<span class="token punctuation">,</span>\n    watcher<span class="token punctuation">,</span>\n    pluginContainer<span class="token operator">:</span> container<span class="token punctuation">,</span>\n    ws<span class="token punctuation">,</span>\n    moduleGraph<span class="token punctuation">,</span>\n    transformWithEsbuild<span class="token punctuation">,</span>\n    <span class="token function">transformRequest</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> server<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    transformIndexHtml<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// to be immediately set</span>\n    <span class="token function">ssrLoadModule</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>server<span class="token punctuation">.</span>_ssrExternals<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        server<span class="token punctuation">.</span>_ssrExternals <span class="token operator">=</span> <span class="token function">resolveSSRExternal</span><span class="token punctuation">(</span>\n          config<span class="token punctuation">,</span>\n          server<span class="token punctuation">.</span>_optimizeDepsMetadata\n            <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>_optimizeDepsMetadata<span class="token punctuation">.</span>optimized<span class="token punctuation">)</span>\n            <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token function">ssrLoadModule</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> server<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">ssrFixStacktrace</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> stacktrace <span class="token operator">=</span> <span class="token function">ssrRewriteStacktrace</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">,</span> moduleGraph<span class="token punctuation">)</span>\n        <span class="token function">rebindErrorStacktrace</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> stacktrace<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">port<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span> isRestart<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">startServer</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> port<span class="token punctuation">,</span> isRestart<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">async</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      process<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;SIGTERM&#39;</span><span class="token punctuation">,</span> exitProcess<span class="token punctuation">)</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span> <span class="token operator">!==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> exitProcess<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n        watcher<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        container<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">closeHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">printUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>httpServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">printHttpServerUrls</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;cannot print server URLs in middleware mode.&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    _optimizeDepsMetadata<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    _ssrExternals<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    _globImporters<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    _isRunningOptimizer<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    _registerMissingImport<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    _pendingReload<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    _pendingRequests<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  server<span class="token punctuation">.</span>transformIndexHtml <span class="token operator">=</span> <span class="token function">createDevHtmlTransformFn</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>\n\n  <span class="token function-variable function">exitProcess</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  process<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;SIGTERM&#39;</span><span class="token punctuation">,</span> exitProcess<span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span> <span class="token operator">!==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> exitProcess<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    file <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n    <span class="token comment">// invalidate module graph cache on file change</span>\n    moduleGraph<span class="token punctuation">.</span><span class="token function">onFileChange</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>serverConfig<span class="token punctuation">.</span>hmr <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> <span class="token function">handleHMRUpdate</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> server<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          type<span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>\n          err<span class="token operator">:</span> <span class="token function">prepareError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;unlink&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> httpServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    httpServer<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;listening&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// update actual port since this may be different from initial value</span>\n      serverConfig<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token punctuation">(</span>httpServer<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> AddressInfo<span class="token punctuation">)</span><span class="token punctuation">.</span>port\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// apply server configuration hooks from plugins</span>\n  <span class="token keyword">const</span> postHooks<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>configureServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      postHooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">configureServer</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Internal middlewares ------------------------------------------------------</span>\n\n  <span class="token comment">// request timer</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">timeMiddleware</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// cors (enabled by default)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> cors <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>cors <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">corsMiddleware</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> cors <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> cors<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// proxy</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> proxy <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// \u4E3A\u5F00\u53D1\u670D\u52A1\u5668\u914D\u7F6E\u4EE3\u7406\u81EA\u5B9A\u4E49\u4EE3\u7406\u89C4\u5219</span>\n    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">proxyMiddleware</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// base</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>base <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">baseMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// open in editor support</span>\n  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/__open-in-editor&#39;</span><span class="token punctuation">,</span> <span class="token function">launchEditorMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// hmr reconnect ping</span>\n  <span class="token comment">// Keep the named function. The name is visible in debug logs via `DEBUG=connect:dispatcher ...`</span>\n  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/__vite_ping&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">viteHMRPingMiddleware</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// serve static files under /public</span>\n  <span class="token comment">// this applies before the transform middleware so that these files are served</span>\n  <span class="token comment">// as-is without transforms.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>publicDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">servePublicMiddleware</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>publicDir<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// main transform middleware</span>\n  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">transformMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// serve static files</span>\n  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serveRawFsMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serveStaticMiddleware</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// spa fallback</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">||</span> middlewareMode <span class="token operator">===</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">spaFallbackMiddleware</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// run post config hooks</span>\n  <span class="token comment">// This is applied before the html middleware so that user middleware can</span>\n  <span class="token comment">// serve custom content instead of index.html.</span>\n  postHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">||</span> middlewareMode <span class="token operator">===</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// transform index.html</span>\n    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">indexHtmlMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// handle 404s</span>\n    <span class="token comment">// Keep the named function. The name is visible in debug logs via `DEBUG=connect:dispatcher ...`</span>\n    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">vite404Middleware</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>\n      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// error handler</span>\n  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">errorMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span>middlewareMode<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">runOptimize</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>cacheDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      server<span class="token punctuation">.</span>_isRunningOptimizer <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        server<span class="token punctuation">.</span>_optimizeDepsMetadata <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">optimizeDeps</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        server<span class="token punctuation">.</span>_isRunningOptimizer <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n      server<span class="token punctuation">.</span>_registerMissingImport <span class="token operator">=</span> <span class="token function">createMissingImporterRegisterFn</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> httpServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> isOptimized <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token comment">// overwrite listen to run optimizer before server start</span>\n    <span class="token keyword">const</span> listen <span class="token operator">=</span> httpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">)</span>\n    httpServer<span class="token punctuation">.</span>listen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">port<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isOptimized<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token keyword">await</span> <span class="token function">runOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          isOptimized <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          httpServer<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>\n          <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span> <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> <span class="token function">runOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> server\n<span class="token punctuation">}</span>\n</code></pre></div>', 2);
const _hoisted_8 = /* @__PURE__ */ createBaseVNode("li", null, "connect :\u9488\u5BF9 http \u670D\u52A1\u7684\u4E2D\u95F4\u4EF6\u6A21\u578B\uFF0C\u7C7B\u4F3C koa", -1);
const _hoisted_9 = /* @__PURE__ */ createBaseVNode("li", null, "chokidar:\u7CBE\u7B80\u7684\u8DE8\u7AEF\u6587\u4EF6\u76D1\u63A7\u5E93", -1);
const _hoisted_10 = {
  href: "https://github.com/acornjs/acorn",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_11 = /* @__PURE__ */ createTextVNode("acorn");
const _hoisted_12 = /* @__PURE__ */ createTextVNode(": js \u8BED\u6CD5\u89E3\u6790\u5668");
const _hoisted_13 = /* @__PURE__ */ createBaseVNode("li", null, "magic-string: js \u6E90\u7801 string \u64CD\u4F5C pkg", -1);
const _hoisted_14 = /* @__PURE__ */ createStaticVNode('<p>\u8FD4\u56DE\u4E00\u4E2A server\uFF0C\u5177\u4F53\u89E3\u91CA\u5728 ViteDevServer \u63A5\u53E3\u4E2D\u3002</p><h2 id="vitedevserver" tabindex="-1"><a class="header-anchor" href="#vitedevserver" aria-hidden="true">#</a> ViteDevServer</h2><p>vite \u5F00\u53D1\u670D\u52A1\u5668</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ViteDevServer</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * \u88AB\u89E3\u6790\u7684 vite \u914D\u7F6E\u5BF9\u8C61\n   */</span>\n  config<span class="token operator">:</span> ResolvedConfig<span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * \u4E00\u4E2A connect \u5E94\u7528\u5B9E\u4F8B\n   * - \u53EF\u4EE5\u7528\u4E8E\u5C06\u81EA\u5B9A\u4E49\u4E2D\u95F4\u4EF6\u9644\u52A0\u5230\u5F00\u53D1\u670D\u52A1\u5668\u3002\n   * - \u8FD8\u53EF\u4EE5\u7528\u4F5C\u81EA\u5B9A\u4E49http\u670D\u52A1\u5668\u7684\u5904\u7406\u51FD\u6570\n      \u6216\u4F5C\u4E3A\u4E2D\u95F4\u4EF6\u7528\u4E8E\u4EFB\u4F55 connect \u98CE\u683C\u7684 Node.js \u6846\u67B6\n   *\n   * https://github.com/senchalabs/connect#use-middleware\n   */</span>\n  middlewares<span class="token operator">:</span> Connect<span class="token punctuation">.</span>Server<span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * \u672C\u673A node http \u670D\u52A1\u5668\u5B9E\u4F8B\n   */</span>\n  httpServer<span class="token operator">:</span> http<span class="token punctuation">.</span>Server <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * chokidar \u76D1\u542C\u5668\u5B9E\u4F8B\n   * https://github.com/paulmillr/chokidar#api\n   */</span>\n  watcher<span class="token operator">:</span> FSWatcher<span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * web socket \u670D\u52A1\u5668\uFF0C\u5E26\u6709 `send(payload)` \u65B9\u6CD5\n   */</span>\n  ws<span class="token operator">:</span> WebSocketServer<span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * Rollup \u63D2\u4EF6\u5BB9\u5668\uFF0C\u53EF\u4EE5\u9488\u5BF9\u7ED9\u5B9A\u6587\u4EF6\u8FD0\u884C\u63D2\u4EF6\u94A9\u5B50\n   */</span>\n  pluginContainer<span class="token operator">:</span> PluginContainer<span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * \u8DDF\u8E2A\u5BFC\u5165\u5173\u7CFB\u3001url \u5230\u6587\u4EF6\u6620\u5C04\u548C hmr \u72B6\u6001\u7684\u6A21\u5757\u56FE\u3002\n   */</span>\n  <span class="token keyword">module</span>Graph<span class="token operator">:</span> ModuleGraph<span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * \u4EE5\u4EE3\u7801\u65B9\u5F0F\u89E3\u6790\u3001\u52A0\u8F7D\u548C\u8F6C\u6362 url \u5E76\u83B7\u53D6\u7ED3\u679C\n   * \u800C\u4E0D\u9700\u8981\u901A\u8FC7 http \u8BF7\u6C42\u7BA1\u9053\u3002\n   */</span>\n  <span class="token function">transformRequest</span><span class="token punctuation">(</span>\n    url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    options<span class="token operator">?</span><span class="token operator">:</span> TransformOptions\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TransformResult <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * \u542F\u52A8\u670D\u52A1\u5668\n   */</span>\n  <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> isRestart<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token doc-comment comment">/**\n   * \u505C\u6B62\u670D\u52A1\u5668\n   */</span>\n  <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="\u4E00\u4E2A\u4F8B\u5B50" tabindex="-1"><a class="header-anchor" href="#\u4E00\u4E2A\u4F8B\u5B50" aria-hidden="true">#</a> \u4E00\u4E2A\u4F8B\u5B50</h2><p>\u4E0B\u9762\u662F\u4E00\u4E2A createServer \u7684\u4F8B\u5B50\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createServer<span class="token operator">:</span> createViteServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u4EE5\u4E2D\u95F4\u4EF6\u6A21\u5F0F\u521B\u5EFA vite \u5E94\u7528\uFF0C\u8FD9\u5C06\u7981\u7528 Vite \u81EA\u8EAB\u7684 HTML \u670D\u52A1\u903B\u8F91</span>\n  <span class="token comment">// \u5E76\u8BA9\u4E0A\u7EA7\u670D\u52A1\u5668\u63A5\u7BA1\u63A7\u5236</span>\n  <span class="token keyword">const</span> vite <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createViteServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    server<span class="token operator">:</span> <span class="token punctuation">{</span> middlewareMode<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// \u4F7F\u7528 vite \u7684 Connect \u5B9E\u4F8B\u4F5C\u4E3A\u4E2D\u95F4\u4EF6</span>\n  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vite<span class="token punctuation">.</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// \u670D\u52A1 index.html - \u4E0B\u9762\u6211\u4EEC\u6765\u5904\u7406\u8FD9\u4E2A\u95EE\u9898</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>', 7);
function _sfc_render(_ctx, _cache) {
  const _component_RouterLink = resolveComponent("RouterLink");
  const _component_OutboundLink = resolveComponent("OutboundLink");
  return openBlock(), createElementBlock(Fragment, null, [
    _hoisted_1,
    createBaseVNode("nav", _hoisted_2, [
      createBaseVNode("ul", null, [
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#createserver-1" }, {
            default: withCtx(() => [
              _hoisted_3
            ]),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#vitedevserver" }, {
            default: withCtx(() => [
              _hoisted_4
            ]),
            _: 1
          })
        ]),
        createBaseVNode("li", null, [
          createVNode(_component_RouterLink, { to: "#\u4E00\u4E2A\u4F8B\u5B50" }, {
            default: withCtx(() => [
              _hoisted_5
            ]),
            _: 1
          })
        ])
      ])
    ]),
    _hoisted_6,
    createBaseVNode("ul", null, [
      _hoisted_8,
      _hoisted_9,
      createBaseVNode("li", null, [
        createBaseVNode("a", _hoisted_10, [
          _hoisted_11,
          createVNode(_component_OutboundLink)
        ]),
        _hoisted_12
      ]),
      _hoisted_13
    ]),
    _hoisted_14
  ], 64);
}
_sfc_main.render = _sfc_render;
export { _sfc_main as default };
