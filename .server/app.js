"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
var vueRouter = require("vue-router");
var vue = require("vue");
var core = require("@vueuse/core");
var shared = require("@vuepress/shared");
var serverRenderer = require("vue/server-renderer");
const ClientOnly = vue.defineComponent({
  setup(_, ctx) {
    const isMounted = vue.ref(false);
    vue.onMounted(() => {
      isMounted.value = true;
    });
    return () => {
      var _a, _b;
      return isMounted.value ? (_b = (_a = ctx.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a) : null;
    };
  }
});
const pagesComponents = {
  "v-8daa1a0e": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$z;
  })),
  "v-00c059b2": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$x;
  })),
  "v-39d4ce89": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return tree_html$2;
  })),
  "v-c15a97d6": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return rollup_html$2;
  })),
  "v-5dd4be94": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return skill_html$2;
  })),
  "v-151eacea": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$v;
  })),
  "v-303438b4": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return Diff_html$2;
  })),
  "v-2c1b37ee": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$t;
  })),
  "v-1ab18016": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return vModel_html$2;
  })),
  "v-157350f2": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$r;
  })),
  "v-22bb3a7b": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return application_html$8;
  })),
  "v-0f6b9545": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return vueDevServer_html$2;
  })),
  "v-5db951d1": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return _______html$2;
  })),
  "v-d618035e": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return JSX_html$2;
  })),
  "v-29184f47": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$p;
  })),
  "v-bbe7f31a": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return Vue3Api_html$2;
  })),
  "v-508a9cca": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return auth_html$2;
  })),
  "v-3c9456e8": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return reactivityAPI_html$2;
  })),
  "v-a42c4298": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return vue3Project_html$2;
  })),
  "v-7f6e4968": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return vue3optimize_html$2;
  })),
  "v-3db83299": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$n;
  })),
  "v-2dedee22": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return application_html$6;
  })),
  "v-6907e510": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return sourceCode_html$5;
  })),
  "v-4244654e": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$l;
  })),
  "v-d7f3ee3c": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return application_html$4;
  })),
  "v-f66c67fe": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return browserRouter_html$2;
  })),
  "v-00fc65d3": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return code_html$2;
  })),
  "v-438f331a": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return miniVueRouter_html$2;
  })),
  "v-08959ab8": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return sourceCode_html$3;
  })),
  "v-15788f64": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$j;
  })),
  "v-f5df4e28": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return miniVuex_html$2;
  })),
  "v-81d9f8bc": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return plugin_html$2;
  })),
  "v-c1f44ade": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return q_a_html$2;
  })),
  "v-73238b6e": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return sourceCode_v3_html$2;
  })),
  "v-6fb9da30": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return sourceCode_v4_html$2;
  })),
  "v-dad5dad4": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return vuexCode_html$2;
  })),
  "v-4ffb9324": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return useAttrs_html$2;
  })),
  "v-592d0456": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return useNamespace_html$2;
  })),
  "v-1f48a459": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return BEM_html$2;
  })),
  "v-b8062c82": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return scss_html$2;
  })),
  "v-5801bab2": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return buildProps_html$2;
  })),
  "v-1b208c8b": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return RenderFunction_html$2;
  })),
  "v-312af42a": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return creatingAMiniVue_html$2;
  })),
  "v-5945442a": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return miniVue_html$2;
  })),
  "v-154ce3f6": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return useFetch_html$2;
  })),
  "v-7359a5bc": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return setup_html$2;
  })),
  "v-57862f7c": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$h;
  })),
  "v-4800f6cd": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return computed_html$5;
  })),
  "v-b3dbcc8c": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return reactivity_cjs_html$2;
  })),
  "v-f2b64710": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return reactivity_html$2;
  })),
  "v-38a137ae": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return watch_html$5;
  })),
  "v-024bb864": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return componentRender_html$2;
  })),
  "v-5dd6cdc6": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return createAppAPI_html$2;
  })),
  "v-d8fea8c4": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$f;
  })),
  "v-16a9f525": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return createServer_html$2;
  })),
  "v-6818c89c": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return http_html$2;
  })),
  "v-2d7f1302": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return indexHtmlMiddleware_html$2;
  })),
  "v-b5fb9518": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return computed_html$3;
  })),
  "v-78e6b6ba": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return proxy_html$2;
  })),
  "v-2c83fee2": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return watch_html$3;
  })),
  "v-256286d0": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return index_html$d;
  })),
  "v-07e8239c": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return asyncValidator_html$2;
  })),
  "v-6b1ab37e": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return formItem_html$2;
  })),
  "v-3095eea6": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return rules_html$2;
  })),
  "v-73407006": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return inputCode_html$2;
  })),
  "v-0233039b": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return input_html$2;
  })),
  "v-fef4e608": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return tableColumn_html$2;
  })),
  "v-46db3393": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return table_html$2;
  })),
  "v-50482b4f": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return util_html$2;
  })),
  "v-3706649a": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return _404_html$2;
  }))
};
const pagesData$1 = {
  "v-8daa1a0e": () => Promise.resolve().then(function() {
    return index_html$b;
  }).then(({ data: data2 }) => data2),
  "v-00c059b2": () => Promise.resolve().then(function() {
    return index_html$a;
  }).then(({ data: data2 }) => data2),
  "v-39d4ce89": () => Promise.resolve().then(function() {
    return tree_html;
  }).then(({ data: data2 }) => data2),
  "v-c15a97d6": () => Promise.resolve().then(function() {
    return rollup_html;
  }).then(({ data: data2 }) => data2),
  "v-5dd4be94": () => Promise.resolve().then(function() {
    return skill_html;
  }).then(({ data: data2 }) => data2),
  "v-151eacea": () => Promise.resolve().then(function() {
    return index_html$9;
  }).then(({ data: data2 }) => data2),
  "v-303438b4": () => Promise.resolve().then(function() {
    return Diff_html;
  }).then(({ data: data2 }) => data2),
  "v-2c1b37ee": () => Promise.resolve().then(function() {
    return index_html$8;
  }).then(({ data: data2 }) => data2),
  "v-1ab18016": () => Promise.resolve().then(function() {
    return vModel_html;
  }).then(({ data: data2 }) => data2),
  "v-157350f2": () => Promise.resolve().then(function() {
    return index_html$7;
  }).then(({ data: data2 }) => data2),
  "v-22bb3a7b": () => Promise.resolve().then(function() {
    return application_html$2;
  }).then(({ data: data2 }) => data2),
  "v-0f6b9545": () => Promise.resolve().then(function() {
    return vueDevServer_html;
  }).then(({ data: data2 }) => data2),
  "v-5db951d1": () => Promise.resolve().then(function() {
    return _______html;
  }).then(({ data: data2 }) => data2),
  "v-d618035e": () => Promise.resolve().then(function() {
    return JSX_html;
  }).then(({ data: data2 }) => data2),
  "v-29184f47": () => Promise.resolve().then(function() {
    return index_html$6;
  }).then(({ data: data2 }) => data2),
  "v-bbe7f31a": () => Promise.resolve().then(function() {
    return Vue3Api_html;
  }).then(({ data: data2 }) => data2),
  "v-508a9cca": () => Promise.resolve().then(function() {
    return auth_html;
  }).then(({ data: data2 }) => data2),
  "v-3c9456e8": () => Promise.resolve().then(function() {
    return reactivityAPI_html;
  }).then(({ data: data2 }) => data2),
  "v-a42c4298": () => Promise.resolve().then(function() {
    return vue3Project_html;
  }).then(({ data: data2 }) => data2),
  "v-7f6e4968": () => Promise.resolve().then(function() {
    return vue3optimize_html;
  }).then(({ data: data2 }) => data2),
  "v-3db83299": () => Promise.resolve().then(function() {
    return index_html$5;
  }).then(({ data: data2 }) => data2),
  "v-2dedee22": () => Promise.resolve().then(function() {
    return application_html$1;
  }).then(({ data: data2 }) => data2),
  "v-6907e510": () => Promise.resolve().then(function() {
    return sourceCode_html$1;
  }).then(({ data: data2 }) => data2),
  "v-4244654e": () => Promise.resolve().then(function() {
    return index_html$4;
  }).then(({ data: data2 }) => data2),
  "v-d7f3ee3c": () => Promise.resolve().then(function() {
    return application_html;
  }).then(({ data: data2 }) => data2),
  "v-f66c67fe": () => Promise.resolve().then(function() {
    return browserRouter_html;
  }).then(({ data: data2 }) => data2),
  "v-00fc65d3": () => Promise.resolve().then(function() {
    return code_html;
  }).then(({ data: data2 }) => data2),
  "v-438f331a": () => Promise.resolve().then(function() {
    return miniVueRouter_html;
  }).then(({ data: data2 }) => data2),
  "v-08959ab8": () => Promise.resolve().then(function() {
    return sourceCode_html;
  }).then(({ data: data2 }) => data2),
  "v-15788f64": () => Promise.resolve().then(function() {
    return index_html$3;
  }).then(({ data: data2 }) => data2),
  "v-f5df4e28": () => Promise.resolve().then(function() {
    return miniVuex_html;
  }).then(({ data: data2 }) => data2),
  "v-81d9f8bc": () => Promise.resolve().then(function() {
    return plugin_html;
  }).then(({ data: data2 }) => data2),
  "v-c1f44ade": () => Promise.resolve().then(function() {
    return q_a_html;
  }).then(({ data: data2 }) => data2),
  "v-73238b6e": () => Promise.resolve().then(function() {
    return sourceCode_v3_html;
  }).then(({ data: data2 }) => data2),
  "v-6fb9da30": () => Promise.resolve().then(function() {
    return sourceCode_v4_html;
  }).then(({ data: data2 }) => data2),
  "v-dad5dad4": () => Promise.resolve().then(function() {
    return vuexCode_html;
  }).then(({ data: data2 }) => data2),
  "v-4ffb9324": () => Promise.resolve().then(function() {
    return useAttrs_html;
  }).then(({ data: data2 }) => data2),
  "v-592d0456": () => Promise.resolve().then(function() {
    return useNamespace_html;
  }).then(({ data: data2 }) => data2),
  "v-1f48a459": () => Promise.resolve().then(function() {
    return BEM_html;
  }).then(({ data: data2 }) => data2),
  "v-b8062c82": () => Promise.resolve().then(function() {
    return scss_html;
  }).then(({ data: data2 }) => data2),
  "v-5801bab2": () => Promise.resolve().then(function() {
    return buildProps_html;
  }).then(({ data: data2 }) => data2),
  "v-1b208c8b": () => Promise.resolve().then(function() {
    return RenderFunction_html;
  }).then(({ data: data2 }) => data2),
  "v-312af42a": () => Promise.resolve().then(function() {
    return creatingAMiniVue_html;
  }).then(({ data: data2 }) => data2),
  "v-5945442a": () => Promise.resolve().then(function() {
    return miniVue_html;
  }).then(({ data: data2 }) => data2),
  "v-154ce3f6": () => Promise.resolve().then(function() {
    return useFetch_html;
  }).then(({ data: data2 }) => data2),
  "v-7359a5bc": () => Promise.resolve().then(function() {
    return setup_html;
  }).then(({ data: data2 }) => data2),
  "v-57862f7c": () => Promise.resolve().then(function() {
    return index_html$2;
  }).then(({ data: data2 }) => data2),
  "v-4800f6cd": () => Promise.resolve().then(function() {
    return computed_html$1;
  }).then(({ data: data2 }) => data2),
  "v-b3dbcc8c": () => Promise.resolve().then(function() {
    return reactivity_cjs_html;
  }).then(({ data: data2 }) => data2),
  "v-f2b64710": () => Promise.resolve().then(function() {
    return reactivity_html;
  }).then(({ data: data2 }) => data2),
  "v-38a137ae": () => Promise.resolve().then(function() {
    return watch_html$1;
  }).then(({ data: data2 }) => data2),
  "v-024bb864": () => Promise.resolve().then(function() {
    return componentRender_html;
  }).then(({ data: data2 }) => data2),
  "v-5dd6cdc6": () => Promise.resolve().then(function() {
    return createAppAPI_html;
  }).then(({ data: data2 }) => data2),
  "v-d8fea8c4": () => Promise.resolve().then(function() {
    return index_html$1;
  }).then(({ data: data2 }) => data2),
  "v-16a9f525": () => Promise.resolve().then(function() {
    return createServer_html;
  }).then(({ data: data2 }) => data2),
  "v-6818c89c": () => Promise.resolve().then(function() {
    return http_html;
  }).then(({ data: data2 }) => data2),
  "v-2d7f1302": () => Promise.resolve().then(function() {
    return indexHtmlMiddleware_html;
  }).then(({ data: data2 }) => data2),
  "v-b5fb9518": () => Promise.resolve().then(function() {
    return computed_html;
  }).then(({ data: data2 }) => data2),
  "v-78e6b6ba": () => Promise.resolve().then(function() {
    return proxy_html;
  }).then(({ data: data2 }) => data2),
  "v-2c83fee2": () => Promise.resolve().then(function() {
    return watch_html;
  }).then(({ data: data2 }) => data2),
  "v-256286d0": () => Promise.resolve().then(function() {
    return index_html;
  }).then(({ data: data2 }) => data2),
  "v-07e8239c": () => Promise.resolve().then(function() {
    return asyncValidator_html;
  }).then(({ data: data2 }) => data2),
  "v-6b1ab37e": () => Promise.resolve().then(function() {
    return formItem_html;
  }).then(({ data: data2 }) => data2),
  "v-3095eea6": () => Promise.resolve().then(function() {
    return rules_html;
  }).then(({ data: data2 }) => data2),
  "v-73407006": () => Promise.resolve().then(function() {
    return inputCode_html;
  }).then(({ data: data2 }) => data2),
  "v-0233039b": () => Promise.resolve().then(function() {
    return input_html;
  }).then(({ data: data2 }) => data2),
  "v-fef4e608": () => Promise.resolve().then(function() {
    return tableColumn_html;
  }).then(({ data: data2 }) => data2),
  "v-46db3393": () => Promise.resolve().then(function() {
    return table_html;
  }).then(({ data: data2 }) => data2),
  "v-50482b4f": () => Promise.resolve().then(function() {
    return util_html;
  }).then(({ data: data2 }) => data2),
  "v-3706649a": () => Promise.resolve().then(function() {
    return _404_html;
  }).then(({ data: data2 }) => data2)
};
const pagesData = vue.ref(pagesData$1);
const pageDataEmpty = vue.readonly({
  key: "",
  path: "",
  title: "",
  lang: "",
  frontmatter: {},
  excerpt: "",
  headers: []
});
const pageData = vue.ref(pageDataEmpty);
const usePageData = () => pageData;
const resolvePageData = async (pageKey) => {
  const pageDataResolver = pagesData.value[pageKey];
  if (!pageDataResolver) {
    return pageDataEmpty;
  }
  const pageData2 = await pageDataResolver();
  return pageData2 !== null && pageData2 !== void 0 ? pageData2 : pageDataEmpty;
};
if (false) {
  __VUE_HMR_RUNTIME__.updatePageData = (data2) => {
    pagesData.value[data2.key] = () => Promise.resolve(data2);
    if (data2.key === pageData.value.key) {
      pageData.value = data2;
    }
  };
}
const pageFrontmatterSymbol = Symbol("");
const usePageFrontmatter = () => {
  const pageFrontmatter = vue.inject(pageFrontmatterSymbol);
  if (!pageFrontmatter) {
    throw new Error("usePageFrontmatter() is called without provider.");
  }
  return pageFrontmatter;
};
const resolvePageFrontmatter = (pageData2) => pageData2.frontmatter;
const pageHeadSymbol = Symbol("");
const usePageHead = () => {
  const pageHead = vue.inject(pageHeadSymbol);
  if (!pageHead) {
    throw new Error("usePageHead() is called without provider.");
  }
  return pageHead;
};
const resolvePageHead = (headTitle, frontmatter, siteLocale) => {
  const description = shared.isString(frontmatter.description) ? frontmatter.description : siteLocale.description;
  const head = [
    ...shared.isArray(frontmatter.head) ? frontmatter.head : [],
    ...siteLocale.head,
    ["title", {}, headTitle],
    ["meta", { name: "description", content: description }]
  ];
  return shared.dedupeHead(head);
};
const pageHeadTitleSymbol = Symbol("");
const resolvePageHeadTitle = (page, siteLocale) => `${page.title ? `${page.title} | ` : ``}${siteLocale.title}`;
const pageLangSymbol = Symbol("");
const usePageLang = () => {
  const pageLang = vue.inject(pageLangSymbol);
  if (!pageLang) {
    throw new Error("usePageLang() is called without provider.");
  }
  return pageLang;
};
const resolvePageLang = (pageData2) => pageData2.lang || "en";
const routeLocaleSymbol = Symbol("");
const useRouteLocale = () => {
  const routeLocale = vue.inject(routeLocaleSymbol);
  if (!routeLocale) {
    throw new Error("useRouteLocale() is called without provider.");
  }
  return routeLocale;
};
const resolveRouteLocale = (locales2, routePath) => shared.resolveLocalePath(locales2, routePath);
const siteData$1 = {
  "base": "/",
  "lang": "en-US",
  "title": "\u671D\u82B1\u5915\u62FE",
  "description": "",
  "head": [
    [
      "meta",
      {
        "name": "theme-color",
        "content": "#3eaf7c"
      }
    ]
  ],
  "locales": {}
};
const siteData = vue.ref(siteData$1);
const useSiteData = () => siteData;
if (false) {
  __VUE_HMR_RUNTIME__.updateSiteData = (data2) => {
    siteData.value = data2;
  };
}
const siteLocaleDataSymbol = Symbol("");
const useSiteLocaleData = () => {
  const siteLocaleData = vue.inject(siteLocaleDataSymbol);
  if (!siteLocaleData) {
    throw new Error("useSiteLocaleData() is called without provider.");
  }
  return siteLocaleData;
};
const resolveSiteLocaleData = (site, routeLocale) => __spreadValues(__spreadValues({}, site), site.locales[routeLocale]);
const setupUpdateHead = () => {
  vueRouter.useRoute();
  const head = usePageHead();
  const lang = usePageLang();
  {
    const ssrContext = vue.useSSRContext();
    if (ssrContext) {
      ssrContext.head = head.value;
      ssrContext.lang = lang.value;
    }
    return;
  }
};
const Content = (props) => {
  let key;
  if (props.pageKey) {
    key = props.pageKey;
  } else {
    const page = usePageData();
    key = page.value.key;
  }
  const component = pagesComponents[key];
  if (component) {
    return vue.h(component);
  }
  return vue.h("div", "404 Not Found");
};
Content.displayName = "Content";
Content.props = {
  pageKey: {
    type: String,
    required: false
  }
};
var OutboundLink$1 = "";
const svg = vue.h("svg", {
  "class": "icon outbound",
  "xmlns": "http://www.w3.org/2000/svg",
  "aria-hidden": "true",
  "focusable": "false",
  "x": "0px",
  "y": "0px",
  "viewBox": "0 0 100 100",
  "width": "15",
  "height": "15"
}, [
  vue.h("path", {
    fill: "currentColor",
    d: "M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"
  }),
  vue.h("polygon", {
    fill: "currentColor",
    points: "45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"
  })
]);
const OutboundLink = (_, { slots }) => {
  var _a;
  return vue.h("span", [svg, (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
};
OutboundLink.displayName = "OutboundLink";
const layoutComponents = {
  "404": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return _404;
  })),
  "Layout": vue.defineAsyncComponent(() => Promise.resolve().then(function() {
    return Layout;
  }))
};
const Vuepress = vue.defineComponent({
  name: "Vuepress",
  setup() {
    const page = usePageData();
    const layoutComponent = vue.computed(() => {
      let layoutName;
      if (page.value.path) {
        const frontmatterLayout = page.value.frontmatter.layout;
        if (shared.isString(frontmatterLayout)) {
          layoutName = frontmatterLayout;
        } else {
          layoutName = "Layout";
        }
      } else {
        layoutName = "404";
      }
      return layoutComponents[layoutName] || vue.resolveComponent(layoutName, false);
    });
    return () => vue.h(layoutComponent.value);
  }
});
const defineClientAppEnhance = (clientAppEnhance) => clientAppEnhance;
const defineClientAppSetup = (clientAppSetup) => clientAppSetup;
const withBase = (url) => {
  if (shared.isLinkHttp(url))
    return url;
  const base = useSiteData().value.base;
  return `${base}${shared.removeLeadingSlash(url)}`;
};
const _sfc_main$1m = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  props: {
    type: {
      type: String,
      required: false,
      default: "tip"
    },
    text: {
      type: String,
      required: false,
      default: ""
    },
    vertical: {
      type: String,
      required: false,
      default: void 0
    }
  },
  setup(__props) {
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<span${serverRenderer.ssrRenderAttrs(vue.mergeProps({
        class: ["badge", __props.type],
        style: {
          verticalAlign: __props.vertical
        }
      }, _attrs))}>`);
      serverRenderer.ssrRenderSlot(_ctx.$slots, "default", {}, () => {
        _push(`${serverRenderer.ssrInterpolate(__props.text)}`);
      }, _push, _parent);
      _push(`</span>`);
    };
  }
});
const _sfc_setup$1m = _sfc_main$1m.setup;
_sfc_main$1m.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/global/Badge.vue");
  return _sfc_setup$1m ? _sfc_setup$1m(props, ctx) : void 0;
};
var CodeGroup = vue.defineComponent({
  name: "CodeGroup",
  setup(_, { slots }) {
    const activeIndex = vue.ref(-1);
    const tabRefs = vue.ref([]);
    const activateNext = (i = activeIndex.value) => {
      if (i < tabRefs.value.length - 1) {
        activeIndex.value = i + 1;
      } else {
        activeIndex.value = 0;
      }
      tabRefs.value[activeIndex.value].focus();
    };
    const activatePrev = (i = activeIndex.value) => {
      if (i > 0) {
        activeIndex.value = i - 1;
      } else {
        activeIndex.value = tabRefs.value.length - 1;
      }
      tabRefs.value[activeIndex.value].focus();
    };
    const keyboardHandler = (event, i) => {
      if (event.key === " " || event.key === "Enter") {
        event.preventDefault();
        activeIndex.value = i;
      } else if (event.key === "ArrowRight") {
        event.preventDefault();
        activateNext(i);
      } else if (event.key === "ArrowLeft") {
        event.preventDefault();
        activatePrev(i);
      }
    };
    return () => {
      var _a;
      const items = (((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)) || []).filter((vnode) => vnode.type.name === "CodeGroupItem").map((vnode) => {
        if (vnode.props === null) {
          vnode.props = {};
        }
        return vnode;
      });
      if (items.length === 0) {
        return null;
      }
      if (activeIndex.value < 0 || activeIndex.value > items.length - 1) {
        activeIndex.value = items.findIndex((vnode) => vnode.props.active === "" || vnode.props.active === true);
        if (activeIndex.value === -1) {
          activeIndex.value = 0;
        }
      } else {
        items.forEach((vnode, i) => {
          vnode.props.active = i === activeIndex.value;
        });
      }
      return vue.h("div", { class: "code-group" }, [
        vue.h("div", { class: "code-group__nav" }, vue.h("ul", { class: "code-group__ul" }, items.map((vnode, i) => {
          const isActive = i === activeIndex.value;
          return vue.h("li", { class: "code-group__li" }, vue.h("button", {
            ref: (element) => {
              if (element) {
                tabRefs.value[i] = element;
              }
            },
            class: {
              "code-group__nav-tab": true,
              "code-group__nav-tab-active": isActive
            },
            ariaPressed: isActive,
            ariaExpanded: isActive,
            onClick: () => activeIndex.value = i,
            onKeydown: (e) => keyboardHandler(e, i)
          }, vnode.props.title));
        }))),
        items
      ]);
    };
  }
});
const __default__$1 = vue.defineComponent({
  name: "CodeGroupItem"
});
function setup$1(__props) {
  return (_ctx, _push, _parent, _attrs) => {
    _push(`<div${serverRenderer.ssrRenderAttrs(vue.mergeProps({
      class: ["code-group-item", { "code-group-item__active": __props.active }],
      "aria-selected": __props.active
    }, _attrs))}>`);
    serverRenderer.ssrRenderSlot(_ctx.$slots, "default", {}, null, _push, _parent);
    _push(`</div>`);
  };
}
const _sfc_main$1l = /* @__PURE__ */ vue.defineComponent(__spreadProps(__spreadValues({}, __default__$1), {
  __ssrInlineRender: true,
  props: {
    title: {
      type: String,
      required: true
    },
    active: {
      type: Boolean,
      required: false,
      default: false
    }
  },
  setup: setup$1
}));
const _sfc_setup$1l = _sfc_main$1l.setup;
_sfc_main$1l.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/global/CodeGroupItem.vue");
  return _sfc_setup$1l ? _sfc_setup$1l(props, ctx) : void 0;
};
const darkModeSymbol = Symbol("");
const useDarkMode = () => {
  const isDarkMode = vue.inject(darkModeSymbol);
  if (!isDarkMode) {
    throw new Error("useDarkMode() is called without provider.");
  }
  return isDarkMode;
};
const setupDarkMode = () => {
  const themeLocale = useThemeLocaleData();
  const isDarkPreferred = core.usePreferredDark();
  const darkStorage = core.useStorage("vuepress-color-scheme", "auto");
  const isDarkMode = vue.computed({
    get() {
      if (!themeLocale.value.darkMode) {
        return false;
      }
      if (darkStorage.value === "auto") {
        return isDarkPreferred.value;
      }
      return darkStorage.value === "dark";
    },
    set(val) {
      if (val === isDarkPreferred.value) {
        darkStorage.value = "auto";
      } else {
        darkStorage.value = val ? "dark" : "light";
      }
    }
  });
  vue.provide(darkModeSymbol, isDarkMode);
  updateHtmlDarkClass(isDarkMode);
};
const updateHtmlDarkClass = (isDarkMode) => {
  const update = (value = isDarkMode.value) => {
    const htmlEl = window === null || window === void 0 ? void 0 : window.document.querySelector("html");
    htmlEl === null || htmlEl === void 0 ? void 0 : htmlEl.classList.toggle("dark", value);
  };
  vue.onMounted(() => {
    vue.watch(isDarkMode, update, { immediate: true });
  });
  vue.onUnmounted(() => update());
};
const useResolveRouteWithRedirect = (...args) => {
  const router = vueRouter.useRouter();
  const route = router.resolve(...args);
  const lastMatched = route.matched[route.matched.length - 1];
  if (!(lastMatched === null || lastMatched === void 0 ? void 0 : lastMatched.redirect)) {
    return route;
  }
  const { redirect } = lastMatched;
  const resolvedRedirect = shared.isFunction(redirect) ? redirect(route) : redirect;
  const resolvedRedirectObj = shared.isString(resolvedRedirect) ? { path: resolvedRedirect } : resolvedRedirect;
  return useResolveRouteWithRedirect(__spreadValues({
    hash: route.hash,
    query: route.query,
    params: route.params
  }, resolvedRedirectObj));
};
const useNavLink = (item) => {
  const resolved = useResolveRouteWithRedirect(item);
  return {
    text: resolved.meta.title || item,
    link: resolved.name === "404" ? item : resolved.fullPath
  };
};
let promise = null;
let promiseResolve = null;
const scrollPromise = {
  wait: () => promise,
  pending: () => {
    promise = new Promise((resolve) => promiseResolve = resolve);
  },
  resolve: () => {
    promiseResolve === null || promiseResolve === void 0 ? void 0 : promiseResolve();
    promise = null;
    promiseResolve = null;
  }
};
const useScrollPromise = () => scrollPromise;
const sidebarItemsSymbol = Symbol("sidebarItems");
const useSidebarItems = () => {
  const sidebarItems = vue.inject(sidebarItemsSymbol);
  if (!sidebarItems) {
    throw new Error("useSidebarItems() is called without provider.");
  }
  return sidebarItems;
};
const setupSidebarItems = () => {
  const themeLocale = useThemeLocaleData();
  const frontmatter = usePageFrontmatter();
  const sidebarItems = vue.computed(() => resolveSidebarItems(frontmatter.value, themeLocale.value));
  vue.provide(sidebarItemsSymbol, sidebarItems);
};
const resolveSidebarItems = (frontmatter, themeLocale) => {
  var _a, _b, _c, _d;
  const sidebarConfig = (_b = (_a = frontmatter.sidebar) !== null && _a !== void 0 ? _a : themeLocale.sidebar) !== null && _b !== void 0 ? _b : "auto";
  const sidebarDepth = (_d = (_c = frontmatter.sidebarDepth) !== null && _c !== void 0 ? _c : themeLocale.sidebarDepth) !== null && _d !== void 0 ? _d : 2;
  if (frontmatter.home || sidebarConfig === false) {
    return [];
  }
  if (sidebarConfig === "auto") {
    return resolveAutoSidebarItems(sidebarDepth);
  }
  if (shared.isArray(sidebarConfig)) {
    return resolveArraySidebarItems(sidebarConfig, sidebarDepth);
  }
  if (shared.isPlainObject(sidebarConfig)) {
    return resolveMultiSidebarItems(sidebarConfig, sidebarDepth);
  }
  return [];
};
const headerToSidebarItem = (header, sidebarDepth) => ({
  text: header.title,
  link: `#${header.slug}`,
  children: headersToSidebarItemChildren(header.children, sidebarDepth)
});
const headersToSidebarItemChildren = (headers, sidebarDepth) => sidebarDepth > 0 ? headers.map((header) => headerToSidebarItem(header, sidebarDepth - 1)) : [];
const resolveAutoSidebarItems = (sidebarDepth) => {
  const page = usePageData();
  return [
    {
      text: page.value.title,
      children: headersToSidebarItemChildren(page.value.headers, sidebarDepth)
    }
  ];
};
const resolveArraySidebarItems = (sidebarConfig, sidebarDepth) => {
  const route = vueRouter.useRoute();
  const page = usePageData();
  const handleChildItem = (item) => {
    var _a;
    let childItem;
    if (shared.isString(item)) {
      childItem = useNavLink(item);
    } else {
      childItem = item;
    }
    if (childItem.children) {
      return __spreadProps(__spreadValues({}, childItem), {
        children: childItem.children.map((item2) => handleChildItem(item2))
      });
    }
    if (childItem.link === route.path) {
      const headers = ((_a = page.value.headers[0]) === null || _a === void 0 ? void 0 : _a.level) === 1 ? page.value.headers[0].children : page.value.headers;
      return __spreadProps(__spreadValues({}, childItem), {
        children: headersToSidebarItemChildren(headers, sidebarDepth)
      });
    }
    return childItem;
  };
  return sidebarConfig.map((item) => handleChildItem(item));
};
const resolveMultiSidebarItems = (sidebarConfig, sidebarDepth) => {
  var _a;
  const route = vueRouter.useRoute();
  const sidebarPath = shared.resolveLocalePath(sidebarConfig, route.path);
  const matchedSidebarConfig = (_a = sidebarConfig[sidebarPath]) !== null && _a !== void 0 ? _a : [];
  return resolveArraySidebarItems(matchedSidebarConfig, sidebarDepth);
};
const themeData$1 = {
  "logo": "/logo.png",
  "docsDir": "docs",
  "docsBranch": "main",
  "editLinks": true,
  "editLinkText": "",
  "sidebarDepth": 1,
  "darkMode": false,
  "lastUpdated": false,
  "navbar": [
    {
      "text": "\u9996\u9875",
      "link": "/"
    },
    {
      "text": "Vue3\u57FA\u7840",
      "link": "/vue3Basic/"
    },
    {
      "text": "\u6838\u5FC3\u539F\u7406",
      "link": "/sourceCode/"
    },
    {
      "text": "ElementPlus",
      "link": "/elementPlus/"
    },
    {
      "text": "Vite",
      "link": "/vite/"
    },
    {
      "text": "\u751F\u6001\u7CFB\u7EDF",
      "children": [
        {
          "text": "Vuex",
          "link": "/vuex/"
        },
        {
          "text": "Vue Router",
          "link": "/vueRouter/"
        },
        {
          "text": "VuePress",
          "link": "/vuePress/"
        }
      ]
    }
  ],
  "sidebar": {
    "/vue3Basic/": [
      {
        "text": "Introduction",
        "link": "/vue3Basic/"
      },
      "/vue3Basic/reactivityAPI",
      "/vue3Basic/vue3optimize",
      "/vue3Basic/Vue3Api",
      "/vue3Basic/JSX",
      "/vue3Basic/auth"
    ],
    "/sourceCode/": [
      {
        "text": "Introduction",
        "link": "/sourceCode/"
      },
      {
        "text": "\u54CD\u5E94\u5F0F\u7CFB\u7EDF",
        "children": [
          "/sourceCode/reactivity/reactivity",
          "/sourceCode/reactivity/reactivity.cjs",
          "/sourceCode/reactivity/computed",
          "/sourceCode/reactivity/watch"
        ]
      },
      {
        "text": "\u6E32\u67D3\u5668",
        "children": [
          "/sourceCode/renderer",
          "/sourceCode/renderer/createAppAPI",
          "/sourceCode/renderer/componentRender"
        ]
      },
      {
        "text": "\u7EC4\u4EF6\u5316",
        "children": [
          "/sourceCode/component/setup"
        ]
      },
      {
        "text": "Deep Dive",
        "children": [
          "/sourceCode/DeepDive/Render-function",
          "/sourceCode/DeepDive/creating-a-mini-vue",
          "/sourceCode/DeepDive/useFetch",
          "/sourceCode/DeepDive/miniVue"
        ]
      }
    ],
    "/elementPlus/": [
      {
        "text": "Introduction",
        "link": "/elementPlus/"
      },
      {
        "text": "components",
        "sidebarDepth": 1,
        "children": [
          "/elementPlus/components/input/input",
          "/elementPlus/components/input/input-code",
          "/elementPlus/components/table/table",
          "/elementPlus/components/table/table-column"
        ]
      },
      {
        "text": "hooks",
        "children": [
          "/elementPlus/hooks/use-attrs",
          "/elementPlus/hooks/use-namespace"
        ]
      },
      {
        "text": "utils",
        "children": [
          "/elementPlus/utils/buildProps"
        ]
      },
      {
        "text": "theme-chalk",
        "children": [
          "/elementPlus/theme-chalk/BEM",
          "/elementPlus/theme-chalk/scss"
        ]
      }
    ],
    "/vuex/": [
      {
        "text": "\u5E94\u7528\u7B14\u8BB0",
        "link": "/vuex/"
      },
      {
        "text": "\u4E00\u4E9B\u95EE\u9898",
        "link": "/vuex/q&a"
      },
      {
        "text": "miniVuex",
        "link": "/vuex/miniVuex"
      },
      {
        "text": "\u6E90\u7801\u89E3\u8BFB",
        "link": "/vuex/sourceCode_v4"
      },
      {
        "text": "Vuex v4.0.2",
        "link": "/vuex/vuexCode"
      }
    ],
    "/vueRouter/": [
      {
        "text": "Introduction",
        "link": "/vueRouter/"
      },
      {
        "text": "VueRouter \u7279\u6027",
        "link": "/vueRouter/application"
      },
      {
        "text": "\u539F\u751F\u8DEF\u7531",
        "link": "/vueRouter/browserRouter"
      },
      {
        "text": "\u6E90\u7801\u89E3\u8BFB",
        "link": "/vueRouter/sourceCode"
      },
      {
        "text": "vue-router v4.0.12",
        "link": "/vueRouter/code"
      }
    ],
    "/vite/": [
      {
        "text": "Introduction",
        "link": "/vite/"
      },
      {
        "text": "\u5E94\u7528",
        "link": "/vite/application"
      },
      {
        "text": "\u6E90\u7801\u89E3\u8BFB",
        "children": [
          "/vite/sourceCode/createServer",
          "/vite/sourceCode/indexHtmlMiddleware"
        ]
      },
      {
        "text": "vue dev server",
        "link": "/vite/vue-dev-server"
      }
    ],
    "/vuePress/": [
      {
        "text": "Introduction",
        "link": "/vuePress/"
      },
      {
        "text": "\u5E94\u7528",
        "link": "/vuePress/application"
      },
      {
        "text": "\u6E90\u7801\u89E3\u8BFB",
        "link": "/vuePress/sourceCode"
      }
    ]
  },
  "locales": {
    "/": {
      "selectLanguageName": "English"
    }
  },
  "repo": null,
  "selectLanguageText": "Languages",
  "selectLanguageAriaLabel": "Select language",
  "editLink": true,
  "lastUpdatedText": "Last Updated",
  "contributors": true,
  "contributorsText": "Contributors",
  "notFound": [
    "There's nothing here.",
    "How did we get here?",
    "That's a Four-Oh-Four.",
    "Looks like we've got some broken links."
  ],
  "backToHome": "Take me home",
  "openInNewWindow": "open in new window",
  "toggleDarkMode": "toggle dark mode",
  "toggleSidebar": "toggle sidebar"
};
const themeData = vue.ref(themeData$1);
const useThemeData = () => themeData;
if (false) {
  __VUE_HMR_RUNTIME__.updateThemeData = (data2) => {
    themeData.value = data2;
  };
}
const themeLocaleDataSymbol = Symbol("");
const useThemeLocaleData$1 = () => {
  const themeLocaleData = vue.inject(themeLocaleDataSymbol);
  if (!themeLocaleData) {
    throw new Error("useThemeLocaleData() is called without provider.");
  }
  return themeLocaleData;
};
const resolveThemeLocaleData = (theme, routeLocale) => {
  var _a;
  return __spreadValues(__spreadValues({}, theme), (_a = theme.locales) === null || _a === void 0 ? void 0 : _a[routeLocale]);
};
const useThemeLocaleData = () => useThemeLocaleData$1();
const _sfc_main$1k = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    const themeLocale = useThemeLocaleData();
    return (_ctx, _push, _parent, _attrs) => {
      _push(serverRenderer.ssrRenderComponent(vue.unref(OutboundLink), _attrs, {
        default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(`<span class="sr-only"${_scopeId}>${serverRenderer.ssrInterpolate(vue.unref(themeLocale).openInNewWindow)}</span>`);
          } else {
            return [
              vue.createVNode("span", { class: "sr-only" }, vue.toDisplayString(vue.unref(themeLocale).openInNewWindow), 1)
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
});
const _sfc_setup$1k = _sfc_main$1k.setup;
_sfc_main$1k.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/global/OutboundLink.vue");
  return _sfc_setup$1k ? _sfc_setup$1k(props, ctx) : void 0;
};
var index = "";
var clientAppEnhance0 = defineClientAppEnhance(({ app, router }) => {
  app.component("Badge", _sfc_main$1m);
  app.component("CodeGroup", CodeGroup);
  app.component("CodeGroupItem", _sfc_main$1l);
  delete app._context.components.OutboundLink;
  app.component("OutboundLink", _sfc_main$1k);
  app.component("NavbarSearch", () => {
    const SearchComponent = app.component("Docsearch") || app.component("SearchBox");
    if (SearchComponent) {
      return vue.h(SearchComponent);
    }
    return null;
  });
  const scrollBehavior = router.options.scrollBehavior;
  router.options.scrollBehavior = async (...args) => {
    await useScrollPromise().wait();
    return scrollBehavior(...args);
  };
});
var vars$3 = "";
var mediumZoom = "";
var clientAppEnhance1 = defineClientAppEnhance(({ app, router }) => {
  return;
});
var clientAppEnhance2 = defineClientAppEnhance(({ app }) => {
  const themeData2 = useThemeData();
  const routeLocale = app._context.provides[routeLocaleSymbol];
  const themeLocaleData = vue.computed(() => resolveThemeLocaleData(themeData2.value, routeLocale.value));
  app.provide(themeLocaleDataSymbol, themeLocaleData);
  Object.defineProperties(app.config.globalProperties, {
    $theme: {
      get() {
        return themeData2.value;
      }
    },
    $themeLocale: {
      get() {
        return themeLocaleData.value;
      }
    }
  });
});
const useHotKeys = ({ input, hotKeys: hotKeys2 }) => {
  const onKeydown = (event) => {
    if (!input.value || hotKeys2.value.length === 0)
      return;
    if (event.target === document.body && hotKeys2.value.includes(event.key)) {
      input.value.focus();
      event.preventDefault();
    }
  };
  vue.onMounted(() => {
    document.addEventListener("keydown", onKeydown);
  });
  vue.onBeforeUnmount(() => {
    document.removeEventListener("keydown", onKeydown);
  });
};
const searchIndex$1 = [
  {
    "title": "Introduction",
    "headers": [],
    "path": "/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Introduction",
    "headers": [],
    "path": "/elementPlus/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "tree",
    "headers": [],
    "path": "/elementPlus/tree.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "rollup \u914D\u7F6E",
    "headers": [
      {
        "level": 2,
        "title": "rollup.config.js",
        "slug": "rollup-config-js",
        "children": []
      },
      {
        "level": 2,
        "title": "banner",
        "slug": "banner",
        "children": []
      },
      {
        "level": 2,
        "title": "format",
        "slug": "format",
        "children": []
      },
      {
        "level": 2,
        "title": "plugins",
        "slug": "plugins",
        "children": [
          {
            "level": 3,
            "title": "@rollup/plugin-buble",
            "slug": "rollup-plugin-buble",
            "children": []
          },
          {
            "level": 3,
            "title": "rollup-plugin-babel",
            "slug": "rollup-plugin-babel",
            "children": []
          },
          {
            "level": 3,
            "title": "rollup/plugin-node-resolve",
            "slug": "rollup-plugin-node-resolve",
            "children": []
          },
          {
            "level": 3,
            "title": "rollup-plugin-terser",
            "slug": "rollup-plugin-terser",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "Rollup \u7684\u4F18\u52BF\u548C\u4E0D\u8DB3",
        "slug": "rollup-\u7684\u4F18\u52BF\u548C\u4E0D\u8DB3",
        "children": []
      }
    ],
    "path": "/frontEndTool/rollup.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u6E90\u7801\u9605\u8BFB\u6280\u5DE7",
    "headers": [
      {
        "level": 2,
        "title": "vuex",
        "slug": "vuex",
        "children": []
      }
    ],
    "path": "/frontEndTool/skill.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "",
    "headers": [],
    "path": "/pina/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Diff \u7B97\u6CD5\u4F18\u5316",
    "headers": [],
    "path": "/sourceCode/Diff.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Introduction",
    "headers": [],
    "path": "/sourceCode/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "v-model",
    "headers": [],
    "path": "/sourceCode/v-model.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Introduction",
    "headers": [],
    "path": "/vite/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Vite",
    "headers": [
      {
        "level": 2,
        "title": "ES Module",
        "slug": "es-module",
        "children": []
      }
    ],
    "path": "/vite/application.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "vue-dev-server",
    "headers": [
      {
        "level": 2,
        "title": "vue-dev-server",
        "slug": "vue-dev-server-1",
        "children": []
      },
      {
        "level": 2,
        "title": "vueMiddleware",
        "slug": "vuemiddleware",
        "children": []
      },
      {
        "level": 2,
        "title": "transformModuleImports.js",
        "slug": "transformmoduleimports-js",
        "children": []
      },
      {
        "level": 2,
        "title": "readSource.js",
        "slug": "readsource-js",
        "children": []
      },
      {
        "level": 2,
        "title": "loadPkg.js",
        "slug": "loadpkg-js",
        "children": []
      }
    ],
    "path": "/vite/vue-dev-server.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u5904\u7406\u9759\u6001\u8D44\u6E90",
    "headers": [
      {
        "level": 2,
        "title": "\u56FE\u7247\u52A0\u8F7D",
        "slug": "\u56FE\u7247\u52A0\u8F7D",
        "children": [
          {
            "level": 3,
            "title": "SVG \u7EC4\u4EF6\u65B9\u5F0F\u52A0\u8F7D",
            "slug": "svg-\u7EC4\u4EF6\u65B9\u5F0F\u52A0\u8F7D",
            "children": []
          }
        ]
      }
    ],
    "path": "/vite/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "JSX",
    "headers": [
      {
        "level": 2,
        "title": "\u5728 render \u4E2D\u8FD4\u56DE",
        "slug": "\u5728-render-\u4E2D\u8FD4\u56DE",
        "children": []
      },
      {
        "level": 2,
        "title": "\u5728 setup \u4E2D\u8FD4\u56DE",
        "slug": "\u5728-setup-\u4E2D\u8FD4\u56DE",
        "children": []
      },
      {
        "level": 2,
        "title": "\u7528\u6CD5",
        "slug": "\u7528\u6CD5",
        "children": []
      },
      {
        "level": 2,
        "title": "\u9605\u8BFB\u53C2\u8003",
        "slug": "\u9605\u8BFB\u53C2\u8003",
        "children": []
      }
    ],
    "path": "/vue3Basic/JSX.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Introduction",
    "headers": [],
    "path": "/vue3Basic/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Vue3 API",
    "headers": [
      {
        "level": 2,
        "title": "hooks",
        "slug": "hooks",
        "children": [
          {
            "level": 3,
            "title": "vue2 mixins",
            "slug": "vue2-mixins",
            "children": []
          },
          {
            "level": 3,
            "title": "Vue3 hooks",
            "slug": "vue3-hooks",
            "children": []
          },
          {
            "level": 3,
            "title": "react hooks",
            "slug": "react-hooks",
            "children": []
          }
        ]
      }
    ],
    "path": "/vue3Basic/Vue3Api.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u6743\u9650",
    "headers": [],
    "path": "/vue3Basic/auth.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u54CD\u5E94\u5F0F\u7CFB\u7EDF API",
    "headers": [
      {
        "level": 2,
        "title": "reactive",
        "slug": "reactive",
        "children": []
      },
      {
        "level": 2,
        "title": "ref",
        "slug": "ref",
        "children": []
      },
      {
        "level": 2,
        "title": "computed",
        "slug": "computed",
        "children": [
          {
            "level": 3,
            "title": "\u7528\u6CD5",
            "slug": "\u7528\u6CD5",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "watch",
        "slug": "watch",
        "children": [
          {
            "level": 3,
            "title": "\u89C2\u5BDF props",
            "slug": "\u89C2\u5BDF-props",
            "children": []
          },
          {
            "level": 3,
            "title": "\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61",
            "slug": "\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61",
            "children": []
          },
          {
            "level": 3,
            "title": "\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90",
            "slug": "\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90",
            "children": []
          },
          {
            "level": 3,
            "title": "\u505C\u6B62\u89C2\u5BDF",
            "slug": "\u505C\u6B62\u89C2\u5BDF",
            "children": []
          },
          {
            "level": 3,
            "title": "\u6E05\u7406\u526F\u4F5C\u7528",
            "slug": "\u6E05\u7406\u526F\u4F5C\u7528",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "watchEffect",
        "slug": "watcheffect",
        "children": [
          {
            "level": 3,
            "title": "watch \u548C watchEffect \u7684\u533A\u522B",
            "slug": "watch-\u548C-watcheffect-\u7684\u533A\u522B",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "effect",
        "slug": "effect",
        "children": [
          {
            "level": 3,
            "title": "\u8C03\u5EA6\u6267\u884C effect-scheduler",
            "slug": "\u8C03\u5EA6\u6267\u884C-effect-scheduler",
            "children": []
          },
          {
            "level": 3,
            "title": "watchEffect() \u4E0E effect() \u7684\u533A\u522B",
            "slug": "watcheffect-\u4E0E-effect-\u7684\u533A\u522B",
            "children": []
          }
        ]
      }
    ],
    "path": "/vue3Basic/reactivityAPI.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u642D\u5EFA\u57FA\u4E8E vue3 \u7684\u524D\u7AEF\u67B6\u6784",
    "headers": [],
    "path": "/vue3Basic/vue3Project.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Vue3 \u7684\u4F18\u5316",
    "headers": [
      {
        "level": 2,
        "title": "\u6027\u80FD\u4F18\u5316",
        "slug": "\u6027\u80FD\u4F18\u5316",
        "children": [
          {
            "level": 3,
            "title": "1. \u6E90\u7801\u4F53\u79EF\u4F18\u5316",
            "slug": "_1-\u6E90\u7801\u4F53\u79EF\u4F18\u5316",
            "children": []
          },
          {
            "level": 3,
            "title": "2. \u6570\u636E\u52AB\u6301\u4F18\u5316",
            "slug": "_2-\u6570\u636E\u52AB\u6301\u4F18\u5316",
            "children": []
          },
          {
            "level": 3,
            "title": "3. \u7F16\u8BD1\u4F18\u5316",
            "slug": "_3-\u7F16\u8BD1\u4F18\u5316",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "\u8BED\u6CD5 API \u4F18\u5316",
        "slug": "\u8BED\u6CD5-api-\u4F18\u5316",
        "children": [
          {
            "level": 3,
            "title": "1. \u4F18\u5316\u903B\u8F91\u7EC4\u7EC7",
            "slug": "_1-\u4F18\u5316\u903B\u8F91\u7EC4\u7EC7",
            "children": []
          },
          {
            "level": 3,
            "title": "2. \u4F18\u5316\u903B\u8F91\u590D\u7528",
            "slug": "_2-\u4F18\u5316\u903B\u8F91\u590D\u7528",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "\u7F16\u8BD1\u4F18\u5316",
        "slug": "\u7F16\u8BD1\u4F18\u5316",
        "children": [
          {
            "level": 3,
            "title": "PathFlag",
            "slug": "pathflag",
            "children": []
          },
          {
            "level": 3,
            "title": "HoistStatic",
            "slug": "hoiststatic",
            "children": []
          },
          {
            "level": 3,
            "title": "CacheHandler",
            "slug": "cachehandler",
            "children": []
          },
          {
            "level": 3,
            "title": "SSR",
            "slug": "ssr",
            "children": []
          },
          {
            "level": 3,
            "title": "tree-shaking",
            "slug": "tree-shaking",
            "children": []
          }
        ]
      }
    ],
    "path": "/vue3Basic/vue3optimize.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Introduction",
    "headers": [],
    "path": "/vuePress/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "VuePress \u7B14\u8BB0",
    "headers": [],
    "path": "/vuePress/application.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "VuePress \u67B6\u6784\u8BBE\u8BA1",
    "headers": [],
    "path": "/vuePress/sourceCode.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Introduction",
    "headers": [
      {
        "level": 2,
        "title": "vue2 Router",
        "slug": "vue2-router",
        "children": []
      }
    ],
    "path": "/vueRouter/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Vue Router 4 \u65B0\u7279\u6027",
    "headers": [
      {
        "level": 2,
        "title": "\u4F7F\u7528\u65B9\u6CD5",
        "slug": "\u4F7F\u7528\u65B9\u6CD5",
        "children": []
      },
      {
        "level": 2,
        "title": "\u52A8\u6001\u8DEF\u7531",
        "slug": "\u52A8\u6001\u8DEF\u7531",
        "children": []
      },
      {
        "level": 2,
        "title": "\u5BFC\u822A\u5B88\u536B",
        "slug": "\u5BFC\u822A\u5B88\u536B",
        "children": []
      }
    ],
    "path": "/vueRouter/application.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u539F\u751F\u8DEF\u7531\u57FA\u7840",
    "headers": [
      {
        "level": 2,
        "title": "hash",
        "slug": "hash",
        "children": []
      },
      {
        "level": 2,
        "title": "history \u6A21\u5F0F",
        "slug": "history-\u6A21\u5F0F",
        "children": [
          {
            "level": 3,
            "title": "pushState",
            "slug": "pushstate",
            "children": []
          },
          {
            "level": 3,
            "title": "replaceState",
            "slug": "replacestate",
            "children": []
          },
          {
            "level": 3,
            "title": "popstate",
            "slug": "popstate",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "location",
        "slug": "location",
        "children": [
          {
            "level": 3,
            "title": "Location.assign()",
            "slug": "location-assign",
            "children": []
          },
          {
            "level": 3,
            "title": "Location.replace()",
            "slug": "location-replace",
            "children": []
          },
          {
            "level": 3,
            "title": "Location \u5C5E\u6027",
            "slug": "location-\u5C5E\u6027",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "\u5176\u5B83",
        "slug": "\u5176\u5B83",
        "children": []
      }
    ],
    "path": "/vueRouter/browserRouter.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "vue-router v4.0.12",
    "headers": [],
    "path": "/vueRouter/code.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "miniVueRouter",
    "headers": [],
    "path": "/vueRouter/miniVueRouter.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Vue Router \u6E90\u7801\u89E3\u8BFB",
    "headers": [
      {
        "level": 2,
        "title": "\u76EE\u5F55\u7ED3\u6784",
        "slug": "\u76EE\u5F55\u7ED3\u6784",
        "children": []
      },
      {
        "level": 2,
        "title": "createRouter",
        "slug": "createrouter",
        "children": [
          {
            "level": 3,
            "title": "install",
            "slug": "install",
            "children": []
          },
          {
            "level": 3,
            "title": "provide",
            "slug": "provide",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "currentRoute",
        "slug": "currentroute",
        "children": [
          {
            "level": 3,
            "title": "pushWithRedirect",
            "slug": "pushwithredirect",
            "children": []
          },
          {
            "level": 3,
            "title": "navigate",
            "slug": "navigate",
            "children": []
          },
          {
            "level": 3,
            "title": "finalizeNavigation",
            "slug": "finalizenavigation",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "history \u7684\u6A21\u5F0F",
        "slug": "history-\u7684\u6A21\u5F0F",
        "children": [
          {
            "level": 3,
            "title": "\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5",
            "slug": "\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5",
            "children": []
          },
          {
            "level": 3,
            "title": "createWebHistory",
            "slug": "createwebhistory",
            "children": []
          },
          {
            "level": 3,
            "title": "useHistoryStateNavigation",
            "slug": "usehistorystatenavigation",
            "children": []
          },
          {
            "level": 3,
            "title": "changeLocation",
            "slug": "changelocation",
            "children": []
          },
          {
            "level": 3,
            "title": "useHistoryListeners",
            "slug": "usehistorylisteners",
            "children": []
          },
          {
            "level": 3,
            "title": "finalizeNavigation",
            "slug": "finalizenavigation-1",
            "children": []
          },
          {
            "level": 3,
            "title": "markAsReady",
            "slug": "markasready",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "RouterView",
        "slug": "routerview",
        "children": [
          {
            "level": 3,
            "title": "matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684",
            "slug": "matched-\u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684",
            "children": []
          },
          {
            "level": 3,
            "title": "createRouteRecordMatcher",
            "slug": "createrouterecordmatcher",
            "children": []
          },
          {
            "level": 3,
            "title": "resolve",
            "slug": "resolve",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0",
        "slug": "\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0",
        "children": []
      }
    ],
    "path": "/vueRouter/sourceCode.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "vuex \u7B14\u8BB0",
    "headers": [
      {
        "level": 2,
        "title": "vuex \u5173\u7CFB\u56FE",
        "slug": "vuex-\u5173\u7CFB\u56FE",
        "children": []
      },
      {
        "level": 2,
        "title": "\u793A\u4F8B",
        "slug": "\u793A\u4F8B",
        "children": []
      },
      {
        "level": 2,
        "title": "form \u8868\u5355\u95EE\u9898",
        "slug": "form-\u8868\u5355\u95EE\u9898",
        "children": [
          {
            "level": 3,
            "title": "\u5B98\u65B9\u89E3\u51B3",
            "slug": "\u5B98\u65B9\u89E3\u51B3",
            "children": []
          },
          {
            "level": 3,
            "title": "\u8BA1\u7B97\u5C5E\u6027 set\u3001get \u65B9\u5F0F",
            "slug": "\u8BA1\u7B97\u5C5E\u6027-set\u3001get-\u65B9\u5F0F",
            "children": []
          }
        ]
      }
    ],
    "path": "/vuex/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u81EA\u5B9A\u4E49 Vuex",
    "headers": [],
    "path": "/vuex/miniVuex.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "vuex \u63D2\u4EF6",
    "headers": [
      {
        "level": 2,
        "title": "\u6301\u4E45\u5316\u5B58\u50A8\u63D2\u4EF6",
        "slug": "\u6301\u4E45\u5316\u5B58\u50A8\u63D2\u4EF6",
        "children": []
      }
    ],
    "path": "/vuex/plugin.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "vuex \u6709\u5173\u7684\u95EE\u9898",
    "headers": [
      {
        "level": 3,
        "title": "action \u548C mutations",
        "slug": "action-\u548C-mutations",
        "children": []
      },
      {
        "level": 3,
        "title": "state \u5185\u90E8\u652F\u6301\u6A21\u5757\u914D\u7F6E\u548C\u6A21\u5757\u5D4C\u5957\uFF0C\u5982\u4F55\u5B9E\u73B0\u7684\uFF1F",
        "slug": "state-\u5185\u90E8\u652F\u6301\u6A21\u5757\u914D\u7F6E\u548C\u6A21\u5757\u5D4C\u5957-\u5982\u4F55\u5B9E\u73B0\u7684",
        "children": []
      },
      {
        "level": 3,
        "title": "defineProperty \u4F55\u65F6\u6267\u884C",
        "slug": "defineproperty-\u4F55\u65F6\u6267\u884C",
        "children": []
      },
      {
        "level": 3,
        "title": "\u4E3A\u4EC0\u4E48 vuex store \u4E2D\u7684\u503C\u9700\u8981\u653E\u5230 computed \u4E2D",
        "slug": "\u4E3A\u4EC0\u4E48-vuex-store-\u4E2D\u7684\u503C\u9700\u8981\u653E\u5230-computed-\u4E2D",
        "children": []
      }
    ],
    "path": "/vuex/q&a.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "vuex3 \u6E90\u7801",
    "headers": [
      {
        "level": 2,
        "title": "Vue.mixin",
        "slug": "vue-mixin",
        "children": []
      },
      {
        "level": 2,
        "title": "Vuex.Store",
        "slug": "vuex-store",
        "children": []
      },
      {
        "level": 2,
        "title": "resetStoreVM",
        "slug": "resetstorevm",
        "children": []
      },
      {
        "level": 2,
        "title": "enableStrictMode",
        "slug": "enablestrictmode",
        "children": []
      },
      {
        "level": 2,
        "title": "ModuleCollection",
        "slug": "modulecollection",
        "children": []
      },
      {
        "level": 2,
        "title": "dispatch",
        "slug": "dispatch",
        "children": []
      },
      {
        "level": 2,
        "title": "commit",
        "slug": "commit",
        "children": []
      }
    ],
    "path": "/vuex/sourceCode_v3.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "vuex4 \u6E90\u7801\u89E3\u8BFB",
    "headers": [
      {
        "level": 2,
        "title": "\u6E90\u7801\u8C03\u8BD5",
        "slug": "\u6E90\u7801\u8C03\u8BD5",
        "children": [
          {
            "level": 3,
            "title": "source-map",
            "slug": "source-map",
            "children": []
          },
          {
            "level": 3,
            "title": "@rollup/plugin-buble",
            "slug": "rollup-plugin-buble",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "\u6E90\u7801\u5165\u53E3",
        "slug": "\u6E90\u7801\u5165\u53E3",
        "children": []
      },
      {
        "level": 2,
        "title": "store \u5BF9\u8C61",
        "slug": "store-\u5BF9\u8C61",
        "children": [
          {
            "level": 3,
            "title": "\u5224\u65AD\u73AF\u5883",
            "slug": "\u5224\u65AD\u73AF\u5883",
            "children": []
          },
          {
            "level": 3,
            "title": "\u521D\u59CB\u5316\u53D8\u91CF",
            "slug": "\u521D\u59CB\u5316\u53D8\u91CF",
            "children": []
          },
          {
            "level": 3,
            "title": "ModuleCollection",
            "slug": "modulecollection",
            "children": []
          },
          {
            "level": 3,
            "title": "Module",
            "slug": "module",
            "children": []
          },
          {
            "level": 3,
            "title": "installModule",
            "slug": "installmodule",
            "children": []
          },
          {
            "level": 3,
            "title": "resetStoreState",
            "slug": "resetstorestate",
            "children": []
          },
          {
            "level": 3,
            "title": "vue2 \u4E2D vuex \u7684\u54CD\u5E94\u5F0F",
            "slug": "vue2-\u4E2D-vuex-\u7684\u54CD\u5E94\u5F0F",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "install",
        "slug": "install",
        "children": [
          {
            "level": 3,
            "title": "provide / inject",
            "slug": "provide-inject",
            "children": []
          },
          {
            "level": 3,
            "title": "install \u65B9\u6CD5",
            "slug": "install-\u65B9\u6CD5",
            "children": []
          },
          {
            "level": 3,
            "title": "Vue.mixin",
            "slug": "vue-mixin",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "\u5DE5\u5177\u65B9\u6CD5",
        "slug": "\u5DE5\u5177\u65B9\u6CD5",
        "children": [
          {
            "level": 3,
            "title": "enableStrictMode",
            "slug": "enablestrictmode",
            "children": []
          },
          {
            "level": 3,
            "title": "partial",
            "slug": "partial",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "store \u4E2D\u7684\u4E00\u4E9B API",
        "slug": "store-\u4E2D\u7684\u4E00\u4E9B-api",
        "children": [
          {
            "level": 3,
            "title": "commit",
            "slug": "commit",
            "children": []
          },
          {
            "level": 3,
            "title": "dispatch",
            "slug": "dispatch",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "plugins",
        "slug": "plugins",
        "children": [
          {
            "level": 3,
            "title": "genericSubscribe",
            "slug": "genericsubscribe",
            "children": []
          },
          {
            "level": 3,
            "title": "logger \u63D2\u4EF6",
            "slug": "logger-\u63D2\u4EF6",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "\u53C2\u8003\u9605\u8BFB",
        "slug": "\u53C2\u8003\u9605\u8BFB",
        "children": []
      }
    ],
    "path": "/vuex/sourceCode_v4.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "vuex v4.0.2",
    "headers": [],
    "path": "/vuex/vuexCode.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "use-attrs",
    "headers": [
      {
        "level": 2,
        "title": "$attrs \u4E0E attrs",
        "slug": "attrs-\u4E0E-attrs",
        "children": []
      },
      {
        "level": 2,
        "title": "use-attrs",
        "slug": "use-attrs-1",
        "children": []
      }
    ],
    "path": "/elementPlus/hooks/use-attrs.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "useNamespace",
    "headers": [],
    "path": "/elementPlus/hooks/use-namespace.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "BEM",
    "headers": [],
    "path": "/elementPlus/theme-chalk/BEM.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "scss",
    "headers": [
      {
        "level": 2,
        "title": "\u53D8\u91CF",
        "slug": "\u53D8\u91CF",
        "children": []
      },
      {
        "level": 2,
        "title": "\u6CE8\u91CA",
        "slug": "\u6CE8\u91CA",
        "children": []
      },
      {
        "level": 2,
        "title": "At-rules",
        "slug": "at-rules",
        "children": []
      },
      {
        "level": 2,
        "title": "@extend",
        "slug": "extend",
        "children": []
      },
      {
        "level": 2,
        "title": "@mixin",
        "slug": "mixin",
        "children": []
      },
      {
        "level": 2,
        "title": "@use",
        "slug": "use",
        "children": []
      },
      {
        "level": 2,
        "title": "@forward",
        "slug": "forward",
        "children": [
          {
            "level": 3,
            "title": "@forward \u6DFB\u52A0\u524D\u7F00",
            "slug": "forward-\u6DFB\u52A0\u524D\u7F00",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "@content",
        "slug": "content",
        "children": []
      },
      {
        "level": 2,
        "title": "@at-root",
        "slug": "at-root",
        "children": [
          {
            "level": 3,
            "title": "@at-root\u548C&\u7684\u7ED3\u5408",
            "slug": "at-root\u548C-\u7684\u7ED3\u5408",
            "children": []
          },
          {
            "level": 3,
            "title": "@at-root\u548C#{&}\u7ED3\u5408",
            "slug": "at-root\u548C-\u7ED3\u5408",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "\u8D44\u6599",
        "slug": "\u8D44\u6599",
        "children": []
      }
    ],
    "path": "/elementPlus/theme-chalk/scss.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "buildProps",
    "headers": [
      {
        "level": 2,
        "title": "\u6CDB\u578B",
        "slug": "\u6CDB\u578B",
        "children": []
      },
      {
        "level": 2,
        "title": "\u5E26\u7EA6\u675F\u7684\u6CDB\u578B",
        "slug": "\u5E26\u7EA6\u675F\u7684\u6CDB\u578B",
        "children": []
      },
      {
        "level": 2,
        "title": "buildProps \u8FD4\u56DE\u503C",
        "slug": "buildprops-\u8FD4\u56DE\u503C",
        "children": [
          {
            "level": 3,
            "title": "[K in keyof Props]",
            "slug": "k-in-keyof-props",
            "children": []
          },
          {
            "level": 3,
            "title": "\u503C\u5224\u65AD",
            "slug": "\u503C\u5224\u65AD",
            "children": []
          }
        ]
      },
      {
        "level": 2,
        "title": "buildProps \u51FD\u6570\u5B9E\u9645\u5185\u5BB9",
        "slug": "buildprops-\u51FD\u6570\u5B9E\u9645\u5185\u5BB9",
        "children": []
      },
      {
        "level": 2,
        "title": "\u5C0F\u7ED3",
        "slug": "\u5C0F\u7ED3",
        "children": []
      }
    ],
    "path": "/elementPlus/utils/buildProps.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Render function",
    "headers": [],
    "path": "/sourceCode/DeepDive/Render-function.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "creating a mini vue",
    "headers": [],
    "path": "/sourceCode/DeepDive/creating-a-mini-vue.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "mini vue",
    "headers": [],
    "path": "/sourceCode/DeepDive/miniVue.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "useFetch",
    "headers": [],
    "path": "/sourceCode/DeepDive/useFetch.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Setup",
    "headers": [
      {
        "level": 2,
        "title": "\u521B\u5EFA\u548C\u8BBE\u7F6E\u7EC4\u4EF6\u5B9E\u4F8B",
        "slug": "\u521B\u5EFA\u548C\u8BBE\u7F6E\u7EC4\u4EF6\u5B9E\u4F8B",
        "children": []
      },
      {
        "level": 2,
        "title": "\u7EC4\u4EF6\u5B9E\u4F8B\u7684\u8BBE\u7F6E\u6D41\u7A0B",
        "slug": "\u7EC4\u4EF6\u5B9E\u4F8B\u7684\u8BBE\u7F6E\u6D41\u7A0B",
        "children": []
      },
      {
        "level": 2,
        "title": "setupStatefulComponent",
        "slug": "setupstatefulcomponent",
        "children": []
      },
      {
        "level": 2,
        "title": "\u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406",
        "slug": "\u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406",
        "children": []
      },
      {
        "level": 2,
        "title": "setup \u8FD4\u56DE\u503C",
        "slug": "setup-\u8FD4\u56DE\u503C",
        "children": []
      },
      {
        "level": 2,
        "title": "vue3 \u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528 setup",
        "slug": "vue3-\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528-setup",
        "children": []
      },
      {
        "level": 2,
        "title": "\u8BBE\u8BA1\u52A8\u673A",
        "slug": "\u8BBE\u8BA1\u52A8\u673A",
        "children": [
          {
            "level": 3,
            "title": "\u903B\u8F91\u7EC4\u5408\u4E0E\u590D\u7528",
            "slug": "\u903B\u8F91\u7EC4\u5408\u4E0E\u590D\u7528",
            "children": []
          }
        ]
      }
    ],
    "path": "/sourceCode/component/setup.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "",
    "headers": [],
    "path": "/sourceCode/parser/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "computed",
    "headers": [],
    "path": "/sourceCode/reactivity/computed.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "reactivity \u6E90\u7801",
    "headers": [],
    "path": "/sourceCode/reactivity/reactivity.cjs.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u624B\u5199reactivity",
    "headers": [
      {
        "level": 2,
        "title": "basic",
        "slug": "basic",
        "children": []
      },
      {
        "level": 2,
        "title": "depsMap",
        "slug": "depsmap",
        "children": []
      },
      {
        "level": 2,
        "title": "targetMap",
        "slug": "targetmap",
        "children": []
      },
      {
        "level": 2,
        "title": "Proxy and Reflect",
        "slug": "proxy-and-reflect",
        "children": []
      },
      {
        "level": 2,
        "title": "activeEffect",
        "slug": "activeeffect",
        "children": []
      },
      {
        "level": 2,
        "title": "ref",
        "slug": "ref",
        "children": []
      },
      {
        "level": 2,
        "title": "computed",
        "slug": "computed",
        "children": []
      }
    ],
    "path": "/sourceCode/reactivity/reactivity.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "watch",
    "headers": [],
    "path": "/sourceCode/reactivity/watch.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u7EC4\u4EF6\u6E32\u67D3",
    "headers": [
      {
        "level": 2,
        "title": "\u666E\u901A\u5143\u7D20\u8282\u70B9",
        "slug": "\u666E\u901A\u5143\u7D20\u8282\u70B9",
        "children": []
      },
      {
        "level": 2,
        "title": "\u7EC4\u4EF6\u8282\u70B9",
        "slug": "\u7EC4\u4EF6\u8282\u70B9",
        "children": []
      },
      {
        "level": 2,
        "title": "\u90A3\u4E48 vnode \u6709\u4EC0\u4E48\u4F18\u52BF",
        "slug": "\u90A3\u4E48-vnode-\u6709\u4EC0\u4E48\u4F18\u52BF",
        "children": []
      },
      {
        "level": 2,
        "title": "\u521B\u5EFA vnode",
        "slug": "\u521B\u5EFA-vnode",
        "children": []
      },
      {
        "level": 2,
        "title": "\u6E32\u67D3 vnode",
        "slug": "\u6E32\u67D3-vnode",
        "children": []
      },
      {
        "level": 2,
        "title": "patch \u51FD\u6570",
        "slug": "patch-\u51FD\u6570",
        "children": []
      },
      {
        "level": 2,
        "title": "\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D",
        "slug": "\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D",
        "children": []
      }
    ],
    "path": "/sourceCode/renderer/componentRender.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "createAppAPI",
    "headers": [],
    "path": "/sourceCode/renderer/createAppAPI.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u6E32\u67D3\u5668\u4E0E\u54CD\u5E94\u5F0F\u7CFB\u7EDF\u7684\u7ED3\u5408",
    "headers": [],
    "path": "/sourceCode/renderer/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "createServer",
    "headers": [
      {
        "level": 2,
        "title": "createServer",
        "slug": "createserver-1",
        "children": []
      },
      {
        "level": 2,
        "title": "ViteDevServer",
        "slug": "vitedevserver",
        "children": []
      },
      {
        "level": 2,
        "title": "\u4E00\u4E2A\u4F8B\u5B50",
        "slug": "\u4E00\u4E2A\u4F8B\u5B50",
        "children": []
      }
    ],
    "path": "/vite/sourceCode/createServer.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "http",
    "headers": [],
    "path": "/vite/sourceCode/http.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "indexHtmlMiddleware",
    "headers": [
      {
        "level": 2,
        "title": "indexHtml",
        "slug": "indexhtml",
        "children": []
      },
      {
        "level": 2,
        "title": "createDevHtmlTransformFn",
        "slug": "createdevhtmltransformfn",
        "children": []
      }
    ],
    "path": "/vite/sourceCode/indexHtmlMiddleware.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "\u4E3A\u4EC0\u4E48 vuex store \u4E2D\u7684\u503C\u9700\u8981\u653E\u5230 computed \u4E2D",
    "headers": [],
    "path": "/vue3Basic/QA/computed.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "Proxy",
    "headers": [],
    "path": "/vue3Basic/QA/proxy.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "",
    "headers": [],
    "path": "/vue3Basic/QA/watch.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "card",
    "headers": [],
    "path": "/elementPlus/components/card/",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "async-validator",
    "headers": [],
    "path": "/elementPlus/components/form/async-validator.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "form-item",
    "headers": [],
    "path": "/elementPlus/components/form/form-item.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "validation",
    "headers": [],
    "path": "/elementPlus/components/form/rules.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "input code",
    "headers": [],
    "path": "/elementPlus/components/input/input-code.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "input",
    "headers": [],
    "path": "/elementPlus/components/input/input.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "table-column",
    "headers": [
      {
        "level": 2,
        "title": "showOverflowTooltip",
        "slug": "showoverflowtooltip",
        "children": []
      },
      {
        "level": 2,
        "title": "render-helper",
        "slug": "render-helper",
        "children": []
      }
    ],
    "path": "/elementPlus/components/table/table-column.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "table",
    "headers": [],
    "path": "/elementPlus/components/table/table.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "util",
    "headers": [],
    "path": "/elementPlus/components/table/util.html",
    "pathLocale": "/",
    "extraFields": []
  },
  {
    "title": "",
    "headers": [],
    "path": "/404.html",
    "pathLocale": "/",
    "extraFields": []
  }
];
const searchIndex = vue.ref(searchIndex$1);
const useSearchIndex = () => searchIndex;
if (false) {
  __VUE_HMR_RUNTIME__.updateSearchIndex = (data2) => {
    searchIndex.value = data2;
  };
}
const nonASCIIRegExp = /[^\x00-\x7F]/;
const splitWords = (str) => str.split(/\s+/g).map((str2) => str2.trim()).filter((str2) => !!str2);
const escapeRegExp = (str) => str.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
const isQueryMatched = (query, toMatch) => {
  const toMatchStr = toMatch.join(" ");
  const words = splitWords(query);
  if (nonASCIIRegExp.test(query)) {
    return words.some((word) => toMatchStr.toLowerCase().indexOf(word) > -1);
  }
  const hasTrailingSpace = query.endsWith(" ");
  const searchRegex = new RegExp(words.map((word, index2) => {
    if (words.length === index2 + 1 && !hasTrailingSpace) {
      return `(?=.*\\b${escapeRegExp(word)})`;
    }
    return `(?=.*\\b${escapeRegExp(word)}\\b)`;
  }).join("") + ".+", "gi");
  return searchRegex.test(toMatchStr);
};
const useSearchSuggestions = ({ searchIndex: searchIndex2, routeLocale, query, maxSuggestions: maxSuggestions2 }) => {
  const localeSearchIndex = vue.computed(() => searchIndex2.value.filter((item) => item.pathLocale === routeLocale.value));
  return vue.computed(() => {
    const searchStr = query.value.trim().toLowerCase();
    if (!searchStr)
      return [];
    const suggestions = [];
    const matchPageHeader = (searchIndexItem, header) => {
      if (isQueryMatched(searchStr, [header.title])) {
        suggestions.push({
          link: `${searchIndexItem.path}#${header.slug}`,
          title: searchIndexItem.title,
          header: header.title
        });
      }
      for (const child of header.children) {
        if (suggestions.length >= maxSuggestions2.value) {
          return;
        }
        matchPageHeader(searchIndexItem, child);
      }
    };
    for (const searchIndexItem of localeSearchIndex.value) {
      if (suggestions.length >= maxSuggestions2.value) {
        break;
      }
      if (isQueryMatched(searchStr, [
        searchIndexItem.title,
        ...searchIndexItem.extraFields
      ])) {
        suggestions.push({
          link: searchIndexItem.path,
          title: searchIndexItem.title
        });
        continue;
      }
      for (const header of searchIndexItem.headers) {
        if (suggestions.length >= maxSuggestions2.value) {
          break;
        }
        matchPageHeader(searchIndexItem, header);
      }
    }
    return suggestions;
  });
};
const useSuggestionsFocus = (suggestions) => {
  const focusIndex = vue.ref(0);
  const focusNext = () => {
    if (focusIndex.value < suggestions.value.length - 1) {
      focusIndex.value += 1;
    } else {
      focusIndex.value = 0;
    }
  };
  const focusPrev = () => {
    if (focusIndex.value > 0) {
      focusIndex.value -= 1;
    } else {
      focusIndex.value = suggestions.value.length - 1;
    }
  };
  return {
    focusIndex,
    focusNext,
    focusPrev
  };
};
const SearchBox = vue.defineComponent({
  name: "SearchBox",
  props: {
    locales: {
      type: Object,
      required: false,
      default: () => ({})
    },
    hotKeys: {
      type: Array,
      required: false,
      default: () => []
    },
    maxSuggestions: {
      type: Number,
      required: false,
      default: 5
    }
  },
  setup(props) {
    const { locales: locales2, hotKeys: hotKeys2, maxSuggestions: maxSuggestions2 } = vue.toRefs(props);
    const router = vueRouter.useRouter();
    const routeLocale = useRouteLocale();
    const searchIndex2 = useSearchIndex();
    const input = vue.ref(null);
    const isActive = vue.ref(false);
    const query = vue.ref("");
    const locale = vue.computed(() => {
      var _a;
      return (_a = locales2.value[routeLocale.value]) !== null && _a !== void 0 ? _a : {};
    });
    const suggestions = useSearchSuggestions({
      searchIndex: searchIndex2,
      routeLocale,
      query,
      maxSuggestions: maxSuggestions2
    });
    const { focusIndex, focusNext, focusPrev } = useSuggestionsFocus(suggestions);
    useHotKeys({ input, hotKeys: hotKeys2 });
    const showSuggestions = vue.computed(() => isActive.value && !!suggestions.value.length);
    const onArrowUp = () => {
      if (!showSuggestions.value) {
        return;
      }
      focusPrev();
    };
    const onArrowDown = () => {
      if (!showSuggestions.value) {
        return;
      }
      focusNext();
    };
    const goTo = (index2) => {
      if (!showSuggestions.value) {
        return;
      }
      const suggestion = suggestions.value[index2];
      if (!suggestion) {
        return;
      }
      router.push(suggestion.link).then(() => {
        query.value = "";
        focusIndex.value = 0;
      });
    };
    return () => vue.h("form", {
      class: "search-box",
      role: "search"
    }, [
      vue.h("input", {
        ref: input,
        type: "search",
        placeholder: locale.value.placeholder,
        autocomplete: "off",
        spellcheck: false,
        value: query.value,
        onFocus: () => isActive.value = true,
        onBlur: () => isActive.value = false,
        onInput: (event) => query.value = event.target.value,
        onKeydown: (event) => {
          switch (event.key) {
            case "ArrowUp": {
              onArrowUp();
              break;
            }
            case "ArrowDown": {
              onArrowDown();
              break;
            }
            case "Enter": {
              event.preventDefault();
              goTo(focusIndex.value);
              break;
            }
          }
        }
      }),
      showSuggestions.value && vue.h("ul", {
        class: "suggestions",
        onMouseleave: () => focusIndex.value = -1
      }, suggestions.value.map(({ link, title, header }, index2) => vue.h("li", {
        class: [
          "suggestion",
          {
            focus: focusIndex.value === index2
          }
        ],
        onMouseenter: () => focusIndex.value = index2,
        onMousedown: () => goTo(index2)
      }, vue.h("a", {
        href: link,
        onClick: (event) => event.preventDefault()
      }, [
        vue.h("span", {
          class: "page-title"
        }, title),
        header && vue.h("span", { class: "page-header" }, `> ${header}`)
      ]))))
    ]);
  }
});
var vars$2 = "";
var search = "";
const locales = {};
const hotKeys = ["s", "/"];
const maxSuggestions = 5;
var clientAppEnhance3 = defineClientAppEnhance(({ app }) => {
  app.component("SearchBox", (props) => vue.h(SearchBox, __spreadValues({
    locales,
    hotKeys,
    maxSuggestions
  }, props)));
});
const clientAppEnhances = [
  clientAppEnhance0,
  clientAppEnhance1,
  clientAppEnhance2,
  clientAppEnhance3
];
function r(r2, e, n) {
  var i, t, o;
  e === void 0 && (e = 50), n === void 0 && (n = {});
  var a = (i = n.isImmediate) != null && i, u = (t = n.callback) != null && t, c = n.maxWait, v = Date.now(), l = [];
  function f() {
    if (c !== void 0) {
      var r3 = Date.now() - v;
      if (r3 + e >= c)
        return c - r3;
    }
    return e;
  }
  var d = function() {
    var e2 = [].slice.call(arguments), n2 = this;
    return new Promise(function(i2, t2) {
      var c2 = a && o === void 0;
      if (o !== void 0 && clearTimeout(o), o = setTimeout(function() {
        if (o = void 0, v = Date.now(), !a) {
          var i3 = r2.apply(n2, e2);
          u && u(i3), l.forEach(function(r3) {
            return (0, r3.resolve)(i3);
          }), l = [];
        }
      }, f()), c2) {
        var d2 = r2.apply(n2, e2);
        return u && u(d2), i2(d2);
      }
      l.push({ resolve: i2, reject: t2 });
    });
  };
  return d.cancel = function(r3) {
    o !== void 0 && clearTimeout(o), l.forEach(function(e2) {
      return (0, e2.reject)(r3);
    }), l = [];
  }, d;
}
const getScrollTop = () => window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
const scrollToTop = () => window.scrollTo({ top: 0, behavior: "smooth" });
var vars$1 = "";
var backToTop = "";
const BackToTop = vue.defineComponent({
  name: "BackToTop",
  setup() {
    const scrollTop = vue.ref(0);
    const show = vue.computed(() => scrollTop.value > 300);
    vue.onMounted(() => {
      scrollTop.value = getScrollTop();
      window.addEventListener("scroll", r(() => {
        scrollTop.value = getScrollTop();
      }, 100));
    });
    const backToTopEl = vue.h("div", { class: "back-to-top", onClick: scrollToTop });
    return () => vue.h(vue.Transition, {
      name: "back-to-top"
    }, {
      default: () => show.value ? backToTopEl : null
    });
  }
});
const clientAppRootComponents = [
  BackToTop
];
var clientAppSetup0 = defineClientAppSetup(() => {
  setupDarkMode();
  setupSidebarItems();
});
var clientAppSetup1 = defineClientAppSetup(() => {
  return;
});
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var nprogress$1 = { exports: {} };
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */
(function(module, exports2) {
  (function(root, factory) {
    {
      module.exports = factory();
    }
  })(commonjsGlobal, function() {
    var NProgress = {};
    NProgress.version = "0.2.0";
    var Settings = NProgress.settings = {
      minimum: 0.08,
      easing: "ease",
      positionUsing: "",
      speed: 200,
      trickle: true,
      trickleRate: 0.02,
      trickleSpeed: 800,
      showSpinner: true,
      barSelector: '[role="bar"]',
      spinnerSelector: '[role="spinner"]',
      parent: "body",
      template: '<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'
    };
    NProgress.configure = function(options) {
      var key, value;
      for (key in options) {
        value = options[key];
        if (value !== void 0 && options.hasOwnProperty(key))
          Settings[key] = value;
      }
      return this;
    };
    NProgress.status = null;
    NProgress.set = function(n) {
      var started = NProgress.isStarted();
      n = clamp(n, Settings.minimum, 1);
      NProgress.status = n === 1 ? null : n;
      var progress = NProgress.render(!started), bar = progress.querySelector(Settings.barSelector), speed = Settings.speed, ease = Settings.easing;
      progress.offsetWidth;
      queue(function(next) {
        if (Settings.positionUsing === "")
          Settings.positionUsing = NProgress.getPositioningCSS();
        css(bar, barPositionCSS(n, speed, ease));
        if (n === 1) {
          css(progress, {
            transition: "none",
            opacity: 1
          });
          progress.offsetWidth;
          setTimeout(function() {
            css(progress, {
              transition: "all " + speed + "ms linear",
              opacity: 0
            });
            setTimeout(function() {
              NProgress.remove();
              next();
            }, speed);
          }, speed);
        } else {
          setTimeout(next, speed);
        }
      });
      return this;
    };
    NProgress.isStarted = function() {
      return typeof NProgress.status === "number";
    };
    NProgress.start = function() {
      if (!NProgress.status)
        NProgress.set(0);
      var work = function() {
        setTimeout(function() {
          if (!NProgress.status)
            return;
          NProgress.trickle();
          work();
        }, Settings.trickleSpeed);
      };
      if (Settings.trickle)
        work();
      return this;
    };
    NProgress.done = function(force) {
      if (!force && !NProgress.status)
        return this;
      return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);
    };
    NProgress.inc = function(amount) {
      var n = NProgress.status;
      if (!n) {
        return NProgress.start();
      } else {
        if (typeof amount !== "number") {
          amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);
        }
        n = clamp(n + amount, 0, 0.994);
        return NProgress.set(n);
      }
    };
    NProgress.trickle = function() {
      return NProgress.inc(Math.random() * Settings.trickleRate);
    };
    (function() {
      var initial = 0, current = 0;
      NProgress.promise = function($promise) {
        if (!$promise || $promise.state() === "resolved") {
          return this;
        }
        if (current === 0) {
          NProgress.start();
        }
        initial++;
        current++;
        $promise.always(function() {
          current--;
          if (current === 0) {
            initial = 0;
            NProgress.done();
          } else {
            NProgress.set((initial - current) / initial);
          }
        });
        return this;
      };
    })();
    NProgress.render = function(fromStart) {
      if (NProgress.isRendered())
        return document.getElementById("nprogress");
      addClass(document.documentElement, "nprogress-busy");
      var progress = document.createElement("div");
      progress.id = "nprogress";
      progress.innerHTML = Settings.template;
      var bar = progress.querySelector(Settings.barSelector), perc = fromStart ? "-100" : toBarPerc(NProgress.status || 0), parent = document.querySelector(Settings.parent), spinner;
      css(bar, {
        transition: "all 0 linear",
        transform: "translate3d(" + perc + "%,0,0)"
      });
      if (!Settings.showSpinner) {
        spinner = progress.querySelector(Settings.spinnerSelector);
        spinner && removeElement(spinner);
      }
      if (parent != document.body) {
        addClass(parent, "nprogress-custom-parent");
      }
      parent.appendChild(progress);
      return progress;
    };
    NProgress.remove = function() {
      removeClass(document.documentElement, "nprogress-busy");
      removeClass(document.querySelector(Settings.parent), "nprogress-custom-parent");
      var progress = document.getElementById("nprogress");
      progress && removeElement(progress);
    };
    NProgress.isRendered = function() {
      return !!document.getElementById("nprogress");
    };
    NProgress.getPositioningCSS = function() {
      var bodyStyle = document.body.style;
      var vendorPrefix = "WebkitTransform" in bodyStyle ? "Webkit" : "MozTransform" in bodyStyle ? "Moz" : "msTransform" in bodyStyle ? "ms" : "OTransform" in bodyStyle ? "O" : "";
      if (vendorPrefix + "Perspective" in bodyStyle) {
        return "translate3d";
      } else if (vendorPrefix + "Transform" in bodyStyle) {
        return "translate";
      } else {
        return "margin";
      }
    };
    function clamp(n, min, max) {
      if (n < min)
        return min;
      if (n > max)
        return max;
      return n;
    }
    function toBarPerc(n) {
      return (-1 + n) * 100;
    }
    function barPositionCSS(n, speed, ease) {
      var barCSS;
      if (Settings.positionUsing === "translate3d") {
        barCSS = { transform: "translate3d(" + toBarPerc(n) + "%,0,0)" };
      } else if (Settings.positionUsing === "translate") {
        barCSS = { transform: "translate(" + toBarPerc(n) + "%,0)" };
      } else {
        barCSS = { "margin-left": toBarPerc(n) + "%" };
      }
      barCSS.transition = "all " + speed + "ms " + ease;
      return barCSS;
    }
    var queue = function() {
      var pending = [];
      function next() {
        var fn = pending.shift();
        if (fn) {
          fn(next);
        }
      }
      return function(fn) {
        pending.push(fn);
        if (pending.length == 1)
          next();
      };
    }();
    var css = function() {
      var cssPrefixes = ["Webkit", "O", "Moz", "ms"], cssProps = {};
      function camelCase(string) {
        return string.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function(match, letter) {
          return letter.toUpperCase();
        });
      }
      function getVendorProp(name) {
        var style = document.body.style;
        if (name in style)
          return name;
        var i = cssPrefixes.length, capName = name.charAt(0).toUpperCase() + name.slice(1), vendorName;
        while (i--) {
          vendorName = cssPrefixes[i] + capName;
          if (vendorName in style)
            return vendorName;
        }
        return name;
      }
      function getStyleProp(name) {
        name = camelCase(name);
        return cssProps[name] || (cssProps[name] = getVendorProp(name));
      }
      function applyCss(element, prop, value) {
        prop = getStyleProp(prop);
        element.style[prop] = value;
      }
      return function(element, properties) {
        var args = arguments, prop, value;
        if (args.length == 2) {
          for (prop in properties) {
            value = properties[prop];
            if (value !== void 0 && properties.hasOwnProperty(prop))
              applyCss(element, prop, value);
          }
        } else {
          applyCss(element, args[1], args[2]);
        }
      };
    }();
    function hasClass(element, name) {
      var list = typeof element == "string" ? element : classList(element);
      return list.indexOf(" " + name + " ") >= 0;
    }
    function addClass(element, name) {
      var oldList = classList(element), newList = oldList + name;
      if (hasClass(oldList, name))
        return;
      element.className = newList.substring(1);
    }
    function removeClass(element, name) {
      var oldList = classList(element), newList;
      if (!hasClass(element, name))
        return;
      newList = oldList.replace(" " + name + " ", " ");
      element.className = newList.substring(1, newList.length - 1);
    }
    function classList(element) {
      return (" " + (element.className || "") + " ").replace(/\s+/gi, " ");
    }
    function removeElement(element) {
      element && element.parentNode && element.parentNode.removeChild(element);
    }
    return NProgress;
  });
})(nprogress$1);
var vars = "";
var nprogress = "";
const useNprogress = () => {
  vue.onMounted(() => {
    const router = vueRouter.useRouter();
    const loadedPages = new Set();
    loadedPages.add(router.currentRoute.value.path);
    nprogress$1.exports.configure({ showSpinner: false });
    router.beforeEach((to) => {
      if (!loadedPages.has(to.path)) {
        nprogress$1.exports.start();
      }
    });
    router.afterEach((to) => {
      loadedPages.add(to.path);
      nprogress$1.exports.done();
    });
  });
};
var clientAppSetup2 = defineClientAppSetup(() => {
  useNprogress();
});
const clientAppSetups = [
  clientAppSetup0,
  clientAppSetup1,
  clientAppSetup2
];
const routeItems = [
  ["v-8daa1a0e", "/", "Introduction", ["/index.html", "/index.md"]],
  ["v-00c059b2", "/elementPlus/", "Introduction", ["/elementPlus/index.html", "/elementPlus/README.md"]],
  ["v-39d4ce89", "/elementPlus/tree.html", "tree", ["/elementPlus/tree", "/elementPlus/tree.md"]],
  ["v-c15a97d6", "/frontEndTool/rollup.html", "rollup \u914D\u7F6E", ["/frontEndTool/rollup", "/frontEndTool/rollup.md"]],
  ["v-5dd4be94", "/frontEndTool/skill.html", "\u6E90\u7801\u9605\u8BFB\u6280\u5DE7", ["/frontEndTool/skill", "/frontEndTool/skill.md"]],
  ["v-151eacea", "/pina/", "", ["/pina/index.html", "/pina/README.md"]],
  ["v-303438b4", "/sourceCode/Diff.html", "Diff \u7B97\u6CD5\u4F18\u5316", ["/sourceCode/Diff", "/sourceCode/Diff.md"]],
  ["v-2c1b37ee", "/sourceCode/", "Introduction", ["/sourceCode/index.html", "/sourceCode/README.md"]],
  ["v-1ab18016", "/sourceCode/v-model.html", "v-model", ["/sourceCode/v-model", "/sourceCode/v-model.md"]],
  ["v-157350f2", "/vite/", "Introduction", ["/vite/index.html", "/vite/README.md"]],
  ["v-22bb3a7b", "/vite/application.html", "Vite", ["/vite/application", "/vite/application.md"]],
  ["v-0f6b9545", "/vite/vue-dev-server.html", "vue-dev-server", ["/vite/vue-dev-server", "/vite/vue-dev-server.md"]],
  ["v-5db951d1", "/vite/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html", "\u5904\u7406\u9759\u6001\u8D44\u6E90", ["/vite/\u5904\u7406\u9759\u6001\u8D44\u6E90.html", "/vite/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90", "/vite/\u5904\u7406\u9759\u6001\u8D44\u6E90.md", "/vite/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.md"]],
  ["v-d618035e", "/vue3Basic/JSX.html", "JSX", ["/vue3Basic/JSX", "/vue3Basic/JSX.md"]],
  ["v-29184f47", "/vue3Basic/", "Introduction", ["/vue3Basic/index.html", "/vue3Basic/README.md"]],
  ["v-bbe7f31a", "/vue3Basic/Vue3Api.html", "Vue3 API", ["/vue3Basic/Vue3Api", "/vue3Basic/Vue3Api.md"]],
  ["v-508a9cca", "/vue3Basic/auth.html", "\u6743\u9650", ["/vue3Basic/auth", "/vue3Basic/auth.md"]],
  ["v-3c9456e8", "/vue3Basic/reactivityAPI.html", "\u54CD\u5E94\u5F0F\u7CFB\u7EDF API", ["/vue3Basic/reactivityAPI", "/vue3Basic/reactivityAPI.md"]],
  ["v-a42c4298", "/vue3Basic/vue3Project.html", "\u642D\u5EFA\u57FA\u4E8E vue3 \u7684\u524D\u7AEF\u67B6\u6784", ["/vue3Basic/vue3Project", "/vue3Basic/vue3Project.md"]],
  ["v-7f6e4968", "/vue3Basic/vue3optimize.html", "Vue3 \u7684\u4F18\u5316", ["/vue3Basic/vue3optimize", "/vue3Basic/vue3optimize.md"]],
  ["v-3db83299", "/vuePress/", "Introduction", ["/vuePress/index.html", "/vuePress/README.md"]],
  ["v-2dedee22", "/vuePress/application.html", "VuePress \u7B14\u8BB0", ["/vuePress/application", "/vuePress/application.md"]],
  ["v-6907e510", "/vuePress/sourceCode.html", "VuePress \u67B6\u6784\u8BBE\u8BA1", ["/vuePress/sourceCode", "/vuePress/sourceCode.md"]],
  ["v-4244654e", "/vueRouter/", "Introduction", ["/vueRouter/index.html", "/vueRouter/README.md"]],
  ["v-d7f3ee3c", "/vueRouter/application.html", "Vue Router 4 \u65B0\u7279\u6027", ["/vueRouter/application", "/vueRouter/application.md"]],
  ["v-f66c67fe", "/vueRouter/browserRouter.html", "\u539F\u751F\u8DEF\u7531\u57FA\u7840", ["/vueRouter/browserRouter", "/vueRouter/browserRouter.md"]],
  ["v-00fc65d3", "/vueRouter/code.html", "vue-router v4.0.12", ["/vueRouter/code", "/vueRouter/code.md"]],
  ["v-438f331a", "/vueRouter/miniVueRouter.html", "miniVueRouter", ["/vueRouter/miniVueRouter", "/vueRouter/miniVueRouter.md"]],
  ["v-08959ab8", "/vueRouter/sourceCode.html", "Vue Router \u6E90\u7801\u89E3\u8BFB", ["/vueRouter/sourceCode", "/vueRouter/sourceCode.md"]],
  ["v-15788f64", "/vuex/", "vuex \u7B14\u8BB0", ["/vuex/index.html", "/vuex/README.md"]],
  ["v-f5df4e28", "/vuex/miniVuex.html", "\u81EA\u5B9A\u4E49 Vuex", ["/vuex/miniVuex", "/vuex/miniVuex.md"]],
  ["v-81d9f8bc", "/vuex/plugin.html", "vuex \u63D2\u4EF6", ["/vuex/plugin", "/vuex/plugin.md"]],
  ["v-c1f44ade", "/vuex/q&a.html", "vuex \u6709\u5173\u7684\u95EE\u9898", ["/vuex/q&a", "/vuex/q&a.md"]],
  ["v-73238b6e", "/vuex/sourceCode_v3.html", "vuex3 \u6E90\u7801", ["/vuex/sourceCode_v3", "/vuex/sourceCode_v3.md"]],
  ["v-6fb9da30", "/vuex/sourceCode_v4.html", "vuex4 \u6E90\u7801\u89E3\u8BFB", ["/vuex/sourceCode_v4", "/vuex/sourceCode_v4.md"]],
  ["v-dad5dad4", "/vuex/vuexCode.html", "vuex v4.0.2", ["/vuex/vuexCode", "/vuex/vuexCode.md"]],
  ["v-4ffb9324", "/elementPlus/hooks/use-attrs.html", "use-attrs", ["/elementPlus/hooks/use-attrs", "/elementPlus/hooks/use-attrs.md"]],
  ["v-592d0456", "/elementPlus/hooks/use-namespace.html", "useNamespace", ["/elementPlus/hooks/use-namespace", "/elementPlus/hooks/use-namespace.md"]],
  ["v-1f48a459", "/elementPlus/theme-chalk/BEM.html", "BEM", ["/elementPlus/theme-chalk/BEM", "/elementPlus/theme-chalk/BEM.md"]],
  ["v-b8062c82", "/elementPlus/theme-chalk/scss.html", "scss", ["/elementPlus/theme-chalk/scss", "/elementPlus/theme-chalk/scss.md"]],
  ["v-5801bab2", "/elementPlus/utils/buildProps.html", "buildProps", ["/elementPlus/utils/buildProps", "/elementPlus/utils/buildProps.md"]],
  ["v-1b208c8b", "/sourceCode/DeepDive/Render-function.html", "Render function", ["/sourceCode/DeepDive/Render-function", "/sourceCode/DeepDive/Render-function.md"]],
  ["v-312af42a", "/sourceCode/DeepDive/creating-a-mini-vue.html", "creating a mini vue", ["/sourceCode/DeepDive/creating-a-mini-vue", "/sourceCode/DeepDive/creating-a-mini-vue.md"]],
  ["v-5945442a", "/sourceCode/DeepDive/miniVue.html", "mini vue", ["/sourceCode/DeepDive/miniVue", "/sourceCode/DeepDive/miniVue.md"]],
  ["v-154ce3f6", "/sourceCode/DeepDive/useFetch.html", "useFetch", ["/sourceCode/DeepDive/useFetch", "/sourceCode/DeepDive/useFetch.md"]],
  ["v-7359a5bc", "/sourceCode/component/setup.html", "Setup", ["/sourceCode/component/setup", "/sourceCode/component/setup.md"]],
  ["v-57862f7c", "/sourceCode/parser/", "", ["/sourceCode/parser/index.html", "/sourceCode/parser/index.md"]],
  ["v-4800f6cd", "/sourceCode/reactivity/computed.html", "computed", ["/sourceCode/reactivity/computed", "/sourceCode/reactivity/computed.md"]],
  ["v-b3dbcc8c", "/sourceCode/reactivity/reactivity.cjs.html", "reactivity \u6E90\u7801", ["/sourceCode/reactivity/reactivity.cjs", "/sourceCode/reactivity/reactivity.cjs.md"]],
  ["v-f2b64710", "/sourceCode/reactivity/reactivity.html", "\u624B\u5199reactivity", ["/sourceCode/reactivity/reactivity", "/sourceCode/reactivity/reactivity.md"]],
  ["v-38a137ae", "/sourceCode/reactivity/watch.html", "watch", ["/sourceCode/reactivity/watch", "/sourceCode/reactivity/watch.md"]],
  ["v-024bb864", "/sourceCode/renderer/componentRender.html", "\u7EC4\u4EF6\u6E32\u67D3", ["/sourceCode/renderer/componentRender", "/sourceCode/renderer/componentRender.md"]],
  ["v-5dd6cdc6", "/sourceCode/renderer/createAppAPI.html", "createAppAPI", ["/sourceCode/renderer/createAppAPI", "/sourceCode/renderer/createAppAPI.md"]],
  ["v-d8fea8c4", "/sourceCode/renderer/", "\u6E32\u67D3\u5668\u4E0E\u54CD\u5E94\u5F0F\u7CFB\u7EDF\u7684\u7ED3\u5408", ["/sourceCode/renderer/index.html", "/sourceCode/renderer/index.md"]],
  ["v-16a9f525", "/vite/sourceCode/createServer.html", "createServer", ["/vite/sourceCode/createServer", "/vite/sourceCode/createServer.md"]],
  ["v-6818c89c", "/vite/sourceCode/http.html", "http", ["/vite/sourceCode/http", "/vite/sourceCode/http.md"]],
  ["v-2d7f1302", "/vite/sourceCode/indexHtmlMiddleware.html", "indexHtmlMiddleware", ["/vite/sourceCode/indexHtmlMiddleware", "/vite/sourceCode/indexHtmlMiddleware.md"]],
  ["v-b5fb9518", "/vue3Basic/QA/computed.html", "\u4E3A\u4EC0\u4E48 vuex store \u4E2D\u7684\u503C\u9700\u8981\u653E\u5230 computed \u4E2D", ["/vue3Basic/QA/computed", "/vue3Basic/QA/computed.md"]],
  ["v-78e6b6ba", "/vue3Basic/QA/proxy.html", "Proxy", ["/vue3Basic/QA/proxy", "/vue3Basic/QA/proxy.md"]],
  ["v-2c83fee2", "/vue3Basic/QA/watch.html", "", ["/vue3Basic/QA/watch", "/vue3Basic/QA/watch.md"]],
  ["v-256286d0", "/elementPlus/components/card/", "card", ["/elementPlus/components/card/index.html", "/elementPlus/components/card/index.md"]],
  ["v-07e8239c", "/elementPlus/components/form/async-validator.html", "async-validator", ["/elementPlus/components/form/async-validator", "/elementPlus/components/form/async-validator.md"]],
  ["v-6b1ab37e", "/elementPlus/components/form/form-item.html", "form-item", ["/elementPlus/components/form/form-item", "/elementPlus/components/form/form-item.md"]],
  ["v-3095eea6", "/elementPlus/components/form/rules.html", "validation", ["/elementPlus/components/form/rules", "/elementPlus/components/form/rules.md"]],
  ["v-73407006", "/elementPlus/components/input/input-code.html", "input code", ["/elementPlus/components/input/input-code", "/elementPlus/components/input/input-code.md"]],
  ["v-0233039b", "/elementPlus/components/input/input.html", "input", ["/elementPlus/components/input/input", "/elementPlus/components/input/input.md"]],
  ["v-fef4e608", "/elementPlus/components/table/table-column.html", "table-column", ["/elementPlus/components/table/table-column", "/elementPlus/components/table/table-column.md"]],
  ["v-46db3393", "/elementPlus/components/table/table.html", "table", ["/elementPlus/components/table/table", "/elementPlus/components/table/table.md"]],
  ["v-50482b4f", "/elementPlus/components/table/util.html", "util", ["/elementPlus/components/table/util", "/elementPlus/components/table/util.md"]],
  ["v-3706649a", "/404.html", "", ["/404"]]
];
const pagesRoutes = routeItems.reduce((result, [name, path, title, redirects]) => {
  result.push({
    name,
    path,
    component: Vuepress,
    meta: { title }
  }, ...redirects.map((item) => ({
    path: item,
    redirect: path
  })));
  return result;
}, [
  {
    name: "404",
    path: "/:catchAll(.*)",
    component: Vuepress
  }
]);
const provideGlobalComputed = (app, router) => {
  const routeLocale = vue.computed(() => resolveRouteLocale(siteData.value.locales, router.currentRoute.value.path));
  const siteLocaleData = vue.computed(() => resolveSiteLocaleData(siteData.value, routeLocale.value));
  const pageFrontmatter = vue.computed(() => resolvePageFrontmatter(pageData.value));
  const pageHeadTitle = vue.computed(() => resolvePageHeadTitle(pageData.value, siteLocaleData.value));
  const pageHead = vue.computed(() => resolvePageHead(pageHeadTitle.value, pageFrontmatter.value, siteLocaleData.value));
  const pageLang = vue.computed(() => resolvePageLang(pageData.value));
  app.provide(routeLocaleSymbol, routeLocale);
  app.provide(siteLocaleDataSymbol, siteLocaleData);
  app.provide(pageFrontmatterSymbol, pageFrontmatter);
  app.provide(pageHeadTitleSymbol, pageHeadTitle);
  app.provide(pageHeadSymbol, pageHead);
  app.provide(pageLangSymbol, pageLang);
  Object.defineProperties(app.config.globalProperties, {
    $frontmatter: { get: () => pageFrontmatter.value },
    $headTitle: { get: () => pageHeadTitle.value },
    $lang: { get: () => pageLang.value },
    $page: { get: () => pageData.value },
    $routeLocale: { get: () => routeLocale.value },
    $site: { get: () => siteData.value },
    $siteLocale: { get: () => siteLocaleData.value },
    $withBase: { get: () => withBase }
  });
};
const registerGlobalComponents = (app) => {
  app.component("ClientOnly", ClientOnly);
  app.component("Content", Content);
  app.component("OutboundLink", OutboundLink);
};
const appCreator = vue.createSSRApp;
const historyCreator = vueRouter.createMemoryHistory;
const createVueApp = async () => {
  const app = appCreator({
    name: "VuepressApp",
    setup() {
      setupUpdateHead();
      for (const clientAppSetup of clientAppSetups) {
        clientAppSetup();
      }
      return () => [
        vue.h(vueRouter.RouterView),
        ...clientAppRootComponents.map((comp) => vue.h(comp))
      ];
    }
  });
  const router = vueRouter.createRouter({
    history: historyCreator(shared.removeEndingSlash(siteData.value.base)),
    routes: pagesRoutes,
    scrollBehavior: (to, from, savedPosition) => {
      if (savedPosition)
        return savedPosition;
      if (to.hash)
        return { el: to.hash };
      return { top: 0 };
    }
  });
  router.beforeResolve(async (to, from) => {
    var _a;
    if (to.path !== from.path || from === vueRouter.START_LOCATION) {
      [pageData.value] = await Promise.all([
        resolvePageData(to.name),
        (_a = pagesComponents[to.name]) === null || _a === void 0 ? void 0 : _a.__asyncLoader()
      ]);
    }
  });
  provideGlobalComputed(app, router);
  registerGlobalComponents(app);
  for (const clientAppEnhance of clientAppEnhances) {
    await clientAppEnhance({ app, router, siteData });
  }
  app.use(router);
  return {
    app,
    router
  };
};
var _export_sfc = (sfc, props) => {
  for (const [key, val] of props) {
    sfc[key] = val;
  }
  return sfc;
};
const _sfc_main$1j = {};
function _sfc_ssrRender$15(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>\u4E00\u4E9B Vue3 \u8D44\u6599\uFF1A</p><ul><li><a href="https://zhuanlan.zhihu.com/p/68477600" target="_blank" rel="noopener noreferrer">Vue Function-based API RFC`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.bilibili.com/video/BV1x54y1V7H6?from=search&amp;seid=1152161250143388809" target="_blank" rel="noopener noreferrer">VueUse \u4F5C\u8005 Anthony Fu \u5206\u4EAB\u53EF\u7EC4\u5408\u7684 Vue`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.bilibili.com/video/BV1SZ4y1x7a9/?spm_id_from=333.788.b_7265636f5f6c697374.6" target="_blank" rel="noopener noreferrer">VUE3 \u54CD\u5E94\u5F0F\u539F\u7406`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.bilibili.com/video/BV1rC4y187Vw?p=10" target="_blank" rel="noopener noreferrer">\u5B9E\u73B0\u7B80\u6613 VUE3 \u6559\u7A0B`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener noreferrer">snabbdom`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.vuemastery.com/blog" target="_blank" rel="noopener noreferrer">vuemastery`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.yuque.com/vueconf/mkwv0c" target="_blank" rel="noopener noreferrer">VueConf 2021`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://zhuanlan.zhihu.com/p/146097763" target="_blank" rel="noopener noreferrer">\u6DF1\u5165\u7406\u89E3 Vue3 Reactivity API`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://github.com/orgs/Code-Pop/repositories" target="_blank" rel="noopener noreferrer">Vue Mastery`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://mp.weixin.qq.com/s/71fWC3Tox0DTLOL-Nm-wQg" target="_blank" rel="noopener noreferrer">[\u5EFA\u8BAE\u6536\u85CF] \u4F60\u60F3\u77E5\u9053\u7684 Vue3 \u6838\u5FC3\u6E90\u7801\u8FD9\u91CC\u90FD\u6709`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.kancloud.cn/wangjiachong/vue_notes/1016421" target="_blank" rel="noopener noreferrer">vue \u7B14\u8BB0`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://zhuanlan.zhihu.com/p/133819602" target="_blank" rel="noopener noreferrer">Vue3 \u7A76\u7ADF\u597D\u5728\u54EA\u91CC\uFF1F\uFF08\u548C React Hook \u7684\u8BE6\u7EC6\u5BF9\u6BD4\uFF09`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><p>\u5DE5\u5177\uFF1A</p><ul><li><a href="https://vue-next-template-explorer.netlify.app/" target="_blank" rel="noopener noreferrer">vue-next-template-explorer`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.yuque.com/huajinbo/lxhzqg/susggx" target="_blank" rel="noopener noreferrer">Rollup + TS \u5E93\uFF08library\uFF09\u5F00\u53D1\u6307\u5357\uFF081\uFF09\u2014\u2014 \u5DE5\u7A0B\u642D\u5EFA`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$1j = _sfc_main$1j.setup;
_sfc_main$1j.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/index.html.vue");
  return _sfc_setup$1j ? _sfc_setup$1j(props, ctx) : void 0;
};
var index_html$y = /* @__PURE__ */ _export_sfc(_sfc_main$1j, [["ssrRender", _sfc_ssrRender$15]]);
var index_html$z = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$y
});
const _sfc_main$1i = {};
function _sfc_ssrRender$14(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><ul><li><a href="https://juejin.cn/post/6914598983205847053" target="_blank" rel="noopener noreferrer">Vue 3 \u7EC4\u4EF6\u5E93\uFF1Aelement-plus \u6E90\u7801\u5206\u6790`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$1i = _sfc_main$1i.setup;
_sfc_main$1i.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/index.html.vue");
  return _sfc_setup$1i ? _sfc_setup$1i(props, ctx) : void 0;
};
var index_html$w = /* @__PURE__ */ _export_sfc(_sfc_main$1i, [["ssrRender", _sfc_ssrRender$14]]);
var index_html$x = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$w
});
const _sfc_main$1h = {};
function _sfc_ssrRender$13(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="tree" tabindex="-1"><a class="header-anchor" href="#tree" aria-hidden="true">#</a> tree</h1><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
    <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node.visible<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node$<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-tree-node<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{
      <span class="token punctuation">&#39;</span>is-expanded<span class="token punctuation">&#39;</span>: expanded,
      <span class="token punctuation">&#39;</span>is-current<span class="token punctuation">&#39;</span>: node.isCurrent,
      <span class="token punctuation">&#39;</span>is-hidden<span class="token punctuation">&#39;</span>: !node.visible,
      <span class="token punctuation">&#39;</span>is-focusable<span class="token punctuation">&#39;</span>: !node.disabled,
      <span class="token punctuation">&#39;</span>is-checked<span class="token punctuation">&#39;</span>: !node.disabled &amp;&amp; node.checked,
    }<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>treeitem<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>-1<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:aria-expanded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>expanded<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:aria-disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node.disabled<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:aria-checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node.checked<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tree.props.draggable<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:data-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getNodeKey(node)<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClick<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@contextmenu</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleContextMenu<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@dragstart.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleDragStart<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@dragover.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleDragOver<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@dragend.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleDragEnd<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@drop.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleDrop<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-tree-node__content<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ <span class="token punctuation">&#39;</span>padding-left<span class="token punctuation">&#39;</span>: (node.level - 1) * tree.props.indent + <span class="token punctuation">&#39;</span>px<span class="token punctuation">&#39;</span> }<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>
        <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[
          {
            <span class="token punctuation">&#39;</span>is-leaf<span class="token punctuation">&#39;</span>: node.isLeaf,
            expanded: !node.isLeaf &amp;&amp; expanded,
          },
          <span class="token punctuation">&#39;</span>el-tree-node__expand-icon<span class="token punctuation">&#39;</span>,
          tree.props.iconClass ? tree.props.iconClass : <span class="token punctuation">&#39;</span>el-icon-caret-right<span class="token punctuation">&#39;</span>,
        ]<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleExpandIconClick<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-checkbox</span>
        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showCheckbox<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:model-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node.checked<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:indeterminate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node.indeterminate<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!!node.disabled<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@click.stop</span>
        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCheckChange<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>
        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node.loading<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-tree-node__loading-icon el-icon-loading<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node-content</span> <span class="token attr-name">:node</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:render-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>renderContent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-collapse-transition</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!renderAfterExpand || childNodeRendered<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>expanded<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-tree-node__children<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>group<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:aria-expanded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>expanded<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tree-node</span>
          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child in node.childNodes<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getNodeKey(child)<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">:render-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>renderContent<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">:render-after-expand</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>renderAfterExpand<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">:show-checkbox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showCheckbox<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">:node</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">@node-expand</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleChildNodeExpand<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-collapse-transition</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$1h = _sfc_main$1h.setup;
_sfc_main$1h.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/tree.html.vue");
  return _sfc_setup$1h ? _sfc_setup$1h(props, ctx) : void 0;
};
var tree_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1h, [["ssrRender", _sfc_ssrRender$13]]);
var tree_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": tree_html$1
});
const _sfc_main$1g = {};
function _sfc_ssrRender$12(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="rollup-\u914D\u7F6E" tabindex="-1"><a class="header-anchor" href="#rollup-\u914D\u7F6E" aria-hidden="true">#</a> rollup \u914D\u7F6E</h1><p>\u4E00\u4E2A\u9AD8\u6548\u7684 ES Modules \u6253\u5305\u5668\uFF0C\u5145\u5206\u5229\u7528 ES Modules \u7684\u5404\u9879\u7279\u6027\uFF0C\u6784\u5EFA\u51FA\u7ED3\u6784\u6241\u5E73\uFF0C\u6027\u80FD\u51FA\u4F17\u7684\u7C7B\u5E93\u3002</p><h2 id="rollup-config-js" tabindex="-1"><a class="header-anchor" href="#rollup-config-js" aria-hidden="true">#</a> rollup.config.js</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  input<span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span>
  output<span class="token operator">:</span><span class="token punctuation">{</span>
    banner<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    file<span class="token operator">:</span><span class="token string">&#39;dist/bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// \u8F93\u51FA\u6587\u4EF6</span>
    format<span class="token operator">:</span> &#39;cjs<span class="token punctuation">,</span>
    name<span class="token operator">:</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
    sourcemap<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    globals<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string">&#39;jquery&#39;</span><span class="token operator">:</span><span class="token string">&#39;$&#39;</span> <span class="token comment">//\u544A\u8BC9rollup \u5168\u5C40\u53D8\u91CF$\u5373\u662Fjquery</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token function">buble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> module<span class="token operator">:</span> config<span class="token punctuation">.</span>format <span class="token operator">===</span> <span class="token string">&#39;es&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="banner" tabindex="-1"><a class="header-anchor" href="#banner" aria-hidden="true">#</a> banner</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> banner <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/*!
 * v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pkg<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
 * (c) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
 * @license MIT
 */</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre></div><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> format</h2><ul><li>amd \u2013 \u5F02\u6B65\u6A21\u5757\u5B9A\u4E49\uFF0C\u7528\u4E8E\u50CF RequireJS \u8FD9\u6837\u7684\u6A21\u5757\u52A0\u8F7D\u5668</li><li>cjs \u2013 CommonJS\uFF0C\u9002\u7528\u4E8E Node \u548C Browserify/Webpack</li><li>esm \u2013 \u5C06\u8F6F\u4EF6\u5305\u4FDD\u5B58\u4E3A ES \u6A21\u5757\u6587\u4EF6\uFF0C\u5728\u73B0\u4EE3\u6D4F\u89C8\u5668\u4E2D\u53EF\u4EE5\u901A\u8FC7 <code>&lt;script type=module&gt;</code> \u6807\u7B7E\u5F15\u5165</li><li>iife \u2013 \u4E00\u4E2A\u81EA\u52A8\u6267\u884C\u7684\u529F\u80FD\uFF0C\u9002\u5408\u4F5C\u4E3A <code>&lt;script&gt;</code> \u6807\u7B7E\u3002\uFF08\u5982\u679C\u8981\u4E3A\u5E94\u7528\u7A0B\u5E8F\u521B\u5EFA\u4E00\u4E2A\u6346\u7ED1\u5305\uFF0C\u60A8\u53EF\u80FD\u60F3\u8981\u4F7F\u7528\u5B83\uFF0C\u56E0\u4E3A\u5B83\u4F1A\u4F7F\u6587\u4EF6\u5927\u5C0F\u53D8\u5C0F\u3002\uFF09</li><li>umd \u2013 \u901A\u7528\u6A21\u5757\u5B9A\u4E49\uFF0C\u4EE5 amd\uFF0Ccjs \u548C iife \u4E3A\u4E00\u4F53</li><li>system - SystemJS \u52A0\u8F7D\u5668\u683C\u5F0F</li></ul><h2 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> plugins</h2><h3 id="rollup-plugin-buble" tabindex="-1"><a class="header-anchor" href="#rollup-plugin-buble" aria-hidden="true">#</a> @rollup/plugin-buble</h3><p>\u5C06 ES6 \u4EE3\u7801\u7F16\u8BD1\u6210 ES5\u3002</p><h3 id="rollup-plugin-babel" tabindex="-1"><a class="header-anchor" href="#rollup-plugin-babel" aria-hidden="true">#</a> rollup-plugin-babel</h3><p><code>.babelrc</code></p><div class="language-json ext-json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;transform-regenerator&quot;</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>\u8BBE\u7F6E &quot;modules&quot;: false \uFF0C\u5426\u5219 Babel \u4F1A\u5728 Rollup \u505A\u5904\u7406\u4E4B\u524D\uFF0C\u5C06\u6211\u4EEC\u7684\u6A21\u5757\u8F6C\u6210 CommonJS\u3002</li><li>\u5C06 <code>.babelrc</code> \u6587\u4EF6\u653E\u5728 src \u4E2D\uFF0C\u800C\u4E0D\u662F\u6839\u76EE\u5F55\u4E0B\u3002 \u8FD9\u5141\u8BB8\u6211\u4EEC\u5BF9\u4E8E\u4E0D\u540C\u7684\u4EFB\u52A1\u6709\u4E0D\u540C\u7684 <code>.babelrc</code> \u914D\u7F6E\uFF0C\u6BD4\u5982\u50CF\u6D4B\u8BD5\uFF0C\u5982\u679C\u6211\u4EEC\u4EE5\u540E\u9700\u8981\u7684\u8BDD - \u901A\u5E38\u4E3A\u5355\u72EC\u7684\u4EFB\u52A1\u5355\u72EC\u914D\u7F6E\u4F1A\u66F4\u597D\u3002</li></ul><h3 id="rollup-plugin-node-resolve" tabindex="-1"><a class="header-anchor" href="#rollup-plugin-node-resolve" aria-hidden="true">#</a> rollup/plugin-node-resolve</h3><ul><li>@rollup/plugin-node-resolve \u63D2\u4EF6\u5141\u8BB8\u6211\u4EEC\u52A0\u8F7D\u7B2C\u4E09\u65B9\u6A21\u5757</li><li>@rollup/plugin-commons \u63D2\u4EF6\u5C06\u5B83\u4EEC\u8F6C\u6362\u4E3A ES6 \u7248\u672C</li></ul><h3 id="rollup-plugin-terser" tabindex="-1"><a class="header-anchor" href="#rollup-plugin-terser" aria-hidden="true">#</a> rollup-plugin-terser</h3><p>terser \u4F7F\u7528 terser \u538B\u7F29\u4EE3\u7801</p><h2 id="rollup-\u7684\u4F18\u52BF\u548C\u4E0D\u8DB3" tabindex="-1"><a class="header-anchor" href="#rollup-\u7684\u4F18\u52BF\u548C\u4E0D\u8DB3" aria-hidden="true">#</a> Rollup \u7684\u4F18\u52BF\u548C\u4E0D\u8DB3</h2><ul><li>\u8F93\u51FA\u7ED3\u679C\u66F4\u52A0\u6241\u5E73\uFF0C\u6267\u884C\u6548\u7387\u66F4\u9AD8\uFF1B</li><li>\u81EA\u52A8\u79FB\u9664\u672A\u5F15\u7528\u4EE3\u7801\uFF1B</li><li>\u6253\u5305\u7ED3\u679C\u4F9D\u7136\u5B8C\u5168\u53EF\u8BFB\u3002</li><li>\u4F46\u662F\u5B83\u7684\u7F3A\u70B9\u4E5F\u540C\u6837\u660E\u663E\uFF1A</li></ul><p>\u4E0D\u8DB3\uFF1A</p><ul><li><p>\u52A0\u8F7D\u975E ESM \u7684\u7B2C\u4E09\u65B9\u6A21\u5757\u6BD4\u8F83\u590D\u6742\uFF1B</p></li><li><p>\u56E0\u4E3A\u6A21\u5757\u6700\u7EC8\u90FD\u88AB\u6253\u5305\u5230\u5168\u5C40\u4E2D\uFF0C\u6240\u4EE5\u65E0\u6CD5\u5B9E\u73B0 HMR\uFF1B</p></li><li><p>\u6D4F\u89C8\u5668\u73AF\u5883\u4E2D\uFF0C\u4EE3\u7801\u62C6\u5206\u529F\u80FD\u5FC5\u987B\u4F7F\u7528 Require.js \u8FD9\u6837\u7684 AMD \u5E93\u3002</p></li><li><p><a href="https://rollupjs.org" target="_blank" rel="noopener noreferrer">rollup.js`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></p></li></ul><!--]-->`);
}
const _sfc_setup$1g = _sfc_main$1g.setup;
_sfc_main$1g.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/frontEndTool/rollup.html.vue");
  return _sfc_setup$1g ? _sfc_setup$1g(props, ctx) : void 0;
};
var rollup_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["ssrRender", _sfc_ssrRender$12]]);
var rollup_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": rollup_html$1
});
const _sfc_main$1f = {};
function _sfc_ssrRender$11(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="\u6E90\u7801\u9605\u8BFB\u6280\u5DE7" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801\u9605\u8BFB\u6280\u5DE7" aria-hidden="true">#</a> \u6E90\u7801\u9605\u8BFB\u6280\u5DE7</h1><h2 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h2><p>\u5728 <code>webpack.config.js</code> \u4E2D\u52A0 <code>source-map</code> \u6765\u8C03\u8BD5\u6E90\u7801</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  mode<span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  devtool<span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$1f = _sfc_main$1f.setup;
_sfc_main$1f.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/frontEndTool/skill.html.vue");
  return _sfc_setup$1f ? _sfc_setup$1f(props, ctx) : void 0;
};
var skill_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["ssrRender", _sfc_ssrRender$11]]);
var skill_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": skill_html$1
});
const _sfc_main$1e = {};
function _sfc_ssrRender$10(_ctx, _push, _parent, _attrs) {
}
const _sfc_setup$1e = _sfc_main$1e.setup;
_sfc_main$1e.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/pina/index.html.vue");
  return _sfc_setup$1e ? _sfc_setup$1e(props, ctx) : void 0;
};
var index_html$u = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["ssrRender", _sfc_ssrRender$10]]);
var index_html$v = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$u
});
const _sfc_main$1d = {};
function _sfc_ssrRender$$(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="diff-\u7B97\u6CD5\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#diff-\u7B97\u6CD5\u4F18\u5316" aria-hidden="true">#</a> Diff \u7B97\u6CD5\u4F18\u5316</h1><p>Vue3 \u4E2D\u7684\u4E3B\u8981\u4F18\u5316\u70B9\u4E3A</p><ul><li>\u5728 updateChildren \u65F6\u53CC\u7AEF\u6BD4\u8F83 -&gt; \u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217</li><li>\u5168\u91CF Diff -&gt; \u9759\u6001\u6807\u8BB0 + \u975E\u5168\u91CF Diff</li><li>\u9759\u6001\u63D0\u5347</li></ul><p>updateChildren</p><ul><li>Vue2 <ul><li>\u5934 - \u5934\u6BD4\u8F83</li><li>\u5C3E - \u5C3E\u6BD4\u8F83</li><li>\u5934 - \u5C3E\u6BD4\u8F83 -\u5C3E - \u5934\u6BD4\u8F83</li></ul></li><li>Vue3 <ul><li>\u5934 - \u5934\u6BD4\u8F83</li><li>\u5C3E - \u5C3E\u6BD4\u8F83</li><li>\u57FA\u4E8E\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u8FDB\u884C\u79FB\u52A8 / \u5220\u9664 / \u65B0\u589E</li></ul></li></ul><!--]-->`);
}
const _sfc_setup$1d = _sfc_main$1d.setup;
_sfc_main$1d.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/Diff.html.vue");
  return _sfc_setup$1d ? _sfc_setup$1d(props, ctx) : void 0;
};
var Diff_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["ssrRender", _sfc_ssrRender$$]]);
var Diff_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Diff_html$1
});
const _sfc_main$1c = {};
function _sfc_ssrRender$_(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/87409653" target="_blank" rel="noopener noreferrer">vue3 \u54CD\u5E94\u5F0F\u7CFB\u7EDF\u6E90\u7801\u89E3\u6790-Reactive \u7BC7`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$1c = _sfc_main$1c.setup;
_sfc_main$1c.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/index.html.vue");
  return _sfc_setup$1c ? _sfc_setup$1c(props, ctx) : void 0;
};
var index_html$s = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["ssrRender", _sfc_ssrRender$_]]);
var index_html$t = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$s
});
const _sfc_main$1b = {};
function _sfc_ssrRender$Z(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> v-model</h1><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> vModelText <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> <span class="token punctuation">{</span> modifiers<span class="token operator">:</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> trim<span class="token punctuation">,</span> number <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>_assign <span class="token operator">=</span> <span class="token function">getModelAssigner</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> castToNumber <span class="token operator">=</span>
      number <span class="token operator">||</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> lazy <span class="token operator">?</span> <span class="token string">&#39;change&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> domValue <span class="token operator">=</span> el<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        domValue <span class="token operator">=</span> domValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>castToNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        domValue <span class="token operator">=</span> shared<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span>domValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      el<span class="token punctuation">.</span><span class="token function">_assign</span><span class="token punctuation">(</span>domValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span>value <span class="token operator">=</span> el<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;compositionstart&#39;</span><span class="token punctuation">,</span> onCompositionStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;compositionend&#39;</span><span class="token punctuation">,</span> onCompositionEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Safari &lt; 10.2 &amp; UIWebView doesn&#39;t fire compositionend when</span>
      <span class="token comment">// switching focus before confirming composition choice</span>
      <span class="token comment">// this also fixes the issue where some browsers e.g. iOS Chrome</span>
      <span class="token comment">// fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.</span>
      <span class="token function">addEventListener</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onCompositionEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// set value on mounted so it&#39;s after min/max for type=&quot;range&quot;</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>value <span class="token operator">=</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> modifiers<span class="token operator">:</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> trim<span class="token punctuation">,</span> number <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    el<span class="token punctuation">.</span>_assign <span class="token operator">=</span> <span class="token function">getModelAssigner</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// avoid clearing unresolved text. #2302</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>activeElement <span class="token operator">===</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>trim <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token punctuation">(</span>number <span class="token operator">||</span> el<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        shared<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> value
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> newValue <span class="token operator">=</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>value <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5728\u81EA\u5B9A\u4E49\u7EC4\u4EF6\u4E0A\u4F5C\u7528 v-model</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;custom-input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;modelValue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;input v-model=&quot;value&quot;&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  computed<span class="token operator">:</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modelValue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:modelValue&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$1b = _sfc_main$1b.setup;
_sfc_main$1b.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/v-model.html.vue");
  return _sfc_setup$1b ? _sfc_setup$1b(props, ctx) : void 0;
};
var vModel_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["ssrRender", _sfc_ssrRender$Z]]);
var vModel_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": vModel_html$1
});
const _sfc_main$1a = {};
function _sfc_ssrRender$Y(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p><a href="https://vitejs.cn/vite3-cn/" target="_blank" rel="noopener noreferrer">vite3 \u4E2D\u6587\u7F51`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></p><!--]-->`);
}
const _sfc_setup$1a = _sfc_main$1a.setup;
_sfc_main$1a.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vite/index.html.vue");
  return _sfc_setup$1a ? _sfc_setup$1a(props, ctx) : void 0;
};
var index_html$q = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["ssrRender", _sfc_ssrRender$Y]]);
var index_html$r = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$q
});
const _sfc_main$19 = {};
function _sfc_ssrRender$X(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> Vite</h1><h2 id="es-module" tabindex="-1"><a class="header-anchor" href="#es-module" aria-hidden="true">#</a> ES Module</h2><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u5F53\u9047\u89C1import\u4F9D\u8D56\u65F6\uFF0C\u4F1A\u76F4\u63A5\u53D1\u8D77http\u8BF7\u6C42\u5BF9\u5E94\u7684\u6A21\u5757\u6587\u4EF6\u3002</p><!--]-->`);
}
const _sfc_setup$19 = _sfc_main$19.setup;
_sfc_main$19.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vite/application.html.vue");
  return _sfc_setup$19 ? _sfc_setup$19(props, ctx) : void 0;
};
var application_html$7 = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["ssrRender", _sfc_ssrRender$X]]);
var application_html$8 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": application_html$7
});
const _sfc_main$18 = {};
function _sfc_ssrRender$W(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="vue-dev-server" tabindex="-1"><a class="header-anchor" href="#vue-dev-server" aria-hidden="true">#</a> vue-dev-server</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#vue-dev-server-1" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`vue-dev-server`);
      } else {
        return [
          vue.createTextVNode("vue-dev-server")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#vuemiddleware" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`vueMiddleware`);
      } else {
        return [
          vue.createTextVNode("vueMiddleware")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#transformmoduleimports-js" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`transformModuleImports.js`);
      } else {
        return [
          vue.createTextVNode("transformModuleImports.js")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#readsource-js" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`readSource.js`);
      } else {
        return [
          vue.createTextVNode("readSource.js")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#loadpkg-js" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`loadPkg.js`);
      } else {
        return [
          vue.createTextVNode("loadPkg.js")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></nav><p>vue-dev-server \u662F\u4E00\u4E2A\u73A9\u5177 vite\uFF0C\u4EE5\u4E0B\u662F\u5B83\u7684\u4EE3\u7801\uFF1A</p><h2 id="vue-dev-server-1" tabindex="-1"><a class="header-anchor" href="#vue-dev-server-1" aria-hidden="true">#</a> vue-dev-server</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env node</span>

<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> vueMiddleware <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../middleware&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">vueMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server running at http://localhost:3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="vuemiddleware" tabindex="-1"><a class="header-anchor" href="#vuemiddleware" aria-hidden="true">#</a> vueMiddleware</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> vueCompiler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/component-compiler&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parseUrl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;parseurl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> transformModuleImports <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./transformModuleImports&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> loadPkg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./loadPkg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> readSource <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./readSource&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  cache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">vueMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> defaultOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cache<span class="token punctuation">;</span>
  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">LRU</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lru-cache&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRU</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      max<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
      <span class="token function-variable function">length</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> compiler <span class="token operator">=</span> vueCompiler<span class="token punctuation">.</span><span class="token function">createDefaultCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> source<span class="token punctuation">,</span> mime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> mime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">injectSourceMapToBlock</span><span class="token punctuation">(</span><span class="token parameter">block<span class="token punctuation">,</span> lang</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> map <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> mapInject<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>lang<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;js&#39;</span><span class="token operator">:</span>
        mapInject <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">//# sourceMappingURL=data:application/json;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>map<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;css&#39;</span><span class="token operator">:</span>
        mapInject <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/*# sourceMappingURL=data:application/json;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>map<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">*/\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>block<span class="token punctuation">,</span>
      code<span class="token operator">:</span> mapInject <span class="token operator">+</span> block<span class="token punctuation">.</span>code<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">injectSourceMapToScript</span><span class="token punctuation">(</span><span class="token parameter">script</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">injectSourceMapToBlock</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">injectSourceMapsToStyles</span><span class="token punctuation">(</span><span class="token parameter">styles</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> styles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">style</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">injectSourceMapToBlock</span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">tryCache</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> checkUpdateTime <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>checkUpdateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> cacheUpdateTime <span class="token operator">=</span> time<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> fileUpdateTime <span class="token operator">=</span> <span class="token punctuation">(</span>
        <span class="token keyword">await</span> <span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheUpdateTime <span class="token operator">&lt;</span> fileUpdateTime<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">cacheData</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> updateTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> old <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">!=</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>updateTime<span class="token punctuation">)</span> time<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> updateTime<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// bundleSFC \u7F16\u8BD1\u5355\u6587\u4EF6\u7EC4\u4EF6</span>
  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bundleSFC</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> filepath<span class="token punctuation">,</span> source<span class="token punctuation">,</span> updateTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readSource</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> descriptorResult <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">compileToDescriptor</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> assembledResult <span class="token operator">=</span> vueCompiler<span class="token punctuation">.</span><span class="token function">assemble</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> filepath<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>descriptorResult<span class="token punctuation">,</span>
      script<span class="token operator">:</span> <span class="token function">injectSourceMapToScript</span><span class="token punctuation">(</span>descriptorResult<span class="token punctuation">.</span>script<span class="token punctuation">)</span><span class="token punctuation">,</span>
      styles<span class="token operator">:</span> <span class="token function">injectSourceMapsToStyles</span><span class="token punctuation">(</span>descriptorResult<span class="token punctuation">.</span>styles<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>assembledResult<span class="token punctuation">,</span> updateTime <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5BF9 .vue \u7ED3\u5C3E\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>
      <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tryCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Bundle Single-File Component</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">bundleSFC</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token function">cacheData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> out<span class="token punctuation">,</span> result<span class="token punctuation">.</span>updateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> out<span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token string">&#39;application/javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// \u5BF9 .js \u7ED3\u5C3E\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>
      <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tryCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// transform import statements</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readSource</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out <span class="token operator">=</span> <span class="token function">transformModuleImports</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cacheData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> out<span class="token punctuation">,</span> result<span class="token punctuation">.</span>updateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token string">&#39;application/javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// \u5BF9 /__modules/ \u5F00\u5934\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/__modules/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>
      <span class="token keyword">const</span> pkg <span class="token operator">=</span> req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/__modules\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">tryCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Do not outdate modules</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">loadPkg</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cacheData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Do not outdate modules</span>
      <span class="token punctuation">}</span>

      <span class="token function">send</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token string">&#39;application/javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>vueMiddleware <span class="token operator">=</span> vueMiddleware<span class="token punctuation">;</span>
</code></pre></div><p>vueMiddleware \u6700\u7EC8\u8FD4\u56DE\u4E00\u4E2A\u51FD\u6570\u3002\u8FD9\u4E2A\u51FD\u6570\u91CC\u4E3B\u8981\u505A\u4E86\u56DB\u4EF6\u4E8B\uFF1A</p><ul><li>\u5BF9 .vue \u7ED3\u5C3E\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</li><li>\u5BF9 .js \u7ED3\u5C3E\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</li><li>\u5BF9 /__modules/ \u5F00\u5934\u7684\u6587\u4EF6\u8FDB\u884C\u5904\u7406</li><li>\u5982\u679C\u4E0D\u662F\u4EE5\u4E0A\u4E09\u79CD\u60C5\u51B5\uFF0C\u6267\u884C next \u65B9\u6CD5\uFF0C\u628A\u63A7\u5236\u6743\u4EA4\u7ED9\u4E0B\u4E00\u4E2A\u4E2D\u95F4\u4EF6</li></ul><h2 id="transformmoduleimports-js" tabindex="-1"><a class="header-anchor" href="#transformmoduleimports-js" aria-hidden="true">#</a> transformModuleImports.js</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> recast <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;recast&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isPkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;validate-npm-package-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">transformModuleImports</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ast <span class="token operator">=</span> recast<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">visitImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> source <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPkg</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>source <span class="token operator">=</span> recast<span class="token punctuation">.</span>types<span class="token punctuation">.</span>builders<span class="token punctuation">.</span><span class="token function">literal</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/__modules/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> recast<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>transformModuleImports <span class="token operator">=</span> transformModuleImports<span class="token punctuation">;</span>
</code></pre></div><h2 id="readsource-js" tabindex="-1"><a class="header-anchor" href="#readsource-js" aria-hidden="true">#</a> readSource.js</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parseUrl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;parseurl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readSource</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> pathname<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    filepath<span class="token punctuation">,</span>
    source<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    updateTime<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">stat</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mtime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>readSource <span class="token operator">=</span> readSource<span class="token punctuation">;</span>
</code></pre></div><h2 id="loadpkg-js" tabindex="-1"><a class="header-anchor" href="#loadpkg-js" aria-hidden="true">#</a> loadPkg.js</h2><p>\u76EE\u524D\u53EA\u652F\u6301 <code>Vue</code> \u6587\u4EF6\uFF0C\u4E5F\u5C31\u662F\u8BFB\u53D6\u8DEF\u5F84 <code>vue-dev-server/node_modules/vue/dist/vue.esm.browser.js</code> \u4E0B\u7684\u6587\u4EF6\u8FD4\u56DE</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadPkg</span><span class="token punctuation">(</span><span class="token parameter">pkg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pkg <span class="token operator">===</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&#39;vue.esm.browser.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO</span>
    <span class="token comment">// check if the package has a browser es module that can be used</span>
    <span class="token comment">// otherwise bundle it with rollup on the fly?</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;npm imports support are not ready yet.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>loadPkg <span class="token operator">=</span> loadPkg<span class="token punctuation">;</span>
</code></pre></div><p>\u8D44\u6599:</p><ul><li>\u4EE3\u7801\u5730\u5740\uFF1A https://github.com/vuejs/vue-dev-server</li><li>\u4EE3\u7801\u89E3\u8BFB\uFF1A<a href="https://mp.weixin.qq.com/s?__biz=MzA5MjQwMzQyNw==&amp;mid=2650758126&amp;idx=1&amp;sn=e506d684b281d84406689fb07d64c9dc&amp;chksm=88665862bf11d174fbc3408338be4519ebfa4fbd609508abac2d4178fea992166aa828a30178&amp;scene=178&amp;cur_album_id=1342211915371675650#rd" target="_blank" rel="noopener noreferrer">\u5C24\u96E8\u6EAA\u5199\u7684 100 \u591A\u884C\u7684\u201C\u73A9\u5177 vite\u201D\uFF0C\u5341\u5206\u6709\u52A9\u4E8E\u7406\u89E3 vite \u539F\u7406`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$18 = _sfc_main$18.setup;
_sfc_main$18.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vite/vue-dev-server.html.vue");
  return _sfc_setup$18 ? _sfc_setup$18(props, ctx) : void 0;
};
var vueDevServer_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["ssrRender", _sfc_ssrRender$W]]);
var vueDevServer_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": vueDevServer_html$1
});
const _sfc_main$17 = {};
function _sfc_ssrRender$V(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="\u5904\u7406\u9759\u6001\u8D44\u6E90" tabindex="-1"><a class="header-anchor" href="#\u5904\u7406\u9759\u6001\u8D44\u6E90" aria-hidden="true">#</a> \u5904\u7406\u9759\u6001\u8D44\u6E90</h1><h2 id="\u56FE\u7247\u52A0\u8F7D" tabindex="-1"><a class="header-anchor" href="#\u56FE\u7247\u52A0\u8F7D" aria-hidden="true">#</a> \u56FE\u7247\u52A0\u8F7D</h2><p>\u52A0\u8F7D\u56FE\u7247\u7684\u573A\u666F</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../assets/a.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-css ext-css"><pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;../../assets/b.png&#39;</span><span class="token punctuation">)</span></span> norepeat<span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;hero-img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;../../assets/c.png&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>vite \u4E2D\u914D\u7F6E</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u522B\u540D\u914D\u7F6E</span>
    alias<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string">&#39;@assets&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/assets&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="svg-\u7EC4\u4EF6\u65B9\u5F0F\u52A0\u8F7D" tabindex="-1"><a class="header-anchor" href="#svg-\u7EC4\u4EF6\u65B9\u5F0F\u52A0\u8F7D" aria-hidden="true">#</a> SVG \u7EC4\u4EF6\u65B9\u5F0F\u52A0\u8F7D</h3><ul><li>Vue2 \u9879\u76EE\u4E2D\u53EF\u4EE5\u4F7F\u7528 vite-plugin-vue2-svg \u63D2\u4EF6\u3002</li><li>Vue3 \u9879\u76EE\u4E2D\u53EF\u4EE5\u5F15\u5165 vite-svg-loader\u3002</li><li>React \u9879\u76EE\u4F7F\u7528 vite-plugin-svgr \u63D2\u4EF6\u3002</li></ul><p>\u914D\u7F6E</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> svgr <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-svgr&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// \u5176\u5B83\u63D2\u4EF6\u7701\u7565</span>
    <span class="token function">svgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u968F\u540E\u6CE8\u610F\u8981\u5728 tsconfig.json \u6DFB\u52A0\u5982\u4E0B\u914D\u7F6E\uFF0C\u5426\u5219\u4F1A\u6709\u7C7B\u578B\u9519\u8BEF:</p><div class="language-json ext-json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7701\u7565\u5176\u5B83\u914D\u7F6E</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vite-plugin-svgr/client&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$17 = _sfc_main$17.setup;
_sfc_main$17.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vite/\u5904\u7406\u9759\u6001\u8D44\u6E90.html.vue");
  return _sfc_setup$17 ? _sfc_setup$17(props, ctx) : void 0;
};
var _______html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["ssrRender", _sfc_ssrRender$V]]);
var _______html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _______html$1
});
const _sfc_main$16 = {};
function _sfc_ssrRender$U(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx" aria-hidden="true">#</a> JSX</h1><p>\u4EE5\u4E00\u4E2A elform</p><h2 id="\u5728-render-\u4E2D\u8FD4\u56DE" tabindex="-1"><a class="header-anchor" href="#\u5728-render-\u4E2D\u8FD4\u56DE" aria-hidden="true">#</a> \u5728 render \u4E2D\u8FD4\u56DE</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> inject<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">{</span> ElForm <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> expose <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> formProps <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;formProps&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> formRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">validate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> formRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">resetFields</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> formRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      validate<span class="token punctuation">,</span>
      resetFields<span class="token punctuation">,</span>
      formRef<span class="token punctuation">,</span>
      attrs<span class="token punctuation">,</span>
      formProps<span class="token punctuation">,</span>
      slots<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> formRef<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> formProps<span class="token punctuation">,</span> slots <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>form ref<span class="token operator">=</span><span class="token string">&#39;formRef&#39;</span> <span class="token punctuation">{</span><span class="token operator">...</span>attrs<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>formProps<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u5728-setup-\u4E2D\u8FD4\u56DE" tabindex="-1"><a class="header-anchor" href="#\u5728-setup-\u4E2D\u8FD4\u56DE" aria-hidden="true">#</a> \u5728 setup \u4E2D\u8FD4\u56DE</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> inject<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">{</span> ElForm <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> expose <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> formProps <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;formProps&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> formRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>form ref<span class="token operator">=</span><span class="token punctuation">{</span>formRef<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>attrs<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>formProps<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u7528\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u7528\u6CD5" aria-hidden="true">#</a> \u7528\u6CD5</h2><ul><li>render \u4E2D\u53EF\u4EE5\u901A\u8FC7 this \u8BBF\u95EE\u5F53\u524D Vue \u5B9E\u4F8B;</li><li>setup \u4E2D\u8BBF\u95EE\u4E0D\u5230 this;</li><li>\u6587\u4EF6\u540D\u53EF\u4EE5\u5199\u6210<code>.js</code>\u6216<code>.jsx</code>;</li><li>\u5982\u679C\u5199\u6210<code>.vue</code>, \u9700\u8981<code>&lt;script&gt;</code> \u6807\u7B7E\u589E\u52A0 <code>lang=&quot;jsx&quot;</code> \u8BBE\u7F6E;</li></ul><h2 id="\u9605\u8BFB\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#\u9605\u8BFB\u53C2\u8003" aria-hidden="true">#</a> \u9605\u8BFB\u53C2\u8003</h2><ul><li><a href="https://github.com/vuejs/babel-plugin-jsx#syntax" target="_blank" rel="noopener noreferrer">vuejs/babel-plugin-jsx`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.jiangweishan.com/article/vuejs20210715a3.html" target="_blank" rel="noopener noreferrer">\u5728 vue3 \u4E2D\u7F16\u5199 jsx \u7684\u4E24\u79CD\u65B9\u5F0F`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://juejin.cn/post/6911175470255964174" target="_blank" rel="noopener noreferrer">\u4E3A\u4EC0\u4E48\u6211\u63A8\u8350\u4F7F\u7528JSX\u5F00\u53D1Vue3`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$16 = _sfc_main$16.setup;
_sfc_main$16.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/JSX.html.vue");
  return _sfc_setup$16 ? _sfc_setup$16(props, ctx) : void 0;
};
var JSX_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["ssrRender", _sfc_ssrRender$U]]);
var JSX_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": JSX_html$1
});
const _sfc_main$15 = {};
function _sfc_ssrRender$T(_ctx, _push, _parent, _attrs) {
  _push(`<h1${serverRenderer.ssrRenderAttrs(vue.mergeProps({
    id: "introduction",
    tabindex: "-1"
  }, _attrs))}><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1>`);
}
const _sfc_setup$15 = _sfc_main$15.setup;
_sfc_main$15.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/index.html.vue");
  return _sfc_setup$15 ? _sfc_setup$15(props, ctx) : void 0;
};
var index_html$o = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["ssrRender", _sfc_ssrRender$T]]);
var index_html$p = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$o
});
const _sfc_main$14 = {};
function _sfc_ssrRender$S(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  _push(`<!--[--><h1 id="vue3-api" tabindex="-1"><a class="header-anchor" href="#vue3-api" aria-hidden="true">#</a> Vue3 API</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#hooks" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`hooks`);
      } else {
        return [
          vue.createTextVNode("hooks")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#vue2-mixins" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`vue2 mixins`);
      } else {
        return [
          vue.createTextVNode("vue2 mixins")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#vue3-hooks" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`Vue3 hooks`);
      } else {
        return [
          vue.createTextVNode("Vue3 hooks")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#react-hooks" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`react hooks`);
      } else {
        return [
          vue.createTextVNode("react hooks")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li></ul></nav><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> hooks</h2><h3 id="vue2-mixins" tabindex="-1"><a class="header-anchor" href="#vue2-mixins" aria-hidden="true">#</a> vue2 mixins</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> mousePositionMixin <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      y<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> mousePositionMixin<span class="token punctuation">;</span>
</code></pre></div><p>\u5728\u7EC4\u4EF6\u4E2D\u4F7F\u7528\uFF1A</p><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Mouse position: x {{ x }} / y {{ y }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> mousePositionMixin <span class="token keyword">from</span> <span class="token string">&#39;./mouse&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>mousePositionMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="vue3-hooks" tabindex="-1"><a class="header-anchor" href="#vue3-hooks" aria-hidden="true">#</a> Vue3 hooks</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>
    y<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u7EC4\u4EF6\u4E2D\u4F7F\u7528</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    Mouse position<span class="token operator">:</span> x <span class="token punctuation">{</span><span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span> y <span class="token punctuation">{</span><span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">import</span> useMousePosition <span class="token keyword">from</span> <span class="token string">&#39;./mouse&#39;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre></div><h3 id="react-hooks" tabindex="-1"><a class="header-anchor" href="#react-hooks" aria-hidden="true">#</a> react hooks</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">useWindowSize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> setY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setX</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pageX<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setY</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>vue3 hooks \u548C react hooks \u7684\u7528\u6CD5\u51E0\u4E4E\u4E00\u6837\u3002react \u6709\u5F88\u591A\u597D\u7528\u7684 react hooks \u5E93\uFF0Cvue3 \u5176\u5B9E\u4E5F\u53EF\u4EE5\u5C01\u88C5\u5F88\u591A\u6709\u7528\u7684 hooks \u5E93\u3002\u5728 vuepress 2.0 \u7684 <code>@vuepress/theme-default</code> \u63D2\u4EF6\u5C31\u6709\u5C01\u88C5\u7684 hooks,\u5728 composables \u6587\u4EF6\u4E0B\u3002</p><!--]-->`);
}
const _sfc_setup$14 = _sfc_main$14.setup;
_sfc_main$14.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/Vue3Api.html.vue");
  return _sfc_setup$14 ? _sfc_setup$14(props, ctx) : void 0;
};
var Vue3Api_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["ssrRender", _sfc_ssrRender$S]]);
var Vue3Api_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Vue3Api_html$1
});
const _sfc_main$13 = {};
function _sfc_ssrRender$R(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="\u6743\u9650" tabindex="-1"><a class="header-anchor" href="#\u6743\u9650" aria-hidden="true">#</a> \u6743\u9650</h1><p>\u9274\u6743\u7EC4\u4EF6</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token comment">&lt;!-- \u5355\u6743\u9650\u9A8C\u8BC1 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Auth</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>department.create<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\u4F60\u6709\u8BE5\u6743\u9650<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#no-auth</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\u4F60\u6CA1\u6709\u8BE5\u6743\u9650<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Auth</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- \u591A\u6743\u9650\u9A8C\u8BC1\uFF0C\u7528\u6237\u53EA\u8981\u5177\u5907\u5176\u4E2D\u4EFB\u4F55\u4E00\u4E2A\u6743\u9650\uFF0C\u5219\u9A8C\u8BC1\u901A\u8FC7 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Auth</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[<span class="token punctuation">&#39;</span>department.create<span class="token punctuation">&#39;</span>, <span class="token punctuation">&#39;</span>department.edit<span class="token punctuation">&#39;</span>]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\u4F60\u6709\u8BE5\u6743\u9650<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#no-auth</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\u4F60\u6CA1\u6709\u8BE5\u6743\u9650<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Auth</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- \u591A\u6743\u9650\u9A8C\u8BC1\uFF0C\u7528\u6237\u5FC5\u987B\u5177\u5907\u5168\u90E8\u6743\u9650\uFF0C\u624D\u9A8C\u8BC1\u901A\u8FC7 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AuthAll</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[<span class="token punctuation">&#39;</span>department.create<span class="token punctuation">&#39;</span>, <span class="token punctuation">&#39;</span>department.edit<span class="token punctuation">&#39;</span>]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\u4F60\u6709\u8BE5\u6743\u9650<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#no-auth</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\u4F60\u6CA1\u6709\u8BE5\u6743\u9650<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AuthAll</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u9274\u6743\u6307\u4EE4</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token comment">&lt;!-- \u5355\u6743\u9650\u9A8C\u8BC1 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-auth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>department.create<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\u65B0\u589E\u90E8\u95E8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- \u591A\u6743\u9650\u9A8C\u8BC1\uFF0C\u7528\u6237\u53EA\u8981\u5177\u5907\u5176\u4E2D\u4EFB\u4F55\u4E00\u4E2A\u6743\u9650\uFF0C\u5219\u9A8C\u8BC1\u901A\u8FC7 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-auth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[<span class="token punctuation">&#39;</span>department.create<span class="token punctuation">&#39;</span>, <span class="token punctuation">&#39;</span>department.edit<span class="token punctuation">&#39;</span>]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\u65B0\u589E\u90E8\u95E8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- \u591A\u6743\u9650\u9A8C\u8BC1\uFF0C\u7528\u6237\u5FC5\u987B\u5177\u5907\u5168\u90E8\u6743\u9650\uFF0C\u624D\u9A8C\u8BC1\u901A\u8FC7 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-auth-all</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[<span class="token punctuation">&#39;</span>department.create<span class="token punctuation">&#39;</span>, <span class="token punctuation">&#39;</span>department.edit<span class="token punctuation">&#39;</span>]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\u65B0\u589E\u90E8\u95E8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u9274\u6743\u51FD\u6570</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u5355\u6743\u9650\u9A8C\u8BC1\uFF0C\u8FD4\u56DE true \u6216 false</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$auth</span><span class="token punctuation">(</span><span class="token string">&#39;department.create&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u591A\u6743\u9650\u9A8C\u8BC1\uFF0C\u7528\u6237\u53EA\u8981\u5177\u5907\u5176\u4E2D\u4EFB\u4F55\u4E00\u4E2A\u6743\u9650\uFF0C\u5219\u9A8C\u8BC1\u901A\u8FC7\uFF0C\u8FD4\u56DE true \u6216 false</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$auth</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;department.create&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;department.edit&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u591A\u6743\u9650\u9A8C\u8BC1\uFF0C\u7528\u6237\u5FC5\u987B\u5177\u5907\u5168\u90E8\u6743\u9650\uFF0C\u624D\u9A8C\u8BC1\u901A\u8FC7\uFF0C\u8FD4\u56DE true \u6216 false</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$authAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;department.create&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;department.edit&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>https://hooray.gitee.io/fantastic-admin/guide/permission.html#%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90</p><!--]-->`);
}
const _sfc_setup$13 = _sfc_main$13.setup;
_sfc_main$13.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/auth.html.vue");
  return _sfc_setup$13 ? _sfc_setup$13(props, ctx) : void 0;
};
var auth_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["ssrRender", _sfc_ssrRender$R]]);
var auth_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": auth_html$1
});
const _sfc_main$12 = {};
function _sfc_ssrRender$Q(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="\u54CD\u5E94\u5F0F\u7CFB\u7EDF-api" tabindex="-1"><a class="header-anchor" href="#\u54CD\u5E94\u5F0F\u7CFB\u7EDF-api" aria-hidden="true">#</a> \u54CD\u5E94\u5F0F\u7CFB\u7EDF API</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#reactive" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`reactive`);
      } else {
        return [
          vue.createTextVNode("reactive")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#ref" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`ref`);
      } else {
        return [
          vue.createTextVNode("ref")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#computed" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`computed`);
      } else {
        return [
          vue.createTextVNode("computed")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u7528\u6CD5" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u7528\u6CD5`);
      } else {
        return [
          vue.createTextVNode("\u7528\u6CD5")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#watch" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`watch`);
      } else {
        return [
          vue.createTextVNode("watch")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u89C2\u5BDF-props" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u89C2\u5BDF props`);
      } else {
        return [
          vue.createTextVNode("\u89C2\u5BDF props")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61`);
      } else {
        return [
          vue.createTextVNode("\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90`);
      } else {
        return [
          vue.createTextVNode("\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u505C\u6B62\u89C2\u5BDF" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u505C\u6B62\u89C2\u5BDF`);
      } else {
        return [
          vue.createTextVNode("\u505C\u6B62\u89C2\u5BDF")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u6E05\u7406\u526F\u4F5C\u7528" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u6E05\u7406\u526F\u4F5C\u7528`);
      } else {
        return [
          vue.createTextVNode("\u6E05\u7406\u526F\u4F5C\u7528")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#watcheffect" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`watchEffect`);
      } else {
        return [
          vue.createTextVNode("watchEffect")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#watch-\u548C-watcheffect-\u7684\u533A\u522B" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`watch \u548C watchEffect \u7684\u533A\u522B`);
      } else {
        return [
          vue.createTextVNode("watch \u548C watchEffect \u7684\u533A\u522B")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#effect" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`effect`);
      } else {
        return [
          vue.createTextVNode("effect")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u8C03\u5EA6\u6267\u884C-effect-scheduler" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u8C03\u5EA6\u6267\u884C effect-scheduler`);
      } else {
        return [
          vue.createTextVNode("\u8C03\u5EA6\u6267\u884C effect-scheduler")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#watcheffect-\u4E0E-effect-\u7684\u533A\u522B" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`watchEffect() \u4E0E effect() \u7684\u533A\u522B`);
      } else {
        return [
          vue.createTextVNode("watchEffect() \u4E0E effect() \u7684\u533A\u522B")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li></ul></nav><h2 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive" aria-hidden="true">#</a> reactive</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      title<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      count<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> computed</h2><h3 id="\u7528\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u7528\u6CD5" aria-hidden="true">#</a> \u7528\u6CD5</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;\u5341\u4E09&#39;</span><span class="token punctuation">,</span>
      desc<span class="token operator">:</span> <span class="token string">&#39;\u4F60\u597D&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>name <span class="token operator">+</span> state<span class="token punctuation">.</span>desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      text<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
plusOne<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// error</span>
count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre></div><blockquote><p>\u76F4\u63A5\u4FEE\u6539 plusOne.value \u4F1A\u62A5\u4E00\u4E2A\u9519\u8BEF\uFF0C\u8FD9\u662F\u56E0\u4E3A\u5982\u679C\u6211\u4EEC\u4F20\u9012\u7ED9 computed \u7684\u662F\u4E00\u4E2A\u51FD\u6570\uFF0C\u90A3\u4E48\u8FD9\u5C31\u662F\u4E00\u4E2A getter \u51FD\u6570\uFF0C\u6211\u4EEC\u53EA\u80FD\u83B7\u53D6\u5B83\u7684\u503C\uFF0C\u800C\u4E0D\u80FD\u76F4\u63A5\u4FEE\u6539\u5B83\u3002</p></blockquote><p>\u6709\u65F6\u5019\u6211\u4EEC\u4E5F\u5E0C\u671B\u80FD\u591F\u76F4\u63A5\u4FEE\u6539 computed \u7684\u8FD4\u56DE\u503C\uFF0C\u90A3\u4E48\u6211\u4EEC\u53EF\u4EE5\u7ED9 computed \u4F20\u5165\u4E00\u4E2A\u5BF9\u8C61\uFF1A</p><p>computed \u7B2C\u4E8C\u4E2A\u53C2\u6570\u4F5C\u4E3A setter \u6765\u521B\u5EFA</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> writableComputed <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
  <span class="token comment">// read</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token comment">// write</span>
  <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

writableComputed<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre></div><h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h2><p>watch() \u63A5\u6536\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570\u88AB\u79F0\u4F5C \u201C\u6570\u636E\u6E90\u201D\uFF0C\u5B83\u53EF\u4EE5\u662F\uFF1A</p><ul><li>\u4E00\u4E2A\u8FD4\u56DE\u4EFB\u610F\u503C\u7684\u51FD\u6570</li><li>\u4E00\u4E2A\u5305\u88C5\u5BF9\u8C61</li><li>\u4E00\u4E2A\u5305\u542B\u4E0A\u8FF0\u4E24\u79CD\u6570\u636E\u6E90\u7684\u6570\u7EC4</li></ul><p>\u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u56DE\u8C03\u51FD\u6570\u3002\u56DE\u8C03\u51FD\u6570\u53EA\u6709\u5F53\u6570\u636E\u6E90\u53D1\u751F\u53D8\u52A8\u65F6\u624D\u4F1A\u88AB\u89E6\u53D1\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token comment">// getter</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token comment">// callback</span>
  <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count + 1 is: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -&gt; count + 1 is: 1</span>
count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token comment">// -&gt; count + 1 is: 2</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      search<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> state<span class="token punctuation">.</span>search<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">nextData<span class="token punctuation">,</span> preData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;preData&#39;</span><span class="token punctuation">,</span> preData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nextData&#39;</span><span class="token punctuation">,</span> nextData<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>search <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">,</span>
      handleSearch<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u89C2\u5BDF-props" tabindex="-1"><a class="header-anchor" href="#\u89C2\u5BDF-props" aria-hidden="true">#</a> \u89C2\u5BDF props</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> Number<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      data<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61" aria-hidden="true">#</a> \u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// double \u662F\u4E00\u4E2A\u8BA1\u7B97\u5305\u88C5\u5BF9\u8C61</span>
<span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">watch</span><span class="token punctuation">(</span>double<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;double the count is: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -&gt; double the count is: 0</span>

count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// -&gt; double the count is: 2</span>
</code></pre></div><h3 id="\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90" tabindex="-1"><a class="header-anchor" href="#\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90" aria-hidden="true">#</a> \u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>refA<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> refB<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>prevA<span class="token punctuation">,</span> prevB<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">b is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u505C\u6B62\u89C2\u5BDF" tabindex="-1"><a class="header-anchor" href="#\u505C\u6B62\u89C2\u5BDF" aria-hidden="true">#</a> \u505C\u6B62\u89C2\u5BDF</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token comment">// stop watching</span>
<span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7EC4\u4EF6\u9500\u6BC1\u65F6\u4E5F\u4F1A\u88AB\u81EA\u52A8\u505C\u6B62</span>
    <span class="token function">watch</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u6E05\u7406\u526F\u4F5C\u7528" tabindex="-1"><a class="header-anchor" href="#\u6E05\u7406\u526F\u4F5C\u7528" aria-hidden="true">#</a> \u6E05\u7406\u526F\u4F5C\u7528</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>idValue<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> oldId<span class="token punctuation">,</span> onCleanup</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">performAsyncOperation</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">onCleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// id \u53D1\u751F\u4E86\u53D8\u5316\uFF0C\u6216\u662F watcher \u5373\u5C06\u88AB\u505C\u6B62.</span>
    <span class="token comment">// \u53D6\u6D88\u8FD8\u672A\u5B8C\u6210\u7684\u5F02\u6B65\u64CD\u4F5C\u3002</span>
    token<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u867D\u7136\u8BA1\u7B97\u5C5E\u6027\u5728\u5927\u591A\u6570\u60C5\u51B5\u4E0B\u66F4\u5408\u9002\uFF0C\u4F46\u6709\u65F6\u4E5F\u9700\u8981\u4E00\u4E2A\u81EA\u5B9A\u4E49\u7684\u4FA6\u542C\u5668\u3002\u8FD9\u5C31\u662F\u4E3A\u4EC0\u4E48 Vue \u901A\u8FC7 watch \u9009\u9879\u63D0\u4F9B\u4E86\u4E00\u4E2A\u66F4\u901A\u7528\u7684\u65B9\u6CD5\uFF0C\u6765\u54CD\u5E94\u6570\u636E\u7684\u53D8\u5316\u3002\u5F53\u9700\u8981\u5728\u6570\u636E\u53D8\u5316\u65F6\u6267\u884C\u5F02\u6B65\u6216\u5F00\u9500\u8F83\u5927\u7684\u64CD\u4F5C\u65F6\uFF0C\u8FD9\u4E2A\u65B9\u5F0F\u662F\u6700\u6709\u7528\u7684\u3002</p><h2 id="watcheffect" tabindex="-1"><a class="header-anchor" href="#watcheffect" aria-hidden="true">#</a> watchEffect</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      search<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\u76D1\u542C\u67E5\u8BE2\u5B57\u6BB5</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>search <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">,</span>
      handleSearch<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="watch-\u548C-watcheffect-\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#watch-\u548C-watcheffect-\u7684\u533A\u522B" aria-hidden="true">#</a> watch \u548C watchEffect \u7684\u533A\u522B</h3><ul><li>\u4E24\u8005\u90FD\u53EF\u4EE5\u76D1\u542C data \u5C5E\u6027</li><li>watch \u9700\u8981\u660E\u786E\u53EA\u77E5\u9053\u76D1\u542C\u90A3\u4E2A\u5C5E\u6027</li><li>watchEffect \u4F1A\u6839\u636E\u5176\u5C5E\u6027\u81EA\u52A8\u76D1\u542C\u5176\u53D8\u5316</li></ul><h2 id="effect" tabindex="-1"><a class="header-anchor" href="#effect" aria-hidden="true">#</a> effect</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> effect<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/reactivity&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// \u4F7F\u7528 reactive() \u51FD\u6570\u5B9A\u4E49\u54CD\u5E94\u5F0F\u6570\u636E</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u4F7F\u7528 effect() \u51FD\u6570\u5B9A\u4E49\u526F\u4F5C\u7528\u51FD\u6570</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u4E00\u79D2\u540E\u4FEE\u6539\u54CD\u5E94\u5F0F\u6570\u636E\uFF0C\u8FD9\u4F1A\u89E6\u53D1\u526F\u4F5C\u7528\u51FD\u6570\u91CD\u65B0\u6267\u884C</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>text <span class="token operator">+=</span> <span class="token string">&#39; world&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>reactive() \u51FD\u6570\u63A5\u6536\u4E00\u4E2A\u5BF9\u8C61\u4F5C\u4E3A\u53C2\u6570\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u4EE3\u7406\u5BF9\u8C61\u3002</li><li>effect() \u51FD\u6570\u7528\u4E8E\u5B9A\u4E49\u526F\u4F5C\u7528\uFF0C\u5B83\u7684\u53C2\u6570\u5C31\u662F\u526F\u4F5C\u7528\u51FD\u6570\uFF0C\u8FD9\u4E2A\u51FD\u6570\u53EF\u80FD\u4F1A\u4EA7\u751F\u526F\u4F5C\u7528\uFF0C\u4F8B\u5982\u4E0A\u9762\u4EE3\u7801\u4E2D\u7684 <code>document.body.innerText = obj.text</code>\u3002\u5728\u526F\u4F5C\u7528\u51FD\u6570\u5185\u7684\u54CD\u5E94\u5F0F\u6570\u636E\u4F1A\u4E0E\u526F\u4F5C\u7528\u51FD\u6570\u4E4B\u95F4\u5EFA\u7ACB\u8054\u7CFB\uFF0C\u5373\u6240\u8C13\u7684\u4F9D\u8D56\u6536\u96C6\uFF0C\u5F53\u54CD\u5E94\u5F0F\u6570\u636E\u53D8\u5316\u4E4B\u540E\uFF0C\u4F1A\u5BFC\u81F4\u526F\u4F5C\u7528\u51FD\u6570\u91CD\u65B0\u6267\u884C\u3002</li></ul><h3 id="\u8C03\u5EA6\u6267\u884C-effect-scheduler" tabindex="-1"><a class="header-anchor" href="#\u8C03\u5EA6\u6267\u884C-effect-scheduler" aria-hidden="true">#</a> \u8C03\u5EA6\u6267\u884C effect-scheduler</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre></div><p>console.log \u8BED\u53E5\u5171\u6253\u5370\u56DB\u6B21\uFF08\u5305\u62EC\u9996\u6B21\u6267\u884C\uFF09</p><p>\u5047\u5982\u6211\u4EEC\u53EA\u9700\u8981\u628A\u6570\u636E\u7684\u6700\u7EC8\u7684\u72B6\u6001\u5E94\u7528\u5230\u526F\u4F5C\u7528\u4E2D\uFF0C\u800C\u4E0D\u662F\u6BCF\u6B21\u53D8\u5316\u90FD\u91CD\u65B0\u6267\u884C\u4E00\u6B21\u526F\u4F5C\u7528\u51FD\u6570\uFF0C\u8FD9\u5C06\u5BF9\u6027\u80FD\u6709\u6240\u63D0\u5347\u3002\u5B9E\u9645\u4E0A\u6211\u4EEC\u53EF\u4EE5\u4E3A effect \u4F20\u9012\u7B2C\u4E8C\u4E2A\u53C2\u6570\u4F5C\u4E3A\u9009\u9879\uFF0C\u53EF\u4EE5\u6307\u5B9A\u201C\u8C03\u5EA6\u5668\u201D\u3002\u6240\u8C13\u8C03\u5EA6\u5668\u5C31\u662F\u7528\u6765\u6307\u5B9A\u5982\u4F55\u8FD0\u884C\u526F\u4F5C\u7528\u51FD\u6570\u7684\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// \u6307\u5B9A\u8C03\u5EA6\u5668\u4E3A queueJob</span>
    scheduler<span class="token operator">:</span> queueJob<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u8C03\u5EA6\u5668\u5B9E\u73B0</span>
<span class="token keyword">const</span> queue<span class="token operator">:</span> Function<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">queueJob</span><span class="token punctuation">(</span><span class="token function-variable function">job</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFlushing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isFlushing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> fn<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre></div><p>\u6700\u7EC8\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\u526F\u4F5C\u7528\u51FD\u6570\u3002\u8FD9\u5B9E\u9645\u4E0A\u5C31\u662F watchEffect() \u51FD\u6570\u7684\u5B9E\u73B0\u601D\u8DEF\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>foo<span class="token operator">++</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>foo<span class="token operator">++</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>foo<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre></div><p>\u8FD9\u4E0E\u6211\u4EEC\u4E0A\u9762\u521A\u521A\u5B9E\u73B0\u7684\u81EA\u5B9A\u4E49\u8C03\u5EA6\u5668\u7684 effect \u7684\u6548\u679C\u5B9E\u9645\u4E0A\u662F\u4E00\u6837\u7684\u3002</p><h3 id="watcheffect-\u4E0E-effect-\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#watcheffect-\u4E0E-effect-\u7684\u533A\u522B" aria-hidden="true">#</a> watchEffect() \u4E0E effect() \u7684\u533A\u522B</h3><ul><li>effect() \u51FD\u6570\u6765\u81EA\u4E8E @vue/reactivity \uFF0C\u800C watchEffect() \u51FD\u6570\u6765\u81EA\u4E8E @vue/runtime-core\u3002</li><li>\u5B83\u4EEC\u7684\u533A\u522B\u5728\u4E8E\uFF1Aeffect() \u662F\u975E\u5E38\u5E95\u5C42\u7684\u5B9E\u73B0\uFF0CwatchEffect() \u662F\u57FA\u4E8E effect() \u7684\u5C01\u88C5\u3002</li><li>watchEffect() \u4F1A\u7EF4\u62A4\u4E0E\u7EC4\u4EF6\u5B9E\u4F8B\u4EE5\u53CA\u7EC4\u4EF6\u72B6\u6001(\u662F\u5426\u88AB\u5378\u8F7D\u7B49)\u7684\u5173\u7CFB\uFF0C\u5982\u679C\u4E00\u4E2A\u7EC4\u4EF6\u88AB\u5378\u8F7D\uFF0C\u90A3\u4E48 watchEffect() \u4E5F\u5C06\u88AB stop\uFF0C\u4F46 effect() \u5219\u4E0D\u4F1A\u3002</li></ul><p>\u53C2\u8003\uFF1A</p><ul><li><a href="https://zhuanlan.zhihu.com/p/146097763" target="_blank" rel="noopener noreferrer">\u6DF1\u5165\u7406\u89E3 Vue3 Reactivity API`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$12 = _sfc_main$12.setup;
_sfc_main$12.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/reactivityAPI.html.vue");
  return _sfc_setup$12 ? _sfc_setup$12(props, ctx) : void 0;
};
var reactivityAPI_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["ssrRender", _sfc_ssrRender$Q]]);
var reactivityAPI_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": reactivityAPI_html$1
});
const _sfc_main$11 = {};
function _sfc_ssrRender$P(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="\u642D\u5EFA\u57FA\u4E8E-vue3-\u7684\u524D\u7AEF\u67B6\u6784" tabindex="-1"><a class="header-anchor" href="#\u642D\u5EFA\u57FA\u4E8E-vue3-\u7684\u524D\u7AEF\u67B6\u6784" aria-hidden="true">#</a> \u642D\u5EFA\u57FA\u4E8E vue3 \u7684\u524D\u7AEF\u67B6\u6784</h1><ul><li><a href="https://juejin.cn/post/7025524870842679310" target="_blank" rel="noopener noreferrer">\u4ECE 16 \u4E2A\u65B9\u5411\u9010\u6B65\u642D\u5EFA\u57FA\u4E8E vue3 \u7684\u524D\u7AEF\u67B6\u6784`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://juejin.cn/post/6901466994478940168" target="_blank" rel="noopener noreferrer">\u57FA\u4E8E Vue \u7684\u524D\u7AEF\u67B6\u6784\uFF0C\u6211\u505A\u4E86\u8FD9 15 \u70B9`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://juejin.cn/post/6844903607855235079" target="_blank" rel="noopener noreferrer">\u642D\u5EFA\u81EA\u5DF1\u7684\u811A\u624B\u67B6\u2014\u201C\u4F18\u96C5\u201D\u751F\u6210\u524D\u7AEF\u5DE5\u7A0B`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://juejin.cn/post/6981356417064108062" target="_blank" rel="noopener noreferrer">Vuex4 \u5BF9 TypeScript \u5E76\u4E0D\u53CB\u597D\uFF0C\u6240\u4EE5\u6211\u9009\u62E9 Pinia`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://juejin.cn/post/7005001569879982087" target="_blank" rel="noopener noreferrer">\u524D\u7AEF\u811A\u624B\u67B6 webpack \u8FC1\u79FB Vite2 \u8E29\u5751\u5B9E\u8DF5`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$11 = _sfc_main$11.setup;
_sfc_main$11.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/vue3Project.html.vue");
  return _sfc_setup$11 ? _sfc_setup$11(props, ctx) : void 0;
};
var vue3Project_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["ssrRender", _sfc_ssrRender$P]]);
var vue3Project_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": vue3Project_html$1
});
const _sfc_main$10 = {};
function _sfc_ssrRender$O(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="vue3-\u7684\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#vue3-\u7684\u4F18\u5316" aria-hidden="true">#</a> Vue3 \u7684\u4F18\u5316</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u6027\u80FD\u4F18\u5316" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u6027\u80FD\u4F18\u5316`);
      } else {
        return [
          vue.createTextVNode("\u6027\u80FD\u4F18\u5316")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#_1-\u6E90\u7801\u4F53\u79EF\u4F18\u5316" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`1. \u6E90\u7801\u4F53\u79EF\u4F18\u5316`);
      } else {
        return [
          vue.createTextVNode("1. \u6E90\u7801\u4F53\u79EF\u4F18\u5316")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#_2-\u6570\u636E\u52AB\u6301\u4F18\u5316" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`2. \u6570\u636E\u52AB\u6301\u4F18\u5316`);
      } else {
        return [
          vue.createTextVNode("2. \u6570\u636E\u52AB\u6301\u4F18\u5316")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#_3-\u7F16\u8BD1\u4F18\u5316" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`3. \u7F16\u8BD1\u4F18\u5316`);
      } else {
        return [
          vue.createTextVNode("3. \u7F16\u8BD1\u4F18\u5316")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u8BED\u6CD5-api-\u4F18\u5316" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u8BED\u6CD5 API \u4F18\u5316`);
      } else {
        return [
          vue.createTextVNode("\u8BED\u6CD5 API \u4F18\u5316")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#_1-\u4F18\u5316\u903B\u8F91\u7EC4\u7EC7" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`1. \u4F18\u5316\u903B\u8F91\u7EC4\u7EC7`);
      } else {
        return [
          vue.createTextVNode("1. \u4F18\u5316\u903B\u8F91\u7EC4\u7EC7")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#_2-\u4F18\u5316\u903B\u8F91\u590D\u7528" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`2. \u4F18\u5316\u903B\u8F91\u590D\u7528`);
      } else {
        return [
          vue.createTextVNode("2. \u4F18\u5316\u903B\u8F91\u590D\u7528")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u7F16\u8BD1\u4F18\u5316" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u7F16\u8BD1\u4F18\u5316`);
      } else {
        return [
          vue.createTextVNode("\u7F16\u8BD1\u4F18\u5316")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#pathflag" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`PathFlag`);
      } else {
        return [
          vue.createTextVNode("PathFlag")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#hoiststatic" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`HoistStatic`);
      } else {
        return [
          vue.createTextVNode("HoistStatic")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#cachehandler" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`CacheHandler`);
      } else {
        return [
          vue.createTextVNode("CacheHandler")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#ssr" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`SSR`);
      } else {
        return [
          vue.createTextVNode("SSR")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#tree-shaking" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`tree-shaking`);
      } else {
        return [
          vue.createTextVNode("tree-shaking")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li></ul></nav><h2 id="\u6027\u80FD\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#\u6027\u80FD\u4F18\u5316" aria-hidden="true">#</a> \u6027\u80FD\u4F18\u5316</h2><h3 id="_1-\u6E90\u7801\u4F53\u79EF\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#_1-\u6E90\u7801\u4F53\u79EF\u4F18\u5316" aria-hidden="true">#</a> 1. \u6E90\u7801\u4F53\u79EF\u4F18\u5316</h3><ul><li>\u79FB\u9664\u4E00\u4E9B\u51B7\u95E8\u7684 feature\uFF08\u6BD4\u5982 filter\u3001inline-template \u7B49\uFF09\uFF1B</li><li>\u5F15\u5165 tree-shaking \u7684\u6280\u672F\uFF0C\u51CF\u5C11\u6253\u5305\u4F53\u79EF\u3002</li></ul><h3 id="_2-\u6570\u636E\u52AB\u6301\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#_2-\u6570\u636E\u52AB\u6301\u4F18\u5316" aria-hidden="true">#</a> 2. \u6570\u636E\u52AB\u6301\u4F18\u5316</h3><p><code>Object.defineProperty</code> \u7684\u65B9\u5F0F:</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token punctuation">{</span>
      b<span class="token operator">:</span> <span class="token punctuation">{</span>
        c<span class="token operator">:</span> <span class="token punctuation">{</span>
          d<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><code>Proxy</code>\u7684\u65B9\u5F0F\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// track</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// trigger</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_3-\u7F16\u8BD1\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#_3-\u7F16\u8BD1\u4F18\u5316" aria-hidden="true">#</a> 3. \u7F16\u8BD1\u4F18\u5316</h3><p>\u9664\u6B64\u4E4B\u5916\uFF0CVue.js 3.0 \u5728\u7F16\u8BD1\u9636\u6BB5\u8FD8\u5305\u542B\u4E86\u5BF9 Slot \u7684\u7F16\u8BD1\u4F18\u5316\u3001\u4E8B\u4EF6\u4FA6\u542C\u51FD\u6570\u7684\u7F13\u5B58\u4F18\u5316\uFF0C\u5E76\u4E14\u5728\u8FD0\u884C\u65F6\u91CD\u5199\u4E86 diff \u7B97\u6CD5\uFF0C\u8FD9\u4E9B\u6027\u80FD\u4F18\u5316\u7684\u5185\u5BB9\u6211\u5728\u540E\u7EED\u7279\u5B9A\u7684\u7AE0\u8282\u4E0E\u4F60\u5206\u4EAB\u3002</p><h2 id="\u8BED\u6CD5-api-\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#\u8BED\u6CD5-api-\u4F18\u5316" aria-hidden="true">#</a> \u8BED\u6CD5 API \u4F18\u5316</h2><h3 id="_1-\u4F18\u5316\u903B\u8F91\u7EC4\u7EC7" tabindex="-1"><a class="header-anchor" href="#_1-\u4F18\u5316\u903B\u8F91\u7EC4\u7EC7" aria-hidden="true">#</a> 1. \u4F18\u5316\u903B\u8F91\u7EC4\u7EC7</h3><p>Options API \u7684\u8BBE\u8BA1\u662F\u6309\u7167 methods\u3001computed\u3001data\u3001props \u8FD9\u4E9B\u4E0D\u540C\u7684\u9009\u9879\u5206\u7C7B\uFF0C\u5F53\u7EC4\u4EF6\u5C0F\u7684\u65F6\u5019\uFF0C\u8FD9\u79CD\u5206\u7C7B\u65B9\u5F0F\u4E00\u76EE\u4E86\u7136\uFF1B\u4F46\u662F\u5728\u5927\u578B\u7EC4\u4EF6\u4E2D\uFF0C\u4E00\u4E2A\u7EC4\u4EF6\u53EF\u80FD\u6709\u591A\u4E2A\u903B\u8F91\u5173\u6CE8\u70B9\uFF0C\u5F53\u4F7F\u7528 Options API \u7684\u65F6\u5019\uFF0C\u6BCF\u4E00\u4E2A\u5173\u6CE8\u70B9\u90FD\u6709\u81EA\u5DF1\u7684 Options\uFF0C\u5982\u679C\u9700\u8981\u4FEE\u6539\u4E00\u4E2A\u903B\u8F91\u70B9\u5173\u6CE8\u70B9\uFF0C\u5C31\u9700\u8981\u5728\u5355\u4E2A\u6587\u4EF6\u4E2D\u4E0D\u65AD\u4E0A\u4E0B\u5207\u6362\u548C\u5BFB\u627E\u3002</p><p>Vue.js 3.0 \u63D0\u4F9B\u4E86\u4E00\u79CD\u65B0\u7684 API\uFF1AComposition API\uFF0C\u5B83\u6709\u4E00\u4E2A\u5F88\u597D\u7684\u673A\u5236\u53BB\u89E3\u51B3\u8FD9\u6837\u7684\u95EE\u9898\uFF0C\u5C31\u662F\u5C06\u67D0\u4E2A\u903B\u8F91\u5173\u6CE8\u70B9\u76F8\u5173\u7684\u4EE3\u7801\u5168\u90FD\u653E\u5728\u4E00\u4E2A\u51FD\u6570\u91CC\uFF0C\u8FD9\u6837\u5F53\u9700\u8981\u4FEE\u6539\u4E00\u4E2A\u529F\u80FD\u65F6\uFF0C\u5C31\u4E0D\u518D\u9700\u8981\u5728\u6587\u4EF6\u4E2D\u8DF3\u6765\u8DF3\u53BB\u3002</p><h3 id="_2-\u4F18\u5316\u903B\u8F91\u590D\u7528" tabindex="-1"><a class="header-anchor" href="#_2-\u4F18\u5316\u903B\u8F91\u590D\u7528" aria-hidden="true">#</a> 2. \u4F18\u5316\u903B\u8F91\u590D\u7528</h3><p>vue hooks \u51E0\u4E4E\u548C react hooks \u7684\u7528\u6CD5\u5F88\u7C7B\u4F3C\u3002</p><h2 id="\u7F16\u8BD1\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#\u7F16\u8BD1\u4F18\u5316" aria-hidden="true">#</a> \u7F16\u8BD1\u4F18\u5316</h2><h3 id="pathflag" tabindex="-1"><a class="header-anchor" href="#pathflag" aria-hidden="true">#</a> PathFlag</h3><ul><li>\u7F16\u8BD1\u6A21\u677F\u65F6\uFF0C\u52A8\u6001\u8282\u70B9\u505A\u6807\u8BB0</li><li>\u5206\u4E3A\u4E0D\u540C\u7684\u6807\u8BB0\u7C7B\u578B\uFF0C\u5982 text props</li><li>diff \u7B97\u6CD5\u65F6\uFF0C\u53EF\u4EE5\u533A\u5206\u9759\u6001\u8282\u70B9\u548C\u4E0D\u540C\u7C7B\u578B\u7684\u52A8\u6001\u8282\u70B9</li></ul><p><a href="https://vue-next-template-explorer.netlify.app/" target="_blank" rel="noopener noreferrer">vue-next-template-explorer`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></p><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u7F16\u8BD1\u540E</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span>
  toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span>
  normalizeClass <span class="token keyword">as</span> _normalizeClass<span class="token punctuation">,</span>
  openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span>
  createElementBlock <span class="token keyword">as</span> _createElementBlock<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
        <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">3</span> <span class="token comment">/* TEXT, CLASS */</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
        <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> name<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">9</span> <span class="token comment">/* TEXT, PROPS */</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="hoiststatic" tabindex="-1"><a class="header-anchor" href="#hoiststatic" aria-hidden="true">#</a> HoistStatic</h3><ul><li>\u5C06\u9759\u6001\u8282\u70B9\u7684\u5B9A\u4E49\uFF0C\u63D0\u5347\u5230\u7236\u4F5C\u7528\u57DF\uFF0C\u7F13\u5B58\u8D77\u6765\uFF1B</li><li>\u591A\u4E2A\u76F8\u90BB\u7684\u9759\u6001\u8282\u70B9\uFF0C\u4F1A\u88AB\u5408\u5E76\u8D77\u6765\uFF1B</li><li>\u5178\u578B\u7684\u62FF\u7A7A\u95F4\u6362\u65F6\u95F4\u7684\u4F18\u5316\u7B56\u7565\uFF1B</li></ul><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u7F16\u8BD1\u540E</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span>
  toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span>
  normalizeClass <span class="token keyword">as</span> _normalizeClass<span class="token punctuation">,</span>
  openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span>
  createElementBlock <span class="token keyword">as</span> _createElementBlock<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
  <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
  <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> _hoisted_3 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
  <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> _hoisted_4 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
  <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> _hoisted_5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      _hoisted_1<span class="token punctuation">,</span>
      _hoisted_2<span class="token punctuation">,</span>
      _hoisted_3<span class="token punctuation">,</span>
      _hoisted_4<span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
        <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">3</span> <span class="token comment">/* TEXT, CLASS */</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
        <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> name<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">9</span> <span class="token comment">/* TEXT, PROPS */</span><span class="token punctuation">,</span>
        _hoisted_5
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5408\u5E76\u8282\u70B9</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u7F16\u8BD1\u540E</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span>
  toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span>
  normalizeClass <span class="token keyword">as</span> _normalizeClass<span class="token punctuation">,</span>
  createStaticVNode <span class="token keyword">as</span> _createStaticVNode<span class="token punctuation">,</span>
  openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span>
  createElementBlock <span class="token keyword">as</span> _createElementBlock<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createStaticVNode</span><span class="token punctuation">(</span>
  <span class="token string">&#39;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token number">10</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> _hoisted_11 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      _hoisted_1<span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
        <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token keyword">class</span><span class="token operator">:</span> <span class="token function">_normalizeClass</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">3</span> <span class="token comment">/* TEXT, CLASS */</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
        <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> name<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">9</span> <span class="token comment">/* TEXT, PROPS */</span><span class="token punctuation">,</span>
        _hoisted_11
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="cachehandler" tabindex="-1"><a class="header-anchor" href="#cachehandler" aria-hidden="true">#</a> CacheHandler</h3><ul><li>\u7F13\u5B58\u4E8B\u4EF6</li></ul><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u7F16\u8BD1\u540E</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span>
  createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span>
  openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span>
  createElementBlock <span class="token keyword">as</span> _createElementBlock<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;onClick&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
        <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> onClick<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>handleClick <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">9</span> <span class="token comment">/* TEXT, PROPS */</span><span class="token punctuation">,</span>
        _hoisted_1
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u7F13\u5B58</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span>
  createElementVNode <span class="token keyword">as</span> _createElementVNode<span class="token punctuation">,</span>
  openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span>
  createElementBlock <span class="token keyword">as</span> _createElementBlock<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
        <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          onClick<span class="token operator">:</span>
            _cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> _ctx<span class="token punctuation">.</span>handleClick <span class="token operator">&amp;&amp;</span> _ctx<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token number">1</span> <span class="token comment">/* TEXT */</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="ssr" tabindex="-1"><a class="header-anchor" href="#ssr" aria-hidden="true">#</a> SSR</h3><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u7F16\u8BD1\u540E</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mergeProps <span class="token keyword">as</span> _mergeProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  ssrRenderAttrs <span class="token keyword">as</span> _ssrRenderAttrs<span class="token punctuation">,</span>
  ssrInterpolate <span class="token keyword">as</span> _ssrInterpolate<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue/server-renderer&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ssrRender</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _push<span class="token punctuation">,</span> _parent<span class="token punctuation">,</span> _attrs<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> _cssVars <span class="token operator">=</span> <span class="token punctuation">{</span> style<span class="token operator">:</span> <span class="token punctuation">{</span> color<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>color <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">_push</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">_ssrRenderAttrs</span><span class="token punctuation">(</span>
      <span class="token function">_mergeProps</span><span class="token punctuation">(</span>_attrs<span class="token punctuation">,</span> _cssVars<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;Hello World!&lt;/span&gt;&lt;span&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">_ssrInterpolate</span><span class="token punctuation">(</span>
      _ctx<span class="token punctuation">.</span>name
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> tree-shaking</h3><!--]-->`);
}
const _sfc_setup$10 = _sfc_main$10.setup;
_sfc_main$10.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/vue3optimize.html.vue");
  return _sfc_setup$10 ? _sfc_setup$10(props, ctx) : void 0;
};
var vue3optimize_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["ssrRender", _sfc_ssrRender$O]]);
var vue3optimize_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": vue3optimize_html$1
});
const _sfc_main$$ = {};
function _sfc_ssrRender$N(_ctx, _push, _parent, _attrs) {
  _push(`<h1${serverRenderer.ssrRenderAttrs(vue.mergeProps({
    id: "introduction",
    tabindex: "-1"
  }, _attrs))}><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1>`);
}
const _sfc_setup$$ = _sfc_main$$.setup;
_sfc_main$$.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuePress/index.html.vue");
  return _sfc_setup$$ ? _sfc_setup$$(props, ctx) : void 0;
};
var index_html$m = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["ssrRender", _sfc_ssrRender$N]]);
var index_html$n = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$m
});
const _sfc_main$_ = {};
function _sfc_ssrRender$M(_ctx, _push, _parent, _attrs) {
  _push(`<h1${serverRenderer.ssrRenderAttrs(vue.mergeProps({
    id: "vuepress-\u7B14\u8BB0",
    tabindex: "-1"
  }, _attrs))}><a class="header-anchor" href="#vuepress-\u7B14\u8BB0" aria-hidden="true">#</a> VuePress \u7B14\u8BB0</h1>`);
}
const _sfc_setup$_ = _sfc_main$_.setup;
_sfc_main$_.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuePress/application.html.vue");
  return _sfc_setup$_ ? _sfc_setup$_(props, ctx) : void 0;
};
var application_html$5 = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["ssrRender", _sfc_ssrRender$M]]);
var application_html$6 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": application_html$5
});
const _sfc_main$Z = {};
function _sfc_ssrRender$L(_ctx, _push, _parent, _attrs) {
  _push(`<h1${serverRenderer.ssrRenderAttrs(vue.mergeProps({
    id: "vuepress-\u67B6\u6784\u8BBE\u8BA1",
    tabindex: "-1"
  }, _attrs))}><a class="header-anchor" href="#vuepress-\u67B6\u6784\u8BBE\u8BA1" aria-hidden="true">#</a> VuePress \u67B6\u6784\u8BBE\u8BA1</h1>`);
}
const _sfc_setup$Z = _sfc_main$Z.setup;
_sfc_main$Z.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuePress/sourceCode.html.vue");
  return _sfc_setup$Z ? _sfc_setup$Z(props, ctx) : void 0;
};
var sourceCode_html$4 = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["ssrRender", _sfc_ssrRender$L]]);
var sourceCode_html$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": sourceCode_html$4
});
var _imports_0$3 = "/assets/vue2Router.42b64e9d.png";
const _sfc_main$Y = {};
function _sfc_ssrRender$K(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><h2 id="vue2-router" tabindex="-1"><a class="header-anchor" href="#vue2-router" aria-hidden="true">#</a> vue2 Router</h2><p><img${serverRenderer.ssrRenderAttr("src", _imports_0$3)} alt="vue2Router"></p><ul><li><a href="https://next.router.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">Vue Router`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$Y = _sfc_main$Y.setup;
_sfc_main$Y.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vueRouter/index.html.vue");
  return _sfc_setup$Y ? _sfc_setup$Y(props, ctx) : void 0;
};
var index_html$k = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["ssrRender", _sfc_ssrRender$K]]);
var index_html$l = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$k
});
const _sfc_main$X = {};
function _sfc_ssrRender$J(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  _push(`<!--[--><h1 id="vue-router-4-\u65B0\u7279\u6027" tabindex="-1"><a class="header-anchor" href="#vue-router-4-\u65B0\u7279\u6027" aria-hidden="true">#</a> Vue Router 4 \u65B0\u7279\u6027</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u4F7F\u7528\u65B9\u6CD5" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u4F7F\u7528\u65B9\u6CD5`);
      } else {
        return [
          vue.createTextVNode("\u4F7F\u7528\u65B9\u6CD5")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u52A8\u6001\u8DEF\u7531" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u52A8\u6001\u8DEF\u7531`);
      } else {
        return [
          vue.createTextVNode("\u52A8\u6001\u8DEF\u7531")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u5BFC\u822A\u5B88\u536B" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u5BFC\u822A\u5B88\u536B`);
      } else {
        return [
          vue.createTextVNode("\u5BFC\u822A\u5B88\u536B")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></nav><h2 id="\u4F7F\u7528\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u65B9\u6CD5" aria-hidden="true">#</a> \u4F7F\u7528\u65B9\u6CD5</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// 1. \u5B9A\u4E49\u8DEF\u7531\u7EC4\u4EF6.</span>
<span class="token comment">// \u4E5F\u53EF\u4EE5\u4ECE\u5176\u4ED6\u6587\u4EF6\u5BFC\u5165</span>
<span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;Home&lt;/div&gt;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;About&lt;/div&gt;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 2. \u5B9A\u4E49\u4E00\u4E9B\u8DEF\u7531</span>
<span class="token comment">// \u6BCF\u4E2A\u8DEF\u7531\u90FD\u9700\u8981\u6620\u5C04\u5230\u4E00\u4E2A\u7EC4\u4EF6\u3002</span>
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Home <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> About <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 3. \u521B\u5EFA\u8DEF\u7531\u5B9E\u4F8B\u5E76\u4F20\u9012 \`routes\` \u914D\u7F6E</span>
<span class="token comment">// \u4F60\u53EF\u4EE5\u5728\u8FD9\u91CC\u8F93\u5165\u66F4\u591A\u7684\u914D\u7F6E</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> VueRouter<span class="token punctuation">.</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 4. \u5185\u90E8\u63D0\u4F9B\u4E86 history \u6A21\u5F0F\u7684\u5B9E\u73B0\u3002\u4E3A\u4E86\u7B80\u5355\u8D77\u89C1\uFF0C\u6211\u4EEC\u5728\u8FD9\u91CC\u4F7F\u7528 hash \u6A21\u5F0F\u3002</span>
  history<span class="token operator">:</span> VueRouter<span class="token punctuation">.</span><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span> <span class="token comment">// \`routes: routes\` \u7684\u7F29\u5199</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5. \u521B\u5EFA\u5E76\u6302\u8F7D\u6839\u5B9E\u4F8B</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u786E\u4FDD _use_ \u8DEF\u7531\u5B9E\u4F8B\u4F7F</span>
<span class="token comment">//\u6574\u4E2A\u5E94\u7528\u652F\u6301\u8DEF\u7531\u3002</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// Home.vue</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  computed<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u6211\u4EEC\u5F88\u5FEB\u5C31\u4F1A\u770B\u5230 \`params\` \u662F\u4EC0\u4E48</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">goToDashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isAuthenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u8981\u5728 setup \u51FD\u6570\u4E2D\u8BBF\u95EE\u8DEF\u7531\uFF0C\u9700\u8981\u8C03\u7528 useRouter \u6216 useRoute \u51FD\u6570\u3002</p><h2 id="\u52A8\u6001\u8DEF\u7531" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u8DEF\u7531" aria-hidden="true">#</a> \u52A8\u6001\u8DEF\u7531</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code>methods<span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">uploadComplete</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/uploads/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">upload-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      component<span class="token operator">:</span> FileInfo
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4F60\u8FD8\u53EF\u4EE5\u4F7F\u7528\u4EE5\u4E0B\u76F8\u5173\u65B9\u6CD5\uFF1A</p><p>-removeRoute -hasRoute -getRoutes</p><h2 id="\u5BFC\u822A\u5B88\u536B" tabindex="-1"><a class="header-anchor" href="#\u5BFC\u822A\u5B88\u536B" aria-hidden="true">#</a> \u5BFC\u822A\u5B88\u536B</h2><p>\u901A\u5E38\u7528\u4E8E\u68C0\u67E5\u7528\u6237\u662F\u5426\u6709\u6743\u9650\u8BBF\u95EE\u67D0\u4E2A\u9875\u9762\uFF0C\u9A8C\u8BC1\u52A8\u6001\u8DEF\u7531\u53C2\u6570\uFF0C\u6216\u8005\u9500\u6BC1\u76D1\u542C\u5668\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// Vue Router 3</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAuthenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Vue Router 4</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isAuthenticated<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5BFC\u822A\u5B88\u536B\u53EF\u4EE5\u8FD4\u56DE\u503C\u800C\u4E0D\u662F next</p><!--]-->`);
}
const _sfc_setup$X = _sfc_main$X.setup;
_sfc_main$X.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vueRouter/application.html.vue");
  return _sfc_setup$X ? _sfc_setup$X(props, ctx) : void 0;
};
var application_html$3 = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["ssrRender", _sfc_ssrRender$J]]);
var application_html$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": application_html$3
});
const _sfc_main$W = {};
function _sfc_ssrRender$I(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="\u539F\u751F\u8DEF\u7531\u57FA\u7840" tabindex="-1"><a class="header-anchor" href="#\u539F\u751F\u8DEF\u7531\u57FA\u7840" aria-hidden="true">#</a> \u539F\u751F\u8DEF\u7531\u57FA\u7840</h1><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">refreshData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> refreshData<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="history-\u6A21\u5F0F" tabindex="-1"><a class="header-anchor" href="#history-\u6A21\u5F0F" aria-hidden="true">#</a> history \u6A21\u5F0F</h2><ul><li>hostory \u6A21\u5F0F\u4E2D\u6709\u4E24\u4E2A\u91CD\u8981\u7684\u65B9\u6CD5\uFF0C<code>pushState</code> \u548C <code>replaceState</code>\uFF1B</li><li>\u8FD8\u6709\u4E00\u4E2A\u91CD\u8981\u7684\u4E8B\u4EF6\uFF0Cpopstate \u4E8B\u4EF6\u3002</li></ul><h3 id="pushstate" tabindex="-1"><a class="header-anchor" href="#pushstate" aria-hidden="true">#</a> pushState</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">var</span> stateObj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>stateObj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>state: \u662F\u4E00\u4E2A JavaScript \u5BF9\u8C61\uFF0C\u4EE5\u540E\u4F60\u8981\u7528\u5230\u7684\u4FE1\u606F\uFF0C\u90FD\u53EF\u4EE5\u653E\u5230\u8FD9\u4E2A\u5BF9\u8C61\u4E2D\u3002</li><li>title: \u65B0\u9875\u9762\u7684\u6807\u9898\uFF0C\u6240\u6709\u6D4F\u89C8\u5668\u76EE\u524D\u90FD\u5FFD\u7565\u8FD9\u4E2A\u503C\uFF0C\u56E0\u6B64\u8FD9\u91CC\u53EF\u4EE5\u586B null\u3002</li><li>url: \u662F\u53EF\u9009\u7684\uFF0C\u8D1F\u8D23\u6539\u53D8\u6D4F\u89C8\u5668\u7684\u5730\u5740\u680F\u4E2D\u663E\u793A\u7684 url\uFF0C\u5982\u679C\u6CA1\u6709\u6307\u5B9A url\uFF0C\u4F60\u70B9\u51FB\u524D\u8FDB\u540E\u9000\u6309\u94AE\u9875\u9762\u8FD8\u662F\u4F1A\u53D8\u5316\uFF0C\u53EA\u662F\u6D4F\u89C8\u5668\u7684\u5730\u5740\u680F\u4E0A\u663E\u793A\u7684 url \u4F1A\u4E00\u76F4\u4FDD\u6301\u4E0D\u53D8\u3002</li></ul><h3 id="replacestate" tabindex="-1"><a class="header-anchor" href="#replacestate" aria-hidden="true">#</a> replaceState</h3><p>replaceState \u548C pushState \u7684\u533A\u522B\u5C31\u5728\u4E8E\u5B83\u4E0D\u662F\u5199\u5165\u800C\u662F\u66FF\u6362\u4FEE\u6539\u6D4F\u89C8\u5386\u53F2\u4E2D\u5F53\u524D\u7EAA\u5F55\uFF0C\u5176\u4F59\u548C pushState \u4E00\u6A21\u4E00\u6837\u3002</p><h3 id="popstate" tabindex="-1"><a class="header-anchor" href="#popstate" aria-hidden="true">#</a> popstate</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">refreshData</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> refreshData<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> location</h2><h3 id="location-assign" tabindex="-1"><a class="header-anchor" href="#location-assign" aria-hidden="true">#</a> Location.assign()</h3><p>\u52A0\u8F7D\u7ED9\u5B9A URL \u7684\u5185\u5BB9\u8D44\u6E90\u5230\u8FD9\u4E2A Location \u5BF9\u8C61\u6240\u5173\u8054\u7684\u5BF9\u8C61\u4E0A\u3002</p><h3 id="location-replace" tabindex="-1"><a class="header-anchor" href="#location-replace" aria-hidden="true">#</a> Location.replace()</h3><p>\u7528\u7ED9\u5B9A\u7684 URL \u66FF\u6362\u6389\u5F53\u524D\u7684\u8D44\u6E90\u3002\u4E0E assign() \u65B9\u6CD5\u4E0D\u540C\u7684\u662F\u7528 replace()\u66FF\u6362\u7684\u65B0\u9875\u9762\u4E0D\u4F1A\u88AB\u4FDD\u5B58\u5728\u4F1A\u8BDD\u7684\u5386\u53F2 History \u4E2D\uFF0C\u8FD9\u610F\u5473\u7740\u7528\u6237\u5C06\u4E0D\u80FD\u7528\u540E\u9000\u6309\u94AE\u8F6C\u5230\u8BE5\u9875\u9762\u3002</p><h3 id="location-\u5C5E\u6027" tabindex="-1"><a class="header-anchor" href="#location-\u5C5E\u6027" aria-hidden="true">#</a> Location \u5C5E\u6027</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
url<span class="token punctuation">.</span>href <span class="token operator">=</span>
  <span class="token string">&#39;https://developer.mozilla.org/en-US/search?q=URL#search-results-close-container&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://developer.mozilla.org/en-US/search?q=URL#search-results-close-container</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// developer.mozilla.org</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// developer.mozilla.org</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (blank - https assumes port 443)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /en-US/search</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?q=URL</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// #search-results-close-container</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://developer.mozilla.org</span>
</code></pre></div><h2 id="\u5176\u5B83" tabindex="-1"><a class="header-anchor" href="#\u5176\u5B83" aria-hidden="true">#</a> \u5176\u5B83</h2><ul><li>\u5BF9 hash \u503C\u7684\u8BFB\u5199\u53EF\u4EE5\u901A\u8FC7 window.location.hash \u5B8C\u6210\u3002</li><li>\u5BF9 hash \u53EF\u4EE5\u4F7F\u7528 window.location.replace()\u65B9\u6CD5\u66FF\u6362\u8DEF\u7531\u3002</li></ul><!--]-->`);
}
const _sfc_setup$W = _sfc_main$W.setup;
_sfc_main$W.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vueRouter/browserRouter.html.vue");
  return _sfc_setup$W ? _sfc_setup$W(props, ctx) : void 0;
};
var browserRouter_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["ssrRender", _sfc_ssrRender$I]]);
var browserRouter_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": browserRouter_html$1
});
const _sfc_main$V = {};
function _sfc_ssrRender$H(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="vue-router-v4-0-12" tabindex="-1"><a class="header-anchor" href="#vue-router-v4-0-12" aria-hidden="true">#</a> vue-router v4.0.12</h1><p><code>vue-router.esm-browser.js</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">/*!
 * vue-router v4.0.12
 * (c) 2021 Eduardo San Martin Morote
 * @license MIT
 */</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  getCurrentInstance<span class="token punctuation">,</span>
  inject<span class="token punctuation">,</span>
  onUnmounted<span class="token punctuation">,</span>
  onDeactivated<span class="token punctuation">,</span>
  onActivated<span class="token punctuation">,</span>
  computed<span class="token punctuation">,</span>
  unref<span class="token punctuation">,</span>
  watchEffect<span class="token punctuation">,</span>
  defineComponent<span class="token punctuation">,</span>
  reactive<span class="token punctuation">,</span>
  h<span class="token punctuation">,</span>
  provide<span class="token punctuation">,</span>
  ref<span class="token punctuation">,</span>
  watch<span class="token punctuation">,</span>
  shallowRef<span class="token punctuation">,</span>
  nextTick<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupDevtoolsPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/devtools-api&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> hasSymbol <span class="token operator">=</span>
  <span class="token keyword">typeof</span> Symbol <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Symbol<span class="token punctuation">.</span>toStringTag <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">PolySymbol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token comment">// vr = vue router</span>
  hasSymbol <span class="token operator">?</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;[vue-router]: &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;[vue-router]: &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token comment">// rvlm = Router View Location Matched</span>
<span class="token doc-comment comment">/**
 * RouteRecord being rendered by the closest ancestor Router View. Used for
 * \`onBeforeRouteUpdate\` and \`onBeforeRouteLeave\`. rvlm stands for Router View
 * Location Matched
 *
 * <span class="token keyword">@internal</span>
 */</span>
<span class="token keyword">const</span> matchedRouteKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span>
  <span class="token string">&#39;router view location matched&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Allows overriding the router view depth to control which component in
 * \`matched\` is rendered. rvd stands for Router View Depth
 *
 * <span class="token keyword">@internal</span>
 */</span>
<span class="token keyword">const</span> viewDepthKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router view depth&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Allows overriding the router instance returned by \`useRouter\` in tests. r
 * stands for router
 *
 * <span class="token keyword">@internal</span>
 */</span>
<span class="token keyword">const</span> routerKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Allows overriding the current route returned by \`useRoute\` in tests. rl
 * stands for route location
 *
 * <span class="token keyword">@internal</span>
 */</span>
<span class="token keyword">const</span> routeLocationKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;route location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Allows overriding the current route used by router-view. Internally this is
 * used when the \`route\` prop is passed.
 *
 * <span class="token keyword">@internal</span>
 */</span>
<span class="token keyword">const</span> routerViewLocationKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router view location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isBrowser <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isESModule</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>__esModule <span class="token operator">||</span> <span class="token punctuation">(</span>hasSymbol <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> assign <span class="token operator">=</span> Object<span class="token punctuation">.</span>assign<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">applyToParams</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    newParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> newParams<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">noop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// avoid using ...args as it breaks in older Edge builds</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;[Vue Router warn]: &#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">TRAILING_SLASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">removeTrailingSlash</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">TRAILING_SLASH_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Transforms an URI into a normalized history location
 *
 * <span class="token keyword">@param</span> <span class="token parameter">parseQuery</span>
 * <span class="token keyword">@param</span> <span class="token parameter">location</span> - URI to normalize
 * <span class="token keyword">@param</span> <span class="token parameter">currentLocation</span> - current absolute location. Allows resolving relative
 * paths. Must start with \`/\`. Defaults to \`/\`
 * <span class="token keyword">@returns</span> a normalized history location
 */</span>
<span class="token keyword">function</span> <span class="token function">parseURL</span><span class="token punctuation">(</span>parseQuery<span class="token punctuation">,</span> location<span class="token punctuation">,</span> currentLocation <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> path<span class="token punctuation">,</span>
    query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    searchString <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    hash <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// Could use URL and URLSearchParams but IE 11 doesn&#39;t support it</span>
  <span class="token keyword">const</span> searchPos <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> hashPos <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">,</span> searchPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> searchPos <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    path <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> searchPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    searchString <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>
      searchPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
      hashPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> hashPos <span class="token operator">:</span> location<span class="token punctuation">.</span>length
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    query <span class="token operator">=</span> <span class="token function">parseQuery</span><span class="token punctuation">(</span>searchString<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    path <span class="token operator">=</span> path <span class="token operator">||</span> location<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hashPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// keep the # character</span>
    hash <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashPos<span class="token punctuation">,</span> location<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// no search and no query</span>
  path <span class="token operator">=</span> <span class="token function">resolveRelativePath</span><span class="token punctuation">(</span>path <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> path <span class="token operator">:</span> location<span class="token punctuation">,</span> currentLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// empty path means a relative query or hash \`?foo=f\`, \`#thing\`</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    fullPath<span class="token operator">:</span> path <span class="token operator">+</span> <span class="token punctuation">(</span>searchString <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> searchString <span class="token operator">+</span> hash<span class="token punctuation">,</span>
    path<span class="token punctuation">,</span>
    query<span class="token punctuation">,</span>
    hash<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Stringifies a URL object
 *
 * <span class="token keyword">@param</span> <span class="token parameter">stringifyQuery</span>
 * <span class="token keyword">@param</span> <span class="token parameter">location</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">stringifyURL</span><span class="token punctuation">(</span><span class="token parameter">stringifyQuery<span class="token punctuation">,</span> location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> query <span class="token operator">=</span> location<span class="token punctuation">.</span>query <span class="token operator">?</span> <span class="token function">stringifyQuery</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> location<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token punctuation">(</span>query <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> query <span class="token operator">+</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Strips off the base from the beginning of a location.pathname in a non
 * case-sensitive way.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">pathname</span> - location.pathname
 * <span class="token keyword">@param</span> <span class="token parameter">base</span> - base to strip off
 */</span>
<span class="token keyword">function</span> <span class="token function">stripBase</span><span class="token punctuation">(</span><span class="token parameter">pathname<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// no base or base is not found at the beginning</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base <span class="token operator">||</span> <span class="token operator">!</span>pathname<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> pathname<span class="token punctuation">;</span>
  <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Checks if two RouteLocation are equal. This means that both locations are
 * pointing towards the same <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteRecord<span class="token punctuation">}</span> and that all \`params\`, \`query\`
 * parameters and \`hash\` are the same
 *
 * <span class="token keyword">@param</span> <span class="token parameter">a</span> - first <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteLocation<span class="token punctuation">}</span>
 * <span class="token keyword">@param</span> <span class="token parameter">b</span> - second <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteLocation<span class="token punctuation">}</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span><span class="token parameter">stringifyQuery<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> aLastIndex <span class="token operator">=</span> a<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> bLastIndex <span class="token operator">=</span> b<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    aLastIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
    aLastIndex <span class="token operator">===</span> bLastIndex <span class="token operator">&amp;&amp;</span>
    <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>aLastIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>bLastIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token function">isSameRouteLocationParams</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>params<span class="token punctuation">,</span> b<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token function">stringifyQuery</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">stringifyQuery</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    a<span class="token punctuation">.</span>hash <span class="token operator">===</span> b<span class="token punctuation">.</span>hash
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Check if two \`RouteRecords\` are equal. Takes into account aliases: they are
 * considered equal to the \`RouteRecord\` they are aliasing.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">a</span> - first <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteRecord<span class="token punctuation">}</span>
 * <span class="token keyword">@param</span> <span class="token parameter">b</span> - second <span class="token punctuation">{</span><span class="token keyword">@link</span> RouteRecord<span class="token punctuation">}</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// since the original record has an undefined value for aliasOf</span>
  <span class="token comment">// but all aliases point to the original record, this will always compare</span>
  <span class="token comment">// the original record</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>aliasOf <span class="token operator">||</span> a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>aliasOf <span class="token operator">||</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isSameRouteLocationParams</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSameRouteLocationParamsValue</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isSameRouteLocationParamsValue</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token function">isEquivalentArray</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token operator">:</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token function">isEquivalentArray</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
    <span class="token operator">:</span> a <span class="token operator">===</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Check if two arrays are the same or if an array with one single entry is the
 * same as another primitive value. Used to check query and parameters
 *
 * <span class="token keyword">@param</span> <span class="token parameter">a</span> - array of values
 * <span class="token keyword">@param</span> <span class="token parameter">b</span> - array of values or a single value
 */</span>
<span class="token keyword">function</span> <span class="token function">isEquivalentArray</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token operator">?</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">===</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Resolves a relative path that starts with \`.\`.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">to</span> - path location we are resolving
 * <span class="token keyword">@param</span> <span class="token parameter">from</span> - currentLocation.path, should start with \`/\`
 */</span>
<span class="token keyword">function</span> <span class="token function">resolveRelativePath</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> to<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>from<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Cannot resolve a relative location without an absolute path. Trying to resolve &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. It should look like &quot;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> to<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>to<span class="token punctuation">)</span> <span class="token keyword">return</span> from<span class="token punctuation">;</span>
  <span class="token keyword">const</span> fromSegments <span class="token operator">=</span> from<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> toSegments <span class="token operator">=</span> to<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> position <span class="token operator">=</span> fromSegments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> toPosition<span class="token punctuation">;</span>
  <span class="token keyword">let</span> segment<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>toPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> toPosition <span class="token operator">&lt;</span> toSegments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> toPosition<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    segment <span class="token operator">=</span> toSegments<span class="token punctuation">[</span>toPosition<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// can&#39;t go below zero</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> segment <span class="token operator">===</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment <span class="token operator">===</span> <span class="token string">&#39;..&#39;</span><span class="token punctuation">)</span> position<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">// found something that is not relative path</span>
    <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    fromSegments<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span>
    toSegments
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>toPosition <span class="token operator">-</span> <span class="token punctuation">(</span>toPosition <span class="token operator">===</span> toSegments<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> NavigationType<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">NavigationType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  NavigationType<span class="token punctuation">[</span><span class="token string">&#39;pop&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">;</span>
  NavigationType<span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;push&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NavigationType <span class="token operator">||</span> <span class="token punctuation">(</span>NavigationType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> NavigationDirection<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">NavigationDirection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  NavigationDirection<span class="token punctuation">[</span><span class="token string">&#39;back&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;back&#39;</span><span class="token punctuation">;</span>
  NavigationDirection<span class="token punctuation">[</span><span class="token string">&#39;forward&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;forward&#39;</span><span class="token punctuation">;</span>
  NavigationDirection<span class="token punctuation">[</span><span class="token string">&#39;unknown&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NavigationDirection <span class="token operator">||</span> <span class="token punctuation">(</span>NavigationDirection <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Starting location for Histories
 */</span>
<span class="token keyword">const</span> <span class="token constant">START</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// Generic utils</span>
<span class="token doc-comment comment">/**
 * Normalizes a base by removing any trailing slash and reading the base tag if
 * present.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">base</span> - base to normalize
 */</span>
<span class="token keyword">function</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// respect &lt;base&gt; tag</span>
      <span class="token keyword">const</span> baseEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      base <span class="token operator">=</span> <span class="token punctuation">(</span>baseEl <span class="token operator">&amp;&amp;</span> baseEl<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
      <span class="token comment">// strip full URL origin</span>
      base <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+:\\/\\/[^\\/]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      base <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ensure leading slash when it was removed by the regex above avoid leading</span>
  <span class="token comment">// slash with hash because the file could be read from the disk like file://</span>
  <span class="token comment">// and the leading slash would cause problems</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">&amp;&amp;</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> base <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> base<span class="token punctuation">;</span>
  <span class="token comment">// remove the trailing slash so all other method can just do \`base + fullPath\`</span>
  <span class="token comment">// to build an href</span>
  <span class="token keyword">return</span> <span class="token function">removeTrailingSlash</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// remove any character before the hash</span>
<span class="token keyword">const</span> <span class="token constant">BEFORE_HASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^#]+#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createHref</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> base<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">BEFORE_HASH_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> location<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getElementPosition</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> offset</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> docRect <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> elRect <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    behavior<span class="token operator">:</span> offset<span class="token punctuation">.</span>behavior<span class="token punctuation">,</span>
    left<span class="token operator">:</span> elRect<span class="token punctuation">.</span>left <span class="token operator">-</span> docRect<span class="token punctuation">.</span>left <span class="token operator">-</span> <span class="token punctuation">(</span>offset<span class="token punctuation">.</span>left <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    top<span class="token operator">:</span> elRect<span class="token punctuation">.</span>top <span class="token operator">-</span> docRect<span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token punctuation">(</span>offset<span class="token punctuation">.</span>top <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">computeScrollPosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  left<span class="token operator">:</span> window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">,</span>
  top<span class="token operator">:</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">scrollToPosition</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> scrollToOptions<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;el&#39;</span> <span class="token keyword">in</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> positionEl <span class="token operator">=</span> position<span class="token punctuation">.</span>el<span class="token punctuation">;</span>
    <span class="token keyword">const</span> isIdSelector <span class="token operator">=</span>
      <span class="token keyword">typeof</span> positionEl <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span> positionEl<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * \`id\`s can accept pretty much any characters, including CSS combinators
     * like \`&gt;\` or \`~\`. It&#39;s still possible to retrieve elements using
     * \`document.getElementById(&#39;~&#39;)\` but it needs to be escaped when using
     * \`document.querySelector(&#39;#\\\\~&#39;)\` for it to be valid. The only
     * requirements for \`id\`s are them to be unique on the page and to not be
     * empty (\`id=&quot;&quot;\`). Because of that, when passing an id selector, it should
     * be properly escaped for it to work with \`querySelector\`. We could check
     * for the id selector to be simple (no CSS combinators \`+ &gt;~\`) but that
     * would make things inconsistent since they are valid characters for an
     * \`id\` but would need to be escaped when using \`querySelector\`, breaking
     * their usage and ending up in no selector returned. Selectors need to be
     * escaped:
     *
     * - \`#1-thing\` becomes \`#\\31 -thing\`
     * - \`#with~symbols\` becomes \`#with\\\\~symbols\`
     *
     * - More information about  the topic can be found at
     *   https://mathiasbynens.be/notes/html5-id-class.
     * - Practical example: https://mathiasbynens.be/demo/html5-id
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> position<span class="token punctuation">.</span>el <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isIdSelector <span class="token operator">||</span> <span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> foundEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>isIdSelector <span class="token operator">&amp;&amp;</span> foundEl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">warn</span><span class="token punctuation">(</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The selector &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>position<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should be passed as &quot;el: document.querySelector(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>position<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;)&quot; because it starts with &quot;#&quot;.</span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// return to avoid other warnings</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The selector &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>position<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// return to avoid other warnings</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> el <span class="token operator">=</span>
      <span class="token keyword">typeof</span> positionEl <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>
        <span class="token operator">?</span> isIdSelector
          <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>positionEl<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>positionEl<span class="token punctuation">)</span>
        <span class="token operator">:</span> positionEl<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Couldn&#39;t find element using selector &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>position<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; returned by scrollBehavior.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    scrollToOptions <span class="token operator">=</span> <span class="token function">getElementPosition</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    scrollToOptions <span class="token operator">=</span> position<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;scrollBehavior&#39;</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">)</span>
    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>scrollToOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>
      scrollToOptions<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> scrollToOptions<span class="token punctuation">.</span>left <span class="token operator">:</span> window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">,</span>
      scrollToOptions<span class="token punctuation">.</span>top <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> scrollToOptions<span class="token punctuation">.</span>top <span class="token operator">:</span> window<span class="token punctuation">.</span>pageYOffset
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getScrollKey</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> delta</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> position <span class="token operator">=</span> history<span class="token punctuation">.</span>state <span class="token operator">?</span> history<span class="token punctuation">.</span>state<span class="token punctuation">.</span>position <span class="token operator">-</span> delta <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> position <span class="token operator">+</span> path<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> scrollPositions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">saveScrollPosition</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> scrollPosition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  scrollPositions<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> scrollPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getSavedScrollPosition</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> scroll <span class="token operator">=</span> scrollPositions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// consume it so it&#39;s not used again</span>
  scrollPositions<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> scroll<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// TODO: RFC about how to save scroll position</span>
<span class="token doc-comment comment">/**
 * ScrollBehavior instance used by the router to compute and restore the scroll
 * position when navigating.
 */</span>
<span class="token comment">// export interface ScrollHandler&lt;ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry&gt; {</span>
<span class="token comment">//   // returns a scroll position that can be saved in history</span>
<span class="token comment">//   compute(): ScrollPositionEntry</span>
<span class="token comment">//   // can take an extended ScrollPositionEntry</span>
<span class="token comment">//   scroll(position: ScrollPosition): void</span>
<span class="token comment">// }</span>
<span class="token comment">// export const scrollHandler: ScrollHandler&lt;ScrollPosition&gt; = {</span>
<span class="token comment">//   compute: computeScroll,</span>
<span class="token comment">//   scroll: scrollToPosition,</span>
<span class="token comment">// }</span>

<span class="token keyword">let</span> <span class="token function-variable function">createBaseLocation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> location<span class="token punctuation">.</span>protocol <span class="token operator">+</span> <span class="token string">&#39;//&#39;</span> <span class="token operator">+</span> location<span class="token punctuation">.</span>host<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Creates a normalized history location from a window.location object
 * <span class="token keyword">@param</span> <span class="token parameter">location</span> -
 */</span>
<span class="token keyword">function</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> search<span class="token punctuation">,</span> hash <span class="token punctuation">}</span> <span class="token operator">=</span> location<span class="token punctuation">;</span>
  <span class="token comment">// allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end</span>
  <span class="token keyword">const</span> hashPos <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> slicePos <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashPos<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashPos<span class="token punctuation">)</span><span class="token punctuation">.</span>length
      <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pathFromHash <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>slicePos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// prepend the starting slash to hash so the url starts with /#</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathFromHash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> pathFromHash <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> pathFromHash<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathFromHash<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> path <span class="token operator">+</span> search <span class="token operator">+</span> hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> historyState<span class="token punctuation">,</span> currentLocation<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// TODO: should it be a stack? a Dict. Check if the popstate listener</span>
  <span class="token comment">// can trigger twice</span>
  <span class="token keyword">let</span> pauseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">popStateHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> state <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> to <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> from <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">const</span> fromState <span class="token operator">=</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">let</span> delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>
      historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">;</span>
      <span class="token comment">// ignore the popstate and reset the pauseState</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pauseState <span class="token operator">&amp;&amp;</span> pauseState <span class="token operator">===</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pauseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      delta <span class="token operator">=</span> fromState <span class="token operator">?</span> state<span class="token punctuation">.</span>position <span class="token operator">-</span> fromState<span class="token punctuation">.</span>position <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// console.log({ deltaFromCurrent })</span>
    <span class="token comment">// Here we could also revert the navigation by calling history.go(-delta)</span>
    <span class="token comment">// this listener will have to be adapted to not trigger again and to wait for the url</span>
    <span class="token comment">// to be updated before triggering the listeners. Some kind of validation function would also</span>
    <span class="token comment">// need to be passed to the listeners so the navigation can be accepted</span>
    <span class="token comment">// call all listeners</span>
    listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">listener</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        delta<span class="token punctuation">,</span>
        type<span class="token operator">:</span> NavigationType<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>
        direction<span class="token operator">:</span> delta
          <span class="token operator">?</span> delta <span class="token operator">&gt;</span> <span class="token number">0</span>
            <span class="token operator">?</span> NavigationDirection<span class="token punctuation">.</span>forward
            <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>back
          <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>unknown<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pauseState <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// setup the listener and prepare teardown callbacks</span>
    listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">teardown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    teardowns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>teardown<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> teardown<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">beforeUnloadListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>
      <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> teardown <span class="token keyword">of</span> teardowns<span class="token punctuation">)</span> <span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// setup the listeners and prepare teardown callbacks</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    pauseListeners<span class="token punctuation">,</span>
    listen<span class="token punctuation">,</span>
    destroy<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Creates a state object
 */</span>
<span class="token keyword">function</span> <span class="token function">buildState</span><span class="token punctuation">(</span>
  <span class="token parameter">back<span class="token punctuation">,</span>
  current<span class="token punctuation">,</span>
  forward<span class="token punctuation">,</span>
  replaced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  computeScroll <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    back<span class="token punctuation">,</span>
    current<span class="token punctuation">,</span>
    forward<span class="token punctuation">,</span>
    replaced<span class="token punctuation">,</span>
    position<span class="token operator">:</span> window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    scroll<span class="token operator">:</span> computeScroll <span class="token operator">?</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> location <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>
  <span class="token comment">// private variables</span>
  <span class="token keyword">const</span> currentLocation <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> historyState <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> history<span class="token punctuation">.</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// build current history entry as this is a fresh navigation</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>historyState<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>
      currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        back<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        current<span class="token operator">:</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
        forward<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token comment">// the length is off by one, we need to decrease it</span>
        position<span class="token operator">:</span> history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        replaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// don&#39;t add a scroll as the user may have an anchor and we want</span>
        <span class="token comment">// scrollBehavior to be triggered without a saved position</span>
        scroll<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token boolean">true</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * if a base tag is provided and we are on a normal domain, we have to
     * respect the provided \`base\` attribute because pushState() will use it and
     * potentially erase anything before the \`#\` like at
     * https://github.com/vuejs/vue-router-next/issues/685 where a base of
     * \`/folder/#\` but a base of \`/\` would erase the \`/folder/\` section. If
     * there is no host, the \`&lt;base&gt;\` tag makes no sense and if there isn&#39;t a
     * base tag we can just use everything after the \`#\`.
     */</span>
    <span class="token keyword">const</span> hashIndex <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span>
      hashIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token operator">?</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>host <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">?</span> base
            <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> to
        <span class="token operator">:</span> <span class="token function">createBaseLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> base <span class="token operator">+</span> to<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// BROWSER QUIRK</span>
      <span class="token comment">// NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds</span>
      history<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replaceState&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;pushState&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
      historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Error with push/replace State&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// Force the navigation, this also resets the call count</span>
      location<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replace&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      history<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
      <span class="token function">buildState</span><span class="token punctuation">(</span>
        historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>back<span class="token punctuation">,</span>
        <span class="token comment">// keep back and forward entries but override current position</span>
        to<span class="token punctuation">,</span>
        historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>
        <span class="token boolean">true</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      data<span class="token punctuation">,</span>
      <span class="token punctuation">{</span> position<span class="token operator">:</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>position <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Add to current entry the information of where we are going</span>
    <span class="token comment">// as well as saving the current position</span>
    <span class="token keyword">const</span> currentState <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// use current history state to gracefully handle a wrong call to</span>
      <span class="token comment">// history.replaceState</span>
      <span class="token comment">// https://github.com/vuejs/vue-router-next/issues/366</span>
      historyState<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
      history<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        forward<span class="token operator">:</span> to<span class="token punctuation">,</span>
        scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">history.replaceState(history.state, &#39;&#39;, url)\\n\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>currentState<span class="token punctuation">.</span>current<span class="token punctuation">,</span> currentState<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">buildState</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> to<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> position<span class="token operator">:</span> currentState<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      data
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    location<span class="token operator">:</span> currentLocation<span class="token punctuation">,</span>
    state<span class="token operator">:</span> historyState<span class="token punctuation">,</span>
    push<span class="token punctuation">,</span>
    replace<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Creates an HTML5 history. Most common history for single page applications.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">base</span> -
 */</span>
<span class="token keyword">function</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> historyNavigation <span class="token operator">=</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> historyListeners <span class="token operator">=</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span>
    base<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>replace
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">delta<span class="token punctuation">,</span> triggerListeners <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>triggerListeners<span class="token punctuation">)</span> historyListeners<span class="token punctuation">.</span><span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> routerHistory <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// it&#39;s overridden right after</span>
      location<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      base<span class="token punctuation">,</span>
      go<span class="token punctuation">,</span>
      createHref<span class="token operator">:</span> <span class="token function">createHref</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">,</span>
    historyListeners
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> routerHistory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.
 * It&#39;s up to the user to replace that location with the starter location by either calling \`router.push\` or \`router.replace\`.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">base</span> - Base applied to all urls, defaults to &#39;/&#39;
 * <span class="token keyword">@returns</span> a history object that can be passed to the router constructor
 */</span>
<span class="token keyword">function</span> <span class="token function">createMemoryHistory</span><span class="token punctuation">(</span>base <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">START</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    position<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// we are at the end, we can simply append a new entry</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// we are in the middle, we remove everything from here in the queue</span>
      queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">triggerListeners</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span> direction<span class="token punctuation">,</span> delta <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>
      direction<span class="token punctuation">,</span>
      delta<span class="token punctuation">,</span>
      type<span class="token operator">:</span> NavigationType<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> callback <span class="token keyword">of</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> routerHistory <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// rewritten by Object.defineProperty</span>
    location<span class="token operator">:</span> <span class="token constant">START</span><span class="token punctuation">,</span>
    <span class="token comment">// TODO: should be kept in queue</span>
    state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    base<span class="token punctuation">,</span>
    createHref<span class="token operator">:</span> <span class="token function">createHref</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// remove current entry and decrement position</span>
      queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>position<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">START</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">delta<span class="token punctuation">,</span> shouldTrigger <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> from <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>location<span class="token punctuation">;</span>
      <span class="token keyword">const</span> direction <span class="token operator">=</span>
        <span class="token comment">// we are considering delta === 0 going forward, but in abstract mode</span>
        <span class="token comment">// using 0 for the delta doesn&#39;t make sense like it does in html5 where</span>
        <span class="token comment">// it reloads the page</span>
        delta <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> NavigationDirection<span class="token punctuation">.</span>back <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>forward<span class="token punctuation">;</span>
      position <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>position <span class="token operator">+</span> delta<span class="token punctuation">,</span> queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">triggerListeners</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>location<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          direction<span class="token punctuation">,</span>
          delta<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> queue<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> routerHistory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Creates a hash history. Useful for web applications with no host (e.g.
 * \`file://\`) or when configuring a server to handle any URL is not possible.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">base</span> - optional base to provide. Defaults to \`location.pathname +
 * location.search\` If there is a \`&lt;base&gt;\` tag in the \`head\`, its value will be
 * ignored in favor of this parameter **but note it affects all the
 * history.pushState() calls**, meaning that if you use a \`&lt;base&gt;\` tag, it&#39;s
 * \`href\` value **has to match this parameter** (ignoring anything after the
 * \`#\`).
 *
 * <span class="token keyword">@example</span>
 <span class="token example">* <span class="token code language-javascript"><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>\`js</span>
 * <span class="token code language-javascript"><span class="token comment">// at https://example.com/folder</span></span>
 * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of \`https://example.com/folder#\`</span></span>
 * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/folder/&#39;</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of \`https://example.com/folder/#\`</span></span>
 * <span class="token code language-javascript"><span class="token comment">// if the \`#\` is provided in the base, it won&#39;t be added by \`createWebHashHistory\`</span></span>
 * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/folder/#/app/&#39;</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of \`https://example.com/folder/#/app/\`</span></span>
 * <span class="token code language-javascript"><span class="token comment">// you should avoid doing this because it changes the original url and breaks copying urls</span></span>
 * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/other-folder/&#39;</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of \`https://example.com/other-folder/#\`</span></span>
 *
 <span class="token code language-javascript"><span class="token operator">*</span> <span class="token comment">// at file:///usr/etc/folder/index.html</span></span>
 * <span class="token code language-javascript"><span class="token comment">// for locations with no \`host\`, the base is ignored</span></span>
 * <span class="token code language-javascript"><span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token string">&#39;/iAmIgnored&#39;</span><span class="token punctuation">)</span> <span class="token comment">// gives a url of \`file:///usr/etc/folder/index.html#\`</span></span>
 * <span class="token code language-javascript"><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>\`</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Make sure this implementation is fine in terms of encoding, specially for IE11</span>
  <span class="token comment">// for \`file://\`, directly use the pathname and ignore the base</span>
  <span class="token comment">// location.pathname contains an initial \`/\` even at the root: \`https://example.com\`</span>
  base <span class="token operator">=</span> location<span class="token punctuation">.</span>host <span class="token operator">?</span> base <span class="token operator">||</span> location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> location<span class="token punctuation">.</span>search <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// allow the user to provide a \`#\` in the middle: \`/base/#/app\`</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> base <span class="token operator">+=</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#/&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>base<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">A hash base must end with a &quot;#&quot;:\\n&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>base<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should be &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>base<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#.*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token string">&#39;#&#39;</span>
      <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isRouteLocation</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> route <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token punctuation">(</span>route <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> route <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isRouteName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Initial route location where the router is. Can be used in navigation guards
 * to differentiate the initial navigation.
 *
 * <span class="token keyword">@example</span>
 <span class="token example">* <span class="token code language-javascript"><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>\`js</span>
 * <span class="token code language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">START_LOCATION</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span></span>
 *
 <span class="token code language-javascript"><span class="token operator">*</span> router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
 *   <span class="token code language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">===</span> <span class="token constant">START_LOCATION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
 *     <span class="token code language-javascript"><span class="token comment">// initial navigation</span></span>
 *   <span class="token code language-javascript"><span class="token punctuation">}</span></span>
 * <span class="token code language-javascript"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
 * <span class="token code language-javascript"><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>\`</span></span>
 */</span>
<span class="token keyword">const</span> <span class="token constant">START_LOCATION_NORMALIZED</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  query<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  hash<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  fullPath<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  matched<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  meta<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  redirectedFrom<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> NavigationFailureSymbol <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;navigation failure&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Enumeration with all possible types for navigation failures. Can be passed to
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> isNavigationFailure<span class="token punctuation">}</span> to check for specific failures.
 */</span>
<span class="token keyword">var</span> NavigationFailureType<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">NavigationFailureType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * An aborted navigation is a navigation that failed because a navigation
   * guard returned \`false\` or called \`next(false)\`
   */</span>
  NavigationFailureType<span class="token punctuation">[</span><span class="token punctuation">(</span>NavigationFailureType<span class="token punctuation">[</span><span class="token string">&#39;aborted&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;aborted&#39;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * A cancelled navigation is a navigation that failed because a more recent
   * navigation finished started (not necessarily finished).
   */</span>
  NavigationFailureType<span class="token punctuation">[</span><span class="token punctuation">(</span>NavigationFailureType<span class="token punctuation">[</span><span class="token string">&#39;cancelled&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;cancelled&#39;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * A duplicated navigation is a navigation that failed because it was
   * initiated while already being at the exact same location.
   */</span>
  NavigationFailureType<span class="token punctuation">[</span><span class="token punctuation">(</span>NavigationFailureType<span class="token punctuation">[</span><span class="token string">&#39;duplicated&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span>
    <span class="token string">&#39;duplicated&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NavigationFailureType <span class="token operator">||</span> <span class="token punctuation">(</span>NavigationFailureType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// DEV only debug messages</span>
<span class="token keyword">const</span> ErrorTypeMessages <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> location<span class="token punctuation">,</span> currentLocation <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">No match for\\n </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
      currentLocation
        <span class="token operator">?</span> <span class="token string">&#39;\\nwhile being at\\n&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">2</span> <span class="token comment">/* NAVIGATION_GUARD_REDIRECT */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Redirected from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">stringifyRoute</span><span class="token punctuation">(</span>
      to
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; via a navigation guard.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Navigation aborted from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>to<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; via a navigation guard.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Navigation cancelled from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>to<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; with a new navigation.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> from<span class="token punctuation">,</span> to <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Avoided redundant navigation to current location: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// keep full error messages in cjs versions</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ErrorTypeMessages<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        type<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>NavigationFailureSymbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      params
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">&amp;&amp;</span>
    NavigationFailureSymbol <span class="token keyword">in</span> error <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>type <span class="token operator">&amp;</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> propertiesToLog <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;params&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;query&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hash&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">stringifyRoute</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> to<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> to<span class="token punctuation">)</span> <span class="token keyword">return</span> to<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> propertiesToLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> to<span class="token punctuation">)</span> location<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> to<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// default pattern for a param: non greedy everything but /</span>
<span class="token keyword">const</span> <span class="token constant">BASE_PARAM_PATTERN</span> <span class="token operator">=</span> <span class="token string">&#39;[^/]+?&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">BASE_PATH_PARSER_OPTIONS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  sensitive<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  strict<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  start<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  end<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Special Regex characters that must be escaped in static tokens</span>
<span class="token keyword">const</span> <span class="token constant">REGEX_CHARS_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.+*?^\${}()[\\]/\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Creates a path parser from an array of Segments (a segment is an array of Tokens)
 *
 * <span class="token keyword">@param</span> <span class="token parameter">segments</span> - array of segments returned by tokenizePath
 * <span class="token keyword">@param</span> <span class="token parameter">extraOptions</span> - optional options for the regexp
 * <span class="token keyword">@returns</span> a PathParser
 */</span>
<span class="token keyword">function</span> <span class="token function">tokensToParser</span><span class="token punctuation">(</span><span class="token parameter">segments<span class="token punctuation">,</span> extraOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">BASE_PATH_PARSER_OPTIONS</span><span class="token punctuation">,</span> extraOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// the amount of scores is the same as the length of segments except for the root segment &quot;/&quot;</span>
  <span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// the regexp as a string</span>
  <span class="token keyword">let</span> pattern <span class="token operator">=</span> options<span class="token punctuation">.</span>start <span class="token operator">?</span> <span class="token string">&#39;^&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// extracted keys</span>
  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> segment <span class="token keyword">of</span> segments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// the root segment needs special treatment</span>
    <span class="token keyword">const</span> segmentScores <span class="token operator">=</span> segment<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">90</span> <span class="token comment">/* Root */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// allow trailing slash</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>segment<span class="token punctuation">.</span>length<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> tokenIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> tokenIndex <span class="token operator">&lt;</span> segment<span class="token punctuation">.</span>length<span class="token punctuation">;</span> tokenIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> token <span class="token operator">=</span> segment<span class="token punctuation">[</span>tokenIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// resets the score if we are inside a sub segment /:a-other-:b</span>
      <span class="token keyword">let</span> subSegmentScore <span class="token operator">=</span>
        <span class="token number">40</span> <span class="token comment">/* Segment */</span> <span class="token operator">+</span>
        <span class="token punctuation">(</span>options<span class="token punctuation">.</span>sensitive <span class="token operator">?</span> <span class="token number">0.25</span> <span class="token comment">/* BonusCaseSensitive */</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// prepend the slash if we are starting a new segment</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenIndex<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
        pattern <span class="token operator">+=</span> token<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">REGEX_CHARS_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subSegmentScore <span class="token operator">+=</span> <span class="token number">40</span> <span class="token comment">/* Static */</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> repeatable<span class="token punctuation">,</span> optional<span class="token punctuation">,</span> regexp <span class="token punctuation">}</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>
        keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          name<span class="token operator">:</span> value<span class="token punctuation">,</span>
          repeatable<span class="token punctuation">,</span>
          optional<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> re <span class="token operator">=</span> regexp <span class="token operator">?</span> regexp <span class="token operator">:</span> <span class="token constant">BASE_PARAM_PATTERN</span><span class="token punctuation">;</span>
        <span class="token comment">// the user provided a custom regexp /:id(\\\\d+)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">!==</span> <span class="token constant">BASE_PARAM_PATTERN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          subSegmentScore <span class="token operator">+=</span> <span class="token number">10</span> <span class="token comment">/* BonusCustomRegExp */</span><span class="token punctuation">;</span>
          <span class="token comment">// make sure the regexp is valid before using it</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid custom RegExp for param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">): </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
                err<span class="token punctuation">.</span>message
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// when we repeat we must take care of the repeating leading slash</span>
        <span class="token keyword">let</span> subPattern <span class="token operator">=</span> repeatable <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)(?:/(?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">))*)</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>re<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token comment">// prepend the slash if we are starting a new segment</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenIndex<span class="token punctuation">)</span>
          subPattern <span class="token operator">=</span>
            <span class="token comment">// avoid an optional / if there are more segments e.g. /:p?-static</span>
            <span class="token comment">// or /:p?-:p2</span>
            optional <span class="token operator">&amp;&amp;</span> segment<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span>
              <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(?:/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>subPattern<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
              <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> subPattern<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> subPattern <span class="token operator">+=</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">;</span>
        pattern <span class="token operator">+=</span> subPattern<span class="token punctuation">;</span>
        subSegmentScore <span class="token operator">+=</span> <span class="token number">20</span> <span class="token comment">/* Dynamic */</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">8</span> <span class="token comment">/* BonusOptional */</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>repeatable<span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token comment">/* BonusRepeatable */</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">===</span> <span class="token string">&#39;.*&#39;</span><span class="token punctuation">)</span> subSegmentScore <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">50</span> <span class="token comment">/* BonusWildcard */</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      segmentScores<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subSegmentScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// an empty array like /home/ -&gt; [[{home}], []]</span>
    <span class="token comment">// if (!segment.length) pattern += &#39;/&#39;</span>
    score<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>segmentScores<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// only apply the strict bonus to the last score</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> i <span class="token operator">=</span> score<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">0.7000000000000001</span> <span class="token comment">/* BonusStrict */</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// TODO: dev only warn double trailing slash</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;/?&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> pattern <span class="token operator">+=</span> <span class="token string">&#39;(?:/|$)&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> options<span class="token punctuation">.</span>sensitive <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> match <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> match<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> value <span class="token operator">=</span> match<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      params<span class="token punctuation">[</span>key<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>repeatable <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> params<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">stringify</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// for optional parameters to allow to be empty</span>
    <span class="token keyword">let</span> avoidDuplicatedSlash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> segment <span class="token keyword">of</span> segments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>avoidDuplicatedSlash <span class="token operator">||</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> path <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
      avoidDuplicatedSlash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> token <span class="token keyword">of</span> segment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          path <span class="token operator">+=</span> token<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> repeatable<span class="token punctuation">,</span> optional <span class="token punctuation">}</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>
          <span class="token keyword">const</span> param <span class="token operator">=</span> value <span class="token keyword">in</span> params <span class="token operator">?</span> params<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>repeatable<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Provided param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is an array but it is not repeatable (* or + modifiers)</span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> text <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">?</span> param<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> param<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// if we have more than one optional param like /:a?-static we</span>
              <span class="token comment">// don&#39;t need to care about the optional param</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// remove the last slash as we could be at the end</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// do not append a slash on the next iteration</span>
                <span class="token keyword">else</span> avoidDuplicatedSlash <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Missing required param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          path <span class="token operator">+=</span> text<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> path<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    re<span class="token punctuation">,</span>
    score<span class="token punctuation">,</span>
    keys<span class="token punctuation">,</span>
    parse<span class="token punctuation">,</span>
    stringify<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Compares an array of numbers as used in PathParser.score and returns a
 * number. This function can be used to \`sort\` an array
 *
 * <span class="token keyword">@param</span> <span class="token parameter">a</span> - first array of numbers
 * <span class="token keyword">@param</span> <span class="token parameter">b</span> - second array of numbers
 * <span class="token keyword">@returns</span> 0 if both are equal, &lt; 0 if a should be sorted first, &gt; 0 if b
 * should be sorted first
 */</span>
<span class="token keyword">function</span> <span class="token function">compareScoreArray</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> diff <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// only keep going if diff === 0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token keyword">return</span> diff<span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// if the last subsegment was Static, the shorter segments should be sorted first</span>
  <span class="token comment">// otherwise sort the longest segment first</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">40</span> <span class="token comment">/* Static */</span> <span class="token operator">+</span> <span class="token number">40</span> <span class="token comment">/* Segment */</span>
      <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span>
      <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">40</span> <span class="token comment">/* Static */</span> <span class="token operator">+</span> <span class="token number">40</span> <span class="token comment">/* Segment */</span>
      <span class="token operator">?</span> <span class="token number">1</span>
      <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Compare function that can be used with \`sort\` to sort an array of PathParser
 *
 * <span class="token keyword">@param</span> <span class="token parameter">a</span> - first PathParser
 * <span class="token keyword">@param</span> <span class="token parameter">b</span> - second PathParser
 * <span class="token keyword">@returns</span> 0 if both are equal, &lt; 0 if a should be sorted first, &gt; 0 if b
 */</span>
<span class="token keyword">function</span> <span class="token function">comparePathParserScore</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> aScore <span class="token operator">=</span> a<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
  <span class="token keyword">const</span> bScore <span class="token operator">=</span> b<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> aScore<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> bScore<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> comp <span class="token operator">=</span> <span class="token function">compareScoreArray</span><span class="token punctuation">(</span>aScore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> bScore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// do not return if both are equal</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comp<span class="token punctuation">)</span> <span class="token keyword">return</span> comp<span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// if a and b share the same score entries but b has more, sort b first</span>
  <span class="token keyword">return</span> bScore<span class="token punctuation">.</span>length <span class="token operator">-</span> aScore<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token comment">// this is the ternary version</span>
  <span class="token comment">// return aScore.length &lt; bScore.length</span>
  <span class="token comment">//   ? 1</span>
  <span class="token comment">//   : aScore.length &gt; bScore.length</span>
  <span class="token comment">//   ? -1</span>
  <span class="token comment">//   : 0</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">ROOT_TOKEN</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">,</span>
  value<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">VALID_PARAM_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z0-9_]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// After some profiling, the cache seems to be unnecessary because tokenizePath</span>
<span class="token comment">// (the slowest part of adding a route) is very fast</span>
<span class="token comment">// const tokenCache = new Map&lt;string, Token[][]&gt;()</span>
<span class="token keyword">function</span> <span class="token function">tokenizePath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">ROOT_TOKEN</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Route paths should start with a &quot;/&quot;: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should be &quot;/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// if (tokenCache.has(path)) return tokenCache.get(path)!</span>
  <span class="token keyword">function</span> <span class="token function">crash</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ERR (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)/&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* Static */</span>
  <span class="token keyword">let</span> previousState <span class="token operator">=</span> state<span class="token punctuation">;</span>
  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// the segment will always be valid because we get into the initial state</span>
  <span class="token comment">// with the leading /</span>
  <span class="token keyword">let</span> segment<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">)</span> tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    segment <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// index on the path</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// char at index</span>
  <span class="token keyword">let</span> char<span class="token punctuation">;</span>
  <span class="token comment">// buffer of the value read</span>
  <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// custom regexp for a param</span>
  <span class="token keyword">let</span> customRe <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      segment<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> buffer<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
      state <span class="token operator">===</span> <span class="token number">1</span> <span class="token comment">/* Param */</span> <span class="token operator">||</span>
      state <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span> <span class="token operator">||</span>
      state <span class="token operator">===</span> <span class="token number">3</span> <span class="token comment">/* ParamRegExpEnd */</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">crash</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">A repeatable param (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) must be alone in its segment. eg: &#39;/:ids+.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      segment<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> buffer<span class="token punctuation">,</span>
        regexp<span class="token operator">:</span> customRe<span class="token punctuation">,</span>
        repeatable<span class="token operator">:</span> char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span>
        optional<span class="token operator">:</span> char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> char <span class="token operator">===</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">crash</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid state to consume buffer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    buffer <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buffer <span class="token operator">+=</span> char<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    char <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;\\\\&#39;</span> <span class="token operator">&amp;&amp;</span> state <span class="token operator">!==</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      previousState <span class="token operator">=</span> state<span class="token punctuation">;</span>
      state <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">/* EscapeNext */</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          state <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">4</span> <span class="token comment">/* EscapeNext */</span><span class="token operator">:</span>
        <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        state <span class="token operator">=</span> previousState<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">1</span> <span class="token comment">/* Param */</span><span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          state <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">VALID_PARAM_RE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">addCharToBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          state <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">;</span>
          <span class="token comment">// go back one character if we were not modifying</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">!==</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span><span class="token operator">:</span>
        <span class="token comment">// TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)</span>
        <span class="token comment">// it already works by escaping the closing )</span>
        <span class="token comment">// https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#</span>
        <span class="token comment">// is this really something people need since you can also write</span>
        <span class="token comment">// /prefix_:p()_suffix</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// handle the escaped )</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>customRe<span class="token punctuation">[</span>customRe<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">)</span>
            customRe <span class="token operator">=</span> customRe<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> char<span class="token punctuation">;</span>
          <span class="token keyword">else</span> state <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">/* ParamRegExpEnd */</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          customRe <span class="token operator">+=</span> char<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">3</span> <span class="token comment">/* ParamRegExpEnd */</span><span class="token operator">:</span>
        <span class="token comment">// same as finalizing a param</span>
        <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        state <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">/* Static */</span><span class="token punctuation">;</span>
        <span class="token comment">// go back one character if we were not modifying</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">!==</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">!==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>
        customRe <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">crash</span><span class="token punctuation">(</span><span class="token string">&#39;Unknown state&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">/* ParamRegExp */</span><span class="token punctuation">)</span>
    <span class="token function">crash</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unfinished custom RegExp for param &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>buffer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">consumeBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">finalizeSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// tokenCache.set(path, tokens)</span>
  <span class="token keyword">return</span> tokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">tokensToParser</span><span class="token punctuation">(</span><span class="token function">tokenizePath</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// warn against params with the same name</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">const</span> existingKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> parser<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>existingKeys<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found duplicated params with name &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; for path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Only the last one will be available on &quot;$route.params&quot;.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      existingKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> matcher <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    record<span class="token punctuation">,</span>
    parent<span class="token punctuation">,</span>
    <span class="token comment">// these needs to be populated by the parent</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// both are aliases or both are not aliases</span>
    <span class="token comment">// we don&#39;t want to mix them because the order is used when</span>
    <span class="token comment">// passing originalRecord in Matcher.addRoute</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf <span class="token operator">===</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf<span class="token punctuation">)</span>
      parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> matcher<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Creates a Router Matcher.
 *
 * <span class="token keyword">@internal</span>
 * <span class="token keyword">@param</span> <span class="token parameter">routes</span> - array of initial routes
 * <span class="token keyword">@param</span> <span class="token parameter">globalOptions</span> - global route options
 */</span>
<span class="token keyword">function</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> globalOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// normalized ordered array of matchers</span>
  <span class="token keyword">const</span> matchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> matcherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  globalOptions <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span> strict<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sensitive<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    globalOptions
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">getRecordMatcher</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> originalRecord</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// used later on to remove by name</span>
    <span class="token keyword">const</span> isRootAdd <span class="token operator">=</span> <span class="token operator">!</span>originalRecord<span class="token punctuation">;</span>
    <span class="token keyword">const</span> mainNormalizedRecord <span class="token operator">=</span> <span class="token function">normalizeRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// we might be the child of an alias</span>
    mainNormalizedRecord<span class="token punctuation">.</span>aliasOf <span class="token operator">=</span> originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>record<span class="token punctuation">;</span>
    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>globalOptions<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// generate an array of records to correctly handle aliases</span>
    <span class="token keyword">const</span> normalizedRecords <span class="token operator">=</span> <span class="token punctuation">[</span>mainNormalizedRecord<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;alias&#39;</span> <span class="token keyword">in</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> aliases <span class="token operator">=</span>
        <span class="token keyword">typeof</span> record<span class="token punctuation">.</span>alias <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> <span class="token punctuation">[</span>record<span class="token punctuation">.</span>alias<span class="token punctuation">]</span> <span class="token operator">:</span> record<span class="token punctuation">.</span>alias<span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> alias <span class="token keyword">of</span> aliases<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        normalizedRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
          <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mainNormalizedRecord<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token comment">// this allows us to hold a copy of the \`components\` option</span>
            <span class="token comment">// so that async components cache is hold on the original record</span>
            components<span class="token operator">:</span> originalRecord
              <span class="token operator">?</span> originalRecord<span class="token punctuation">.</span>record<span class="token punctuation">.</span>components
              <span class="token operator">:</span> mainNormalizedRecord<span class="token punctuation">.</span>components<span class="token punctuation">,</span>
            path<span class="token operator">:</span> alias<span class="token punctuation">,</span>
            <span class="token comment">// we might be the child of an alias</span>
            aliasOf<span class="token operator">:</span> originalRecord
              <span class="token operator">?</span> originalRecord<span class="token punctuation">.</span>record
              <span class="token operator">:</span> mainNormalizedRecord<span class="token punctuation">,</span>
            <span class="token comment">// the aliases are always of the same kind as the original since they</span>
            <span class="token comment">// are defined on the same record</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> matcher<span class="token punctuation">;</span>
    <span class="token keyword">let</span> originalMatcher<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> normalizedRecord <span class="token keyword">of</span> normalizedRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> normalizedRecord<span class="token punctuation">;</span>
      <span class="token comment">// Build up the path for nested routes if the child isn&#39;t an absolute</span>
      <span class="token comment">// route. Only add the / delimiter if the child path isn&#39;t empty and if the</span>
      <span class="token comment">// parent path doesn&#39;t have a trailing slash</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> parentPath <span class="token operator">=</span> parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
        <span class="token keyword">const</span> connectingSlash <span class="token operator">=</span>
          parentPath<span class="token punctuation">[</span>parentPath<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
        normalizedRecord<span class="token punctuation">.</span>path <span class="token operator">=</span>
          parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> connectingSlash <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>normalizedRecord<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
          <span class="token string">&#39;Catch all routes (&quot;*&quot;) must now be defined using a param with a custom regexp.\\n&#39;</span> <span class="token operator">+</span>
            <span class="token string">&#39;See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.&#39;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// create the object before hand so it can be passed to children</span>
      matcher <span class="token operator">=</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span>normalizedRecord<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
        <span class="token function">checkMissingParamsInAbsolutePath</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// if we are an alias we must tell the original record that we exist</span>
      <span class="token comment">// so we can be removed</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>originalRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        originalRecord<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">{</span>
          <span class="token function">checkSameParams</span><span class="token punctuation">(</span>originalRecord<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// otherwise, the first record is the original and others are aliases</span>
        originalMatcher <span class="token operator">=</span> originalMatcher <span class="token operator">||</span> matcher<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>originalMatcher <span class="token operator">!==</span> matcher<span class="token punctuation">)</span> originalMatcher<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// remove the route if named and only for the top record (avoid in nested calls)</span>
        <span class="token comment">// this works because the original record is the first one</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRootAdd <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">removeRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;children&#39;</span> <span class="token keyword">in</span> mainNormalizedRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> children <span class="token operator">=</span> mainNormalizedRecord<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">addRoute</span><span class="token punctuation">(</span>
            children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            matcher<span class="token punctuation">,</span>
            originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// if there was no original record, then the first one was not an alias and all</span>
      <span class="token comment">// other alias (if any) need to reference this record when adding children</span>
      originalRecord <span class="token operator">=</span> originalRecord <span class="token operator">||</span> matcher<span class="token punctuation">;</span>
      <span class="token comment">// TODO: add normalized records for more flexibility</span>
      <span class="token comment">// if (parent &amp;&amp; isAliasRecord(originalRecord)) {</span>
      <span class="token comment">//   parent.children.push(originalRecord)</span>
      <span class="token comment">// }</span>
      <span class="token function">insertMatcher</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> originalMatcher
      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// since other matchers are aliases, they should be removed by the original matcher</span>
          <span class="token function">removeRoute</span><span class="token punctuation">(</span>originalMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token operator">:</span> noop<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token parameter">matcherRef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRouteName</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> matcher <span class="token operator">=</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        matcherMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
        matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>matchers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        matcher<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>
        matcher<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> index <span class="token operator">=</span> matchers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcherRef<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span> matcherMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>matcherRef<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        matcherRef<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>
        matcherRef<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>removeRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> matchers<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">insertMatcher</span><span class="token punctuation">(</span><span class="token parameter">matcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(&#39;i is&#39;, { i })</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>
      i <span class="token operator">&lt;</span> matchers<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>
      <span class="token function">comparePathParserScore</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> matchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span>
    <span class="token punctuation">)</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(&#39;END i is&#39;, { i })</span>
    <span class="token comment">// while (i &lt; matchers.length &amp;&amp; matcher.score &lt;= matchers[i].score) i++</span>
    matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// only add the original record to the name map</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>
      matcherMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> currentLocation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> matcher<span class="token punctuation">;</span>
    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> path<span class="token punctuation">;</span>
    <span class="token keyword">let</span> name<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> location <span class="token operator">&amp;&amp;</span> location<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      matcher <span class="token operator">=</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          location<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
        <span class="token comment">// paramsFromLocation is a new object</span>
        <span class="token function">paramsFromLocation</span><span class="token punctuation">(</span>
          currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span>
          <span class="token comment">// only keep params that exist in the resolved location</span>
          <span class="token comment">// TODO: only keep optional params coming from a parent record</span>
          matcher<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>k<span class="token punctuation">.</span>optional<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> k<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        location<span class="token punctuation">.</span>params
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// throws if cannot be stringified</span>
      path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// no need to resolve the path with the matcher as it was provided</span>
      <span class="token comment">// this also allows the user to control the encoding</span>
      path <span class="token operator">=</span> location<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The Matcher cannot resolve relative paths but received &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Unless you directly called \\\`matcher.resolve(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)\\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      matcher <span class="token operator">=</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// matcher should have a value after the loop</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO: dev warning of unused params if provided</span>
        <span class="token comment">// we know the matcher works because we tested the regexp</span>
        params <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// location is a relative path</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// match by name or path of current route</span>
      matcher <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>name
        <span class="token operator">?</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token operator">:</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          location<span class="token punctuation">,</span>
          currentLocation<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token comment">// since we are navigating to the same location, we don&#39;t need to pick the</span>
      <span class="token comment">// params like when \`name\` is provided</span>
      params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> matched <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> parentMatcher <span class="token operator">=</span> matcher<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>parentMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// reversed order so parents are at the beginning</span>
      matched<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>parentMatcher<span class="token punctuation">.</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
      parentMatcher <span class="token operator">=</span> parentMatcher<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">,</span>
      path<span class="token punctuation">,</span>
      params<span class="token punctuation">,</span>
      matched<span class="token punctuation">,</span>
      meta<span class="token operator">:</span> <span class="token function">mergeMetaFields</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// add initial routes</span>
  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> addRoute<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> removeRoute<span class="token punctuation">,</span> getRoutes<span class="token punctuation">,</span> getRecordMatcher <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">paramsFromLocation</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> params<span class="token punctuation">)</span> newParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> newParams<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Normalizes a RouteRecordRaw. Creates a copy
 *
 * <span class="token keyword">@param</span> <span class="token parameter">record</span>
 * <span class="token keyword">@returns</span> the normalized version
 */</span>
<span class="token keyword">function</span> <span class="token function">normalizeRouteRecord</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    path<span class="token operator">:</span> record<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
    redirect<span class="token operator">:</span> record<span class="token punctuation">.</span>redirect<span class="token punctuation">,</span>
    name<span class="token operator">:</span> record<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    meta<span class="token operator">:</span> record<span class="token punctuation">.</span>meta <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    aliasOf<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    beforeEnter<span class="token operator">:</span> record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span>
    props<span class="token operator">:</span> <span class="token function">normalizeRecordProps</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> record<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    instances<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    leaveGuards<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    updateGuards<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    enterCallbacks<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span>
      <span class="token string">&#39;components&#39;</span> <span class="token keyword">in</span> record
        <span class="token operator">?</span> record<span class="token punctuation">.</span>components <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> record<span class="token punctuation">.</span>component <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Normalize the optional \`props\` in a record to always be an object similar to
 * components. Also accept a boolean for components.
 * <span class="token keyword">@param</span> <span class="token parameter">record</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">normalizeRecordProps</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> propsObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// props does not exist on redirect records but we can set false directly</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> record<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;component&#39;</span> <span class="token keyword">in</span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    propsObject<span class="token punctuation">.</span>default <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// NOTE: we could also allow a function to be applied to every component.</span>
    <span class="token comment">// Would need user feedback for use cases</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> record<span class="token punctuation">.</span>components<span class="token punctuation">)</span>
      propsObject<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> props <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span> <span class="token operator">?</span> props <span class="token operator">:</span> props<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> propsObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Checks if a record or any of its parent is an alias
 * <span class="token keyword">@param</span> <span class="token parameter">record</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">isAliasRecord</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    record <span class="token operator">=</span> record<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Merge meta fields of an array of records
 *
 * <span class="token keyword">@param</span> <span class="token parameter">matched</span> - array of matched records
 */</span>
<span class="token keyword">function</span> <span class="token function">mergeMetaFields</span><span class="token punctuation">(</span><span class="token parameter">matched</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> matched<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">meta<span class="token punctuation">,</span> record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">assign</span><span class="token punctuation">(</span>meta<span class="token punctuation">,</span> record<span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span><span class="token parameter">defaults<span class="token punctuation">,</span> partialOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> defaults<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> key <span class="token keyword">in</span> partialOptions <span class="token operator">?</span> partialOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> defaults<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> options<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isSameParam</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    a<span class="token punctuation">.</span>name <span class="token operator">===</span> b<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span>
    a<span class="token punctuation">.</span>optional <span class="token operator">===</span> b<span class="token punctuation">.</span>optional <span class="token operator">&amp;&amp;</span>
    a<span class="token punctuation">.</span>repeatable <span class="token operator">===</span> b<span class="token punctuation">.</span>repeatable
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Check if a path and its alias have the same required params
 *
 * <span class="token keyword">@param</span> <span class="token parameter">a</span> - original record
 * <span class="token keyword">@param</span> <span class="token parameter">b</span> - alias record
 */</span>
<span class="token keyword">function</span> <span class="token function">checkSameParams</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> a<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span>optional <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">isSameParam</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Alias &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; and the original record: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should have the exact same param named &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> b<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span>optional <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">isSameParam</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Alias &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>b<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; and the original record: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should have the exact same param named &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">checkMissingParamsInAbsolutePath</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> parent<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>record<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">isSameParam</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Absolute path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>record<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; should have the exact same param named &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; as its parent &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Encoding Rules \u2423 = Space Path: \u2423 &quot; &lt; &gt; # ? <span class="token punctuation">{</span> <span class="token punctuation">}</span> Query: \u2423 &quot; &lt; &gt; # &amp; = Hash: \u2423 &quot;
 * &lt; &gt; \`
 *
 * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)
 * defines some extra characters to be encoded. Most browsers do not encode them
 * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to
 * also encode \`!&#39;()*\`. Leaving unencoded only ASCII alphanumeric(\`a-zA-Z0-9\`)
 * plus \`-._~\`. This extra safety should be applied to query by patching the
 * string returned by encodeURIComponent encodeURI also encodes \`[\\]^\`. \`\\\`
 * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a \`\\\`
 * into a \`/\` if directly typed in. The _backtick_ (\`\`\`\`\`) should also be
 * encoded everywhere because some browsers like FF encode it when directly
 * written while others don&#39;t. Safari and IE don&#39;t encode \`\`&quot;&lt;&gt;<span class="token punctuation">{</span><span class="token punctuation">}</span>\`\`\` in hash.
 */</span>
<span class="token comment">// const EXTRA_RESERVED_RE = /[!&#39;()*]/g</span>
<span class="token comment">// const encodeReservedReplacer = (c: string) =&gt; &#39;%&#39; + c.charCodeAt(0).toString(16)</span>
<span class="token keyword">const</span> <span class="token constant">HASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %23</span>
<span class="token keyword">const</span> <span class="token constant">AMPERSAND_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %26</span>
<span class="token keyword">const</span> <span class="token constant">SLASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %2F</span>
<span class="token keyword">const</span> <span class="token constant">EQUAL_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %3D</span>
<span class="token keyword">const</span> <span class="token constant">IM_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %3F</span>
<span class="token keyword">const</span> <span class="token constant">PLUS_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// %2B</span>
<span class="token doc-comment comment">/**
 * NOTE: It&#39;s not clear to me if we should encode the + symbol in queries, it
 * seems to be less flexible than not doing so and I can&#39;t find out the legacy
 * systems requiring this for regular requests like text/html. In the standard,
 * the encoding of the plus character is only mentioned for
 * application/x-www-form-urlencoded
 * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo
 * leave the plus character as is in queries. To be more flexible, we allow the
 * plus character on the query but it can also be manually encoded by the user.
 *
 * Resources:
 * - https://url.spec.whatwg.org/#urlencoded-parsing
 * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20
 */</span>
<span class="token keyword">const</span> <span class="token constant">ENC_BRACKET_OPEN_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%5B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// [</span>
<span class="token keyword">const</span> <span class="token constant">ENC_BRACKET_CLOSE_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%5D</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// ]</span>
<span class="token keyword">const</span> <span class="token constant">ENC_CARET_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%5E</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// ^</span>
<span class="token keyword">const</span> <span class="token constant">ENC_BACKTICK_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%60</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// \`</span>
<span class="token keyword">const</span> <span class="token constant">ENC_CURLY_OPEN_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%7B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// {</span>
<span class="token keyword">const</span> <span class="token constant">ENC_PIPE_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%7C</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// |</span>
<span class="token keyword">const</span> <span class="token constant">ENC_CURLY_CLOSE_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%7D</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// }</span>
<span class="token keyword">const</span> <span class="token constant">ENC_SPACE_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%20</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// }</span>
<span class="token doc-comment comment">/**
 * Encode characters that need to be encoded on the path, search and hash
 * sections of the URL.
 *
 * <span class="token keyword">@internal</span>
 * <span class="token keyword">@param</span> <span class="token parameter">text</span> - string to encode
 * <span class="token keyword">@returns</span> encoded string
 */</span>
<span class="token keyword">function</span> <span class="token function">commonEncode</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> text<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_PIPE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_BRACKET_OPEN_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_BRACKET_CLOSE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Encode characters that need to be encoded on the hash section of the URL.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">text</span> - string to encode
 * <span class="token keyword">@returns</span> encoded string
 */</span>
<span class="token keyword">function</span> <span class="token function">encodeHash</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">commonEncode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CURLY_OPEN_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CURLY_CLOSE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CARET_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;^&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Encode characters that need to be encoded query values on the query
 * section of the URL.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">text</span> - string to encode
 * <span class="token keyword">@returns</span> encoded string
 */</span>
<span class="token keyword">function</span> <span class="token function">encodeQueryValue</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">commonEncode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
      <span class="token comment">// Encode the space as +, encode the + to differentiate it from the space</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">PLUS_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;%2B&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_SPACE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">HASH_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;%23&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">AMPERSAND_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;%26&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_BACKTICK_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;\`&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CURLY_OPEN_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CURLY_CLOSE_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">ENC_CARET_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;^&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Like \`encodeQueryValue</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> but also encodes the </span><span class="token template-punctuation string">\`</span></span><span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> character.
 *
 * @param text - string to encode
 */
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, &#39;%3D&#39;);
}
/**
 * Encode characters that need to be encoded on the path section of the URL.
 *
 * @param text - string to encode
 * @returns encoded string
 */
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, &#39;%23&#39;).replace(IM_RE, &#39;%3F&#39;);
}
/**
 * Encode characters that need to be encoded on the path section of the URL as a
 * param. This function encodes everything {@link encodePath} does plus the
 * slash (</span><span class="token template-punctuation string">\`</span></span><span class="token operator">/</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">) character. If </span><span class="token template-punctuation string">\`</span></span>text<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> is </span><span class="token template-punctuation string">\`</span></span><span class="token keyword">null</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> or </span><span class="token template-punctuation string">\`</span></span><span class="token keyword">undefined</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">, returns an empty
 * string instead.
 *
 * @param text - string to encode
 * @returns encoded string
 */
function encodeParam(text) {
  return text == null ? &#39;&#39; : encodePath(text).replace(SLASH_RE, &#39;%2F&#39;);
}
/**
 * Decode text using </span><span class="token template-punctuation string">\`</span></span>decodeURIComponent<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">. Returns the original text if it
 * fails.
 *
 * @param text - string to decode
 * @returns decoded string
 */
function decode(text) {
  try {
    return decodeURIComponent(&#39;&#39; + text);
  } catch (err) {
    warn(</span><span class="token template-punctuation string">\`</span></span>Error decoding <span class="token string">&quot;\${text}&quot;</span><span class="token punctuation">.</span> Using original value<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">);
  }
  return &#39;&#39; + text;
}

/**
 * Transforms a queryString into a {@link LocationQuery} object. Accept both, a
 * version with the leading </span><span class="token template-punctuation string">\`</span></span><span class="token operator">?</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> and without Should work as URLSearchParams

 * @internal
 *
 * @param search - search string to parse
 * @returns a query object
 */
function parseQuery(search) {
  const query = {};
  // avoid creating an object with an empty key and empty value
  // because of split(&#39;&amp;&#39;)
  if (search === &#39;&#39; || search === &#39;?&#39;) return query;
  const hasLeadingIM = search[0] === &#39;?&#39;;
  const searchParams = (hasLeadingIM ? search.slice(1) : search).split(&#39;&amp;&#39;);
  for (let i = 0; i &lt; searchParams.length; ++i) {
    // pre decode the + into space
    const searchParam = searchParams[i].replace(PLUS_RE, &#39; &#39;);
    // allow the = character
    const eqPos = searchParam.indexOf(&#39;=&#39;);
    const key = decode(eqPos &lt; 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos &lt; 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      // an extra variable for ts types
      let currentValue = query[key];
      if (!Array.isArray(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
/**
 * Stringifies a {@link LocationQueryRaw} object. Like </span><span class="token template-punctuation string">\`</span></span>URLSearchParams<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">, it
 * doesn&#39;t prepend a </span><span class="token template-punctuation string">\`</span></span><span class="token operator">?</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
 *
 * @internal
 *
 * @param query - query object to stringify
 * @returns string version of the query without the leading </span><span class="token template-punctuation string">\`</span></span><span class="token operator">?</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
 */
function stringifyQuery(query) {
  let search = &#39;&#39;;
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey(key);
    if (value == null) {
      // only null adds the value
      if (value !== undefined) {
        search += (search.length ? &#39;&amp;&#39; : &#39;&#39;) + key;
      }
      continue;
    }
    // keep null values
    const values = Array.isArray(value)
      ? value.map((v) =&gt; v &amp;&amp; encodeQueryValue(v))
      : [value &amp;&amp; encodeQueryValue(value)];
    values.forEach((value) =&gt; {
      // skip undefined values in arrays as if they were not present
      // smaller code than using filter
      if (value !== undefined) {
        // only append &amp; with non-empty search
        search += (search.length ? &#39;&amp;&#39; : &#39;&#39;) + key;
        if (value != null) search += &#39;=&#39; + value;
      }
    });
  }
  return search;
}
/**
 * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting
 * numbers into strings, removing keys with an undefined value and replacing
 * undefined with null in arrays
 *
 * @param query - query object to normalize
 * @returns a normalized query object
 */
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== undefined) {
      normalizedQuery[key] = Array.isArray(value)
        ? value.map((v) =&gt; (v == null ? null : &#39;&#39; + v))
        : value == null
        ? value
        : &#39;&#39; + value;
    }
  }
  return normalizedQuery;
}

/**
 * Create a list of callbacks that can be reset. Used to create before and after navigation guards list
 */
function useCallbacks() {
  let handlers = [];
  function add(handler) {
    handlers.push(handler);
    return () =&gt; {
      const i = handlers.indexOf(handler);
      if (i &gt; -1) handlers.splice(i, 1);
    };
  }
  function reset() {
    handlers = [];
  }
  return {
    add,
    list: () =&gt; handlers,
    reset,
  };
}

function registerGuard(record, name, guard) {
  const removeFromList = () =&gt; {
    record[name].delete(guard);
  };
  onUnmounted(removeFromList);
  onDeactivated(removeFromList);
  onActivated(() =&gt; {
    record[name].add(guard);
  });
  record[name].add(guard);
}
/**
 * Add a navigation guard that triggers whenever the component for the current
 * location is about to be left. Similar to {@link beforeRouteLeave} but can be
 * used in any component. The guard is removed when the component is unmounted.
 *
 * @param leaveGuard - {@link NavigationGuard}
 */
function onBeforeRouteLeave(leaveGuard) {
  if (!getCurrentInstance()) {
    warn(
      &#39;getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function&#39;
    );
    return;
  }
  const activeRecord = inject(
    matchedRouteKey,
    // to avoid warning
    {}
  ).value;
  if (!activeRecord) {
    warn(
      &#39;No active route record was found when calling </span><span class="token template-punctuation string">\`</span></span><span class="token function">onBeforeRouteLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">. Make sure you call this function inside of a component child of &lt;router-view&gt;. Maybe you called it inside of App.vue?&#39;
    );
    return;
  }
  registerGuard(activeRecord, &#39;leaveGuards&#39;, leaveGuard);
}
/**
 * Add a navigation guard that triggers whenever the current location is about
 * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any
 * component. The guard is removed when the component is unmounted.
 *
 * @param updateGuard - {@link NavigationGuard}
 */
function onBeforeRouteUpdate(updateGuard) {
  if (!getCurrentInstance()) {
    warn(
      &#39;getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function&#39;
    );
    return;
  }
  const activeRecord = inject(
    matchedRouteKey,
    // to avoid warning
    {}
  ).value;
  if (!activeRecord) {
    warn(
      &#39;No active route record was found when calling </span><span class="token template-punctuation string">\`</span></span><span class="token function">onBeforeRouteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">. Make sure you call this function inside of a component child of &lt;router-view&gt;. Maybe you called it inside of App.vue?&#39;
    );
    return;
  }
  registerGuard(activeRecord, &#39;updateGuards&#39;, updateGuard);
}
function guardToPromiseFn(guard, to, from, record, name) {
  // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place
  const enterCallbackArray =
    record &amp;&amp;
    // name is defined if record is because of the function overload
    (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () =&gt;
    new Promise((resolve, reject) =&gt; {
      const next = (valid) =&gt; {
        if (valid === false)
          reject(
            createRouterError(4 /* NAVIGATION_ABORTED */, {
              from,
              to,
            })
          );
        else if (valid instanceof Error) {
          reject(valid);
        } else if (isRouteLocation(valid)) {
          reject(
            createRouterError(2 /* NAVIGATION_GUARD_REDIRECT */, {
              from: to,
              to: valid,
            })
          );
        } else {
          if (
            enterCallbackArray &amp;&amp;
            // since enterCallbackArray is truthy, both record and name also are
            record.enterCallbacks[name] === enterCallbackArray &amp;&amp;
            typeof valid === &#39;function&#39;
          )
            enterCallbackArray.push(valid);
          resolve();
        }
      };
      // wrapping with Promise.resolve allows it to work with both async and sync guards
      const guardReturn = guard.call(
        record &amp;&amp; record.instances[name],
        to,
        from,
        canOnlyBeCalledOnce(next, to, from)
      );
      let guardCall = Promise.resolve(guardReturn);
      if (guard.length &lt; 3) guardCall = guardCall.then(next);
      if (guard.length &gt; 2) {
        const message = </span><span class="token template-punctuation string">\`</span></span>The <span class="token string">&quot;next&quot;</span> callback was never called inside <span class="token keyword">of</span> $<span class="token punctuation">{</span>
          guard<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">+</span> guard<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span><span class="token operator">:</span>\\n$<span class="token punctuation">{</span>guard<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\\n<span class="token punctuation">.</span> If you are returning a value instead <span class="token keyword">of</span> calling <span class="token string">&quot;next&quot;</span><span class="token punctuation">,</span> make sure to remove the <span class="token string">&quot;next&quot;</span> parameter from your <span class="token keyword">function</span><span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">;
        if (typeof guardReturn === &#39;object&#39; &amp;&amp; &#39;then&#39; in guardReturn) {
          guardCall = guardCall.then((resolvedValue) =&gt; {
            // @ts-expect-error: _called is added at canOnlyBeCalledOnce
            if (!next._called) {
              warn(message);
              return Promise.reject(new Error(&#39;Invalid navigation guard&#39;));
            }
            return resolvedValue;
          });
          // TODO: test me!
        } else if (guardReturn !== undefined) {
          // @ts-expect-error: _called is added at canOnlyBeCalledOnce
          if (!next._called) {
            warn(message);
            reject(new Error(&#39;Invalid navigation guard&#39;));
            return;
          }
        }
      }
      guardCall.catch((err) =&gt; reject(err));
    });
}
function canOnlyBeCalledOnce(next, to, from) {
  let called = 0;
  return function () {
    if (called++ === 1)
      warn(
        </span><span class="token template-punctuation string">\`</span></span>The <span class="token string">&quot;next&quot;</span> callback was called more than once <span class="token keyword">in</span> one navigation guard when going <span class="token keyword">from</span> <span class="token string">&quot;\${from.fullPath}&quot;</span> to <span class="token string">&quot;\${to.fullPath}&quot;</span><span class="token punctuation">.</span> It should be called exactly one time <span class="token keyword">in</span> each navigation guard<span class="token punctuation">.</span> This will fail <span class="token keyword">in</span> production<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      );
    // @ts-expect-error: we put it in the original one because it&#39;s easier to check
    next._called = true;
    if (called === 1) next.apply(null, arguments);
  };
}
function extractComponentsGuards(matched, guardType, to, from) {
  const guards = [];
  for (const record of matched) {
    for (const name in record.components) {
      let rawComponent = record.components[name];
      {
        if (
          !rawComponent ||
          (typeof rawComponent !== &#39;object&#39; &amp;&amp;
            typeof rawComponent !== &#39;function&#39;)
        ) {
          warn(
            </span><span class="token template-punctuation string">\`</span></span>Component <span class="token string">&quot;\${name}&quot;</span> <span class="token keyword">in</span> record <span class="token keyword">with</span> path <span class="token string">&quot;\${record.path}&quot;</span> is not<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
              </span><span class="token template-punctuation string">\`</span></span> a valid component<span class="token punctuation">.</span> Received <span class="token string">&quot;\${String(rawComponent)}&quot;</span><span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          );
          // throw to ensure we stop here but warn to ensure the message isn&#39;t
          // missed by the user
          throw new Error(&#39;Invalid route component&#39;);
        } else if (&#39;then&#39; in rawComponent) {
          // warn if user wrote import(&#39;/component.vue&#39;) instead of () =&gt;
          // import(&#39;./component.vue&#39;)
          warn(
            </span><span class="token template-punctuation string">\`</span></span>Component <span class="token string">&quot;\${name}&quot;</span> <span class="token keyword">in</span> record <span class="token keyword">with</span> path <span class="token string">&quot;\${record.path}&quot;</span> is a <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
              </span><span class="token template-punctuation string">\`</span></span>Promise instead <span class="token keyword">of</span> a <span class="token keyword">function</span> that returns a Promise<span class="token punctuation">.</span> Did you <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
              </span><span class="token template-punctuation string">\`</span></span>write <span class="token string">&quot;import(&#39;./MyPage.vue&#39;)&quot;</span> instead <span class="token keyword">of</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
              </span><span class="token template-punctuation string">\`</span></span><span class="token string">&quot;() =&gt; import(&#39;./MyPage.vue&#39;)&quot;</span> <span class="token operator">?</span> This will <span class="token keyword">break</span> <span class="token keyword">in</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
              </span><span class="token template-punctuation string">\`</span></span>production <span class="token keyword">if</span> not fixed<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          );
          const promise = rawComponent;
          rawComponent = () =&gt; promise;
        } else if (
          rawComponent.__asyncLoader &amp;&amp;
          // warn only once per component
          !rawComponent.__warnedDefineAsync
        ) {
          rawComponent.__warnedDefineAsync = true;
          warn(
            </span><span class="token template-punctuation string">\`</span></span>Component <span class="token string">&quot;\${name}&quot;</span> <span class="token keyword">in</span> record <span class="token keyword">with</span> path <span class="token string">&quot;\${record.path}&quot;</span> is defined <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
              </span><span class="token template-punctuation string">\`</span></span>using <span class="token string">&quot;defineAsyncComponent()&quot;</span><span class="token punctuation">.</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
              </span><span class="token template-punctuation string">\`</span></span>Write <span class="token string">&quot;() =&gt; import(&#39;./MyPage.vue&#39;)&quot;</span> instead <span class="token keyword">of</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
              </span><span class="token template-punctuation string">\`</span></span><span class="token string">&quot;defineAsyncComponent(() =&gt; import(&#39;./MyPage.vue&#39;))&quot;</span><span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          );
        }
      }
      // skip update and leave guards if the route component is not mounted
      if (guardType !== &#39;beforeRouteEnter&#39; &amp;&amp; !record.instances[name]) continue;
      if (isRouteComponent(rawComponent)) {
        // __vccOpts is added by vue-class-component and contain the regular options
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard &amp;&amp; guards.push(guardToPromiseFn(guard, to, from, record, name));
      } else {
        // start requesting the chunk already
        let componentPromise = rawComponent();
        if (!(&#39;catch&#39; in componentPromise)) {
          warn(
            </span><span class="token template-punctuation string">\`</span></span>Component <span class="token string">&quot;\${name}&quot;</span> <span class="token keyword">in</span> record <span class="token keyword">with</span> path <span class="token string">&quot;\${record.path}&quot;</span> is a <span class="token keyword">function</span> that does not <span class="token keyword">return</span> a Promise<span class="token punctuation">.</span> If you were passing a functional component<span class="token punctuation">,</span> make sure to add a <span class="token string">&quot;displayName&quot;</span> to the component<span class="token punctuation">.</span> This will <span class="token keyword">break</span> <span class="token keyword">in</span> production <span class="token keyword">if</span> not fixed<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          );
          componentPromise = Promise.resolve(componentPromise);
        }
        guards.push(() =&gt;
          componentPromise.then((resolved) =&gt; {
            if (!resolved)
              return Promise.reject(
                new Error(
                  </span><span class="token template-punctuation string">\`</span></span>Couldn&#39;t resolve component <span class="token string">&quot;\${name}&quot;</span> at <span class="token string">&quot;\${record.path}&quot;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
                )
              );
            const resolvedComponent = isESModule(resolved)
              ? resolved.default
              : resolved;
            // replace the function with the resolved component
            record.components[name] = resolvedComponent;
            // __vccOpts is added by vue-class-component and contain the regular options
            const options = resolvedComponent.__vccOpts || resolvedComponent;
            const guard = options[guardType];
            return guard &amp;&amp; guardToPromiseFn(guard, to, from, record, name)();
          })
        );
      }
    }
  }
  return guards;
}
/**
 * Allows differentiating lazy components from functional components and vue-class-component
 *
 * @param component
 */
function isRouteComponent(component) {
  return (
    typeof component === &#39;object&#39; ||
    &#39;displayName&#39; in component ||
    &#39;props&#39; in component ||
    &#39;__vccOpts&#39; in component
  );
}

// TODO: we could allow currentRoute as a prop to expose </span><span class="token template-punctuation string">\`</span></span>isActive<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> and
// </span><span class="token template-punctuation string">\`</span></span>isExactActive<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> behavior should go through an RFC
function useLink(props) {
  const router = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() =&gt; router.resolve(unref(props.to)));
  const activeRecordIndex = computed(() =&gt; {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length) return -1;
    const index = currentMatched.findIndex(
      isSameRouteRecord.bind(null, routeMatched)
    );
    if (index &gt; -1) return index;
    // possible parent record
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length &gt; 1 &amp;&amp;
        // if the parent and matched route have the same path, this link is
        // referring to the empty child. Or we currently are on a different
        // child of the same parent
        getOriginalPath(routeMatched) === parentRecordPath &amp;&amp;
        // avoid comparing the child with its parent
        currentMatched[currentMatched.length - 1].path !== parentRecordPath
        ? currentMatched.findIndex(
            isSameRouteRecord.bind(null, matched[length - 2])
          )
        : index
    );
  });
  const isActive = computed(
    () =&gt;
      activeRecordIndex.value &gt; -1 &amp;&amp;
      includesParams(currentRoute.params, route.value.params)
  );
  const isExactActive = computed(
    () =&gt;
      activeRecordIndex.value &gt; -1 &amp;&amp;
      activeRecordIndex.value === currentRoute.matched.length - 1 &amp;&amp;
      isSameRouteLocationParams(currentRoute.params, route.value.params)
  );
  function navigate(e = {}) {
    if (guardEvent(e)) {
      return router[unref(props.replace) ? &#39;replace&#39; : &#39;push&#39;](
        unref(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop);
    }
    return Promise.resolve();
  }
  // devtools only
  if (isBrowser) {
    const instance = getCurrentInstance();
    if (instance) {
      const linkContextDevtools = {
        route: route.value,
        isActive: isActive.value,
        isExactActive: isExactActive.value,
      };
      // @ts-expect-error: this is internal
      instance.__vrl_devtools = instance.__vrl_devtools || [];
      // @ts-expect-error: this is internal
      instance.__vrl_devtools.push(linkContextDevtools);
      watchEffect(
        () =&gt; {
          linkContextDevtools.route = route.value;
          linkContextDevtools.isActive = isActive.value;
          linkContextDevtools.isExactActive = isExactActive.value;
        },
        { flush: &#39;post&#39; }
      );
    }
  }
  return {
    route,
    href: computed(() =&gt; route.value.href),
    isActive,
    isExactActive,
    navigate,
  };
}
const RouterLinkImpl = /*#__PURE__*/ defineComponent({
  name: &#39;RouterLink&#39;,
  props: {
    to: {
      type: [String, Object],
      required: true,
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: &#39;page&#39;,
    },
  },
  useLink,
  setup(props, { slots }) {
    const link = reactive(useLink(props));
    const { options } = inject(routerKey);
    const elClass = computed(() =&gt; ({
      [getLinkClass(
        props.activeClass,
        options.linkActiveClass,
        &#39;router-link-active&#39;
      )]: link.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   &#39;router-link-inactive&#39;
      // )]: !link.isExactActive,
      [getLinkClass(
        props.exactActiveClass,
        options.linkExactActiveClass,
        &#39;router-link-exact-active&#39;
      )]: link.isExactActive,
    }));
    return () =&gt; {
      const children = slots.default &amp;&amp; slots.default(link);
      return props.custom
        ? children
        : h(
            &#39;a&#39;,
            {
              &#39;aria-current&#39;: link.isExactActive
                ? props.ariaCurrentValue
                : null,
              href: link.href,
              // this would override user added attrs but Vue will still add
              // the listener so we end up triggering both
              onClick: link.navigate,
              class: elClass.value,
            },
            children
          );
    };
  },
});
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
/**
 * Component to render a link that triggers a navigation on click.
 */
const RouterLink = RouterLinkImpl;
function guardEvent(e) {
  // don&#39;t redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return;
  // don&#39;t redirect when preventDefault called
  if (e.defaultPrevented) return;
  // don&#39;t redirect on right click
  if (e.button !== undefined &amp;&amp; e.button !== 0) return;
  // don&#39;t redirect if </span><span class="token template-punctuation string">\`</span></span>target<span class="token operator">=</span><span class="token string">&quot;_blank&quot;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  // @ts-expect-error getAttribute does exist
  if (e.currentTarget &amp;&amp; e.currentTarget.getAttribute) {
    // @ts-expect-error getAttribute exists
    const target = e.currentTarget.getAttribute(&#39;target&#39;);
    if (/\\b_blank\\b/i.test(target)) return;
  }
  // this may be a Weex event which doesn&#39;t have this method
  if (e.preventDefault) e.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === &#39;string&#39;) {
      if (innerValue !== outerValue) return false;
    } else {
      if (
        !Array.isArray(outerValue) ||
        outerValue.length !== innerValue.length ||
        innerValue.some((value, i) =&gt; value !== outerValue[i])
      )
        return false;
    }
  }
  return true;
}
/**
 * Get the original path value of a record by following its aliasOf
 * @param record
 */
function getOriginalPath(record) {
  return record ? (record.aliasOf ? record.aliasOf.path : record.path) : &#39;&#39;;
}
/**
 * Utility class to get the active class based on defaults.
 * @param propClass
 * @param globalClass
 * @param defaultClass
 */
const getLinkClass = (propClass, globalClass, defaultClass) =&gt;
  propClass != null
    ? propClass
    : globalClass != null
    ? globalClass
    : defaultClass;

const RouterViewImpl = /*#__PURE__*/ defineComponent({
  name: &#39;RouterView&#39;,
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: &#39;default&#39;,
    },
    route: Object,
  },
  setup(props, { attrs, slots }) {
    warnDeprecatedUsage();
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() =&gt; props.route || injectedRoute.value);
    const depth = inject(viewDepthKey, 0);
    const matchedRouteRef = computed(() =&gt; routeToDisplay.value.matched[depth]);
    provide(viewDepthKey, depth + 1);
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    // watch at the same time the component instance, the route record we are
    // rendering, and the name
    watch(
      () =&gt; [viewRef.value, matchedRouteRef.value, props.name],
      ([instance, to, name], [oldInstance, from, oldName]) =&gt; {
        // copy reused instances
        if (to) {
          // this will update the instance for new instances as well as reused
          // instances when navigating to a new route
          to.instances[name] = instance;
          // the component instance is reused for a different route or name so
          // we copy any saved update or leave guards. With async setup, the
          // mounting component will mount before the matchedRoute changes,
          // making instance === oldInstance, so we check if guards have been
          // added before. This works because we remove guards when
          // unmounting/deactivating components
          if (from &amp;&amp; from !== to &amp;&amp; instance &amp;&amp; instance === oldInstance) {
            if (!to.leaveGuards.size) {
              to.leaveGuards = from.leaveGuards;
            }
            if (!to.updateGuards.size) {
              to.updateGuards = from.updateGuards;
            }
          }
        }
        // trigger beforeRouteEnter next callbacks
        if (
          instance &amp;&amp;
          to &amp;&amp;
          // if there is no instance but to and from are the same this might be
          // the first visit
          (!from || !isSameRouteRecord(to, from) || !oldInstance)
        ) {
          (to.enterCallbacks[name] || []).forEach((callback) =&gt;
            callback(instance)
          );
        }
      },
      { flush: &#39;post&#39; }
    );
    return () =&gt; {
      const route = routeToDisplay.value;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute &amp;&amp; matchedRoute.components[props.name];
      // we need the value at the time we render because when we unmount, we
      // navigated to a different location so the value is different
      const currentName = props.name;
      if (!ViewComponent) {
        return normalizeSlot(slots.default, {
          Component: ViewComponent,
          route,
        });
      }
      // props from route configuration
      const routePropsOption = matchedRoute.props[props.name];
      const routeProps = routePropsOption
        ? routePropsOption === true
          ? route.params
          : typeof routePropsOption === &#39;function&#39;
          ? routePropsOption(route)
          : routePropsOption
        : null;
      const onVnodeUnmounted = (vnode) =&gt; {
        // remove the instance reference to prevent leak
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h(
        ViewComponent,
        assign({}, routeProps, attrs, {
          onVnodeUnmounted,
          ref: viewRef,
        })
      );
      if (isBrowser &amp;&amp; component.ref) {
        // TODO: can display if it&#39;s an alias, its props
        const info = {
          depth,
          name: matchedRoute.name,
          path: matchedRoute.path,
          meta: matchedRoute.meta,
        };
        const internalInstances = Array.isArray(component.ref)
          ? component.ref.map((r) =&gt; r.i)
          : [component.ref.i];
        internalInstances.forEach((instance) =&gt; {
          // @ts-expect-error
          instance.__vrv_devtools = info;
        });
      }
      return (
        // pass the vnode to the slot as a prop.
        // h and &lt;component :is=&quot;...&quot;&gt; both accept vnodes
        normalizeSlot(slots.default, { Component: component, route }) ||
        component
      );
    };
  },
});
function normalizeSlot(slot, data) {
  if (!slot) return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
/**
 * Component to display the current route the user is at.
 */
const RouterView = RouterViewImpl;
// warn against deprecated usage with &lt;transition&gt; &amp; &lt;keep-alive&gt;
// due to functional component being no longer eager in Vue 3
function warnDeprecatedUsage() {
  const instance = getCurrentInstance();
  const parentName = instance.parent &amp;&amp; instance.parent.type.name;
  if (
    parentName &amp;&amp;
    (parentName === &#39;KeepAlive&#39; || parentName.includes(&#39;Transition&#39;))
  ) {
    const comp = parentName === &#39;KeepAlive&#39; ? &#39;keep-alive&#39; : &#39;transition&#39;;
    warn(
      </span><span class="token template-punctuation string">\`</span></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span> can no longer be used directly inside <span class="token operator">&lt;</span>transition<span class="token operator">&gt;</span> or <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span><span class="token punctuation">.</span>\\n<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
        </span><span class="token template-punctuation string">\`</span></span>Use slot props instead<span class="token operator">:</span>\\n\\n<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
        </span><span class="token template-punctuation string">\`</span></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">&quot;{ Component }&quot;</span><span class="token operator">&gt;</span>\\n<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
        </span><span class="token template-punctuation string">\`</span></span>  <span class="token operator">&lt;</span>$<span class="token punctuation">{</span>comp<span class="token punctuation">}</span><span class="token operator">&gt;</span>\\n<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
        </span><span class="token template-punctuation string">\`</span></span>    <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">&quot;Component&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\\n<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
        </span><span class="token template-punctuation string">\`</span></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>$<span class="token punctuation">{</span>comp<span class="token punctuation">}</span><span class="token operator">&gt;</span>\\n<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> +
        </span><span class="token template-punctuation string">\`</span></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    );
  }
}

function formatRouteLocation(routeLocation, tooltip) {
  const copy = assign({}, routeLocation, {
    // remove variables that can contain vue instances
    matched: routeLocation.matched.map((matched) =&gt;
      omit(matched, [&#39;instances&#39;, &#39;children&#39;, &#39;aliasOf&#39;])
    ),
  });
  return {
    _custom: {
      type: null,
      readOnly: true,
      display: routeLocation.fullPath,
      tooltip,
      value: copy,
    },
  };
}
function formatDisplay(display) {
  return {
    _custom: {
      display,
    },
  };
}
// to support multiple router instances
let routerId = 0;
function addDevtools(app, router, matcher) {
  // Take over router.beforeEach and afterEach
  // make sure we are not registering the devtool twice
  if (router.__hasDevtools) return;
  router.__hasDevtools = true;
  // increment to support multiple router instances
  const id = routerId++;
  setupDevtoolsPlugin(
    {
      id: &#39;org.vuejs.router&#39; + (id ? &#39;.&#39; + id : &#39;&#39;),
      label: &#39;Vue Router&#39;,
      packageName: &#39;vue-router&#39;,
      homepage: &#39;https://next.router.vuejs.org/&#39;,
      logo: &#39;https://vuejs.org/images/icons/favicon-96x96.png&#39;,
      componentStateTypes: [&#39;Routing&#39;],
      app,
    },
    (api) =&gt; {
      // display state added by the router
      api.on.inspectComponent((payload, ctx) =&gt; {
        if (payload.instanceData) {
          payload.instanceData.state.push({
            type: &#39;Routing&#39;,
            key: &#39;$route&#39;,
            editable: false,
            value: formatRouteLocation(
              router.currentRoute.value,
              &#39;Current Route&#39;
            ),
          });
        }
      });
      // mark router-link as active and display tags on router views
      api.on.visitComponentTree(({ treeNode: node, componentInstance }) =&gt; {
        if (componentInstance.__vrv_devtools) {
          const info = componentInstance.__vrv_devtools;
          node.tags.push({
            label: (info.name ? </span><span class="token template-punctuation string">\`</span></span>$<span class="token punctuation">{</span>info<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> : &#39;&#39;) + info.path,
            textColor: 0,
            tooltip: &#39;This component is rendered by &amp;lt;router-view&amp;gt;&#39;,
            backgroundColor: PINK_500,
          });
        }
        // if multiple useLink are used
        if (Array.isArray(componentInstance.__vrl_devtools)) {
          componentInstance.__devtoolsApi = api;
          componentInstance.__vrl_devtools.forEach((devtoolsData) =&gt; {
            let backgroundColor = ORANGE_400;
            let tooltip = &#39;&#39;;
            if (devtoolsData.isExactActive) {
              backgroundColor = LIME_500;
              tooltip = &#39;This is exactly active&#39;;
            } else if (devtoolsData.isActive) {
              backgroundColor = BLUE_600;
              tooltip = &#39;This link is active&#39;;
            }
            node.tags.push({
              label: devtoolsData.route.path,
              textColor: 0,
              tooltip,
              backgroundColor,
            });
          });
        }
      });
      watch(router.currentRoute, () =&gt; {
        // refresh active state
        refreshRoutesView();
        api.notifyComponentUpdate();
        api.sendInspectorTree(routerInspectorId);
        api.sendInspectorState(routerInspectorId);
      });
      const navigationsLayerId = &#39;router:navigations:&#39; + id;
      api.addTimelineLayer({
        id: navigationsLayerId,
        label: </span><span class="token template-punctuation string">\`</span></span>Router$<span class="token punctuation">{</span>id <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> id <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span> Navigations<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">,
        color: 0x40a8c4,
      });
      // const errorsLayerId = &#39;router:errors&#39;
      // api.addTimelineLayer({
      //   id: errorsLayerId,
      //   label: &#39;Router Errors&#39;,
      //   color: 0xea5455,
      // })
      router.onError((error, to) =&gt; {
        api.addTimelineEvent({
          layerId: navigationsLayerId,
          event: {
            title: &#39;Error during Navigation&#39;,
            subtitle: to.fullPath,
            logType: &#39;error&#39;,
            time: Date.now(),
            data: { error },
            groupId: to.meta.__navigationId,
          },
        });
      });
      // attached to </span><span class="token template-punctuation string">\`</span></span>meta<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> and used to group events
      let navigationId = 0;
      router.beforeEach((to, from) =&gt; {
        const data = {
          guard: formatDisplay(&#39;beforeEach&#39;),
          from: formatRouteLocation(
            from,
            &#39;Current Location during this navigation&#39;
          ),
          to: formatRouteLocation(to, &#39;Target location&#39;),
        };
        // Used to group navigations together, hide from devtools
        Object.defineProperty(to.meta, &#39;__navigationId&#39;, {
          value: navigationId++,
        });
        api.addTimelineEvent({
          layerId: navigationsLayerId,
          event: {
            time: Date.now(),
            title: &#39;Start of navigation&#39;,
            subtitle: to.fullPath,
            data,
            groupId: to.meta.__navigationId,
          },
        });
      });
      router.afterEach((to, from, failure) =&gt; {
        const data = {
          guard: formatDisplay(&#39;afterEach&#39;),
        };
        if (failure) {
          data.failure = {
            _custom: {
              type: Error,
              readOnly: true,
              display: failure ? failure.message : &#39;&#39;,
              tooltip: &#39;Navigation Failure&#39;,
              value: failure,
            },
          };
          data.status = formatDisplay(&#39;\u274C&#39;);
        } else {
          data.status = formatDisplay(&#39;\u2705&#39;);
        }
        // we set here to have the right order
        data.from = formatRouteLocation(
          from,
          &#39;Current Location during this navigation&#39;
        );
        data.to = formatRouteLocation(to, &#39;Target location&#39;);
        api.addTimelineEvent({
          layerId: navigationsLayerId,
          event: {
            title: &#39;End of navigation&#39;,
            subtitle: to.fullPath,
            time: Date.now(),
            data,
            logType: failure ? &#39;warning&#39; : &#39;default&#39;,
            groupId: to.meta.__navigationId,
          },
        });
      });
      /**
       * Inspector of Existing routes
       */
      const routerInspectorId = &#39;router-inspector:&#39; + id;
      api.addInspector({
        id: routerInspectorId,
        label: &#39;Routes&#39; + (id ? &#39; &#39; + id : &#39;&#39;),
        icon: &#39;book&#39;,
        treeFilterPlaceholder: &#39;Search routes&#39;,
      });
      function refreshRoutesView() {
        // the routes view isn&#39;t active
        if (!activeRoutesPayload) return;
        const payload = activeRoutesPayload;
        // children routes will appear as nested
        let routes = matcher.getRoutes().filter((route) =&gt; !route.parent);
        // reset match state to false
        routes.forEach(resetMatchStateOnRouteRecord);
        // apply a match state if there is a payload
        if (payload.filter) {
          routes = routes.filter((route) =&gt;
            // save matches state based on the payload
            isRouteMatching(route, payload.filter.toLowerCase())
          );
        }
        // mark active routes
        routes.forEach((route) =&gt;
          markRouteRecordActive(route, router.currentRoute.value)
        );
        payload.rootNodes = routes.map(formatRouteRecordForInspector);
      }
      let activeRoutesPayload;
      api.on.getInspectorTree((payload) =&gt; {
        activeRoutesPayload = payload;
        if (payload.app === app &amp;&amp; payload.inspectorId === routerInspectorId) {
          refreshRoutesView();
        }
      });
      /**
       * Display information about the currently selected route record
       */
      api.on.getInspectorState((payload) =&gt; {
        if (payload.app === app &amp;&amp; payload.inspectorId === routerInspectorId) {
          const routes = matcher.getRoutes();
          const route = routes.find(
            (route) =&gt; route.record.__vd_id === payload.nodeId
          );
          if (route) {
            payload.state = {
              options: formatRouteRecordMatcherForStateInspector(route),
            };
          }
        }
      });
      api.sendInspectorTree(routerInspectorId);
      api.sendInspectorState(routerInspectorId);
    }
  );
}
function modifierForKey(key) {
  if (key.optional) {
    return key.repeatable ? &#39;*&#39; : &#39;?&#39;;
  } else {
    return key.repeatable ? &#39;+&#39; : &#39;&#39;;
  }
}
function formatRouteRecordMatcherForStateInspector(route) {
  const { record } = route;
  const fields = [{ editable: false, key: &#39;path&#39;, value: record.path }];
  if (record.name != null) {
    fields.push({
      editable: false,
      key: &#39;name&#39;,
      value: record.name,
    });
  }
  fields.push({ editable: false, key: &#39;regexp&#39;, value: route.re });
  if (route.keys.length) {
    fields.push({
      editable: false,
      key: &#39;keys&#39;,
      value: {
        _custom: {
          type: null,
          readOnly: true,
          display: route.keys
            .map((key) =&gt; </span><span class="token template-punctuation string">\`</span></span>$<span class="token punctuation">{</span>key<span class="token punctuation">.</span>name<span class="token punctuation">}</span>$<span class="token punctuation">{</span><span class="token function">modifierForKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">)
            .join(&#39; &#39;),
          tooltip: &#39;Param keys&#39;,
          value: route.keys,
        },
      },
    });
  }
  if (record.redirect != null) {
    fields.push({
      editable: false,
      key: &#39;redirect&#39;,
      value: record.redirect,
    });
  }
  if (route.alias.length) {
    fields.push({
      editable: false,
      key: &#39;aliases&#39;,
      value: route.alias.map((alias) =&gt; alias.record.path),
    });
  }
  fields.push({
    key: &#39;score&#39;,
    editable: false,
    value: {
      _custom: {
        type: null,
        readOnly: true,
        display: route.score.map((score) =&gt; score.join(&#39;, &#39;)).join(&#39; | &#39;),
        tooltip: &#39;Score used to sort routes&#39;,
        value: route.score,
      },
    },
  });
  return fields;
}
/**
 * Extracted from tailwind palette
 */
const PINK_500 = 0xec4899;
const BLUE_600 = 0x2563eb;
const LIME_500 = 0x84cc16;
const CYAN_400 = 0x22d3ee;
const ORANGE_400 = 0xfb923c;
// const GRAY_100 = 0xf4f4f5
const DARK = 0x666666;
function formatRouteRecordForInspector(route) {
  const tags = [];
  const { record } = route;
  if (record.name != null) {
    tags.push({
      label: String(record.name),
      textColor: 0,
      backgroundColor: CYAN_400,
    });
  }
  if (record.aliasOf) {
    tags.push({
      label: &#39;alias&#39;,
      textColor: 0,
      backgroundColor: ORANGE_400,
    });
  }
  if (route.__vd_match) {
    tags.push({
      label: &#39;matches&#39;,
      textColor: 0,
      backgroundColor: PINK_500,
    });
  }
  if (route.__vd_exactActive) {
    tags.push({
      label: &#39;exact&#39;,
      textColor: 0,
      backgroundColor: LIME_500,
    });
  }
  if (route.__vd_active) {
    tags.push({
      label: &#39;active&#39;,
      textColor: 0,
      backgroundColor: BLUE_600,
    });
  }
  if (record.redirect) {
    tags.push({
      label:
        &#39;redirect: &#39; +
        (typeof record.redirect === &#39;string&#39; ? record.redirect : &#39;Object&#39;),
      textColor: 0xffffff,
      backgroundColor: DARK,
    });
  }
  // add an id to be able to select it. Using the </span><span class="token template-punctuation string">\`</span></span>path<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> is not possible because
  // empty path children would collide with their parents
  let id = record.__vd_id;
  if (id == null) {
    id = String(routeRecordId++);
    record.__vd_id = id;
  }
  return {
    id,
    label: record.path,
    tags,
    children: route.children.map(formatRouteRecordForInspector),
  };
}
//  incremental id for route records and inspector state
let routeRecordId = 0;
const EXTRACT_REGEXP_RE = /^\\/(.*)\\/([a-z]*)$/;
function markRouteRecordActive(route, currentRoute) {
  // no route will be active if matched is empty
  // reset the matching state
  const isExactActive =
    currentRoute.matched.length &amp;&amp;
    isSameRouteRecord(
      currentRoute.matched[currentRoute.matched.length - 1],
      route.record
    );
  route.__vd_exactActive = route.__vd_active = isExactActive;
  if (!isExactActive) {
    route.__vd_active = currentRoute.matched.some((match) =&gt;
      isSameRouteRecord(match, route.record)
    );
  }
  route.children.forEach((childRoute) =&gt;
    markRouteRecordActive(childRoute, currentRoute)
  );
}
function resetMatchStateOnRouteRecord(route) {
  route.__vd_match = false;
  route.children.forEach(resetMatchStateOnRouteRecord);
}
function isRouteMatching(route, filter) {
  const found = String(route.re).match(EXTRACT_REGEXP_RE);
  route.__vd_match = false;
  if (!found || found.length &lt; 3) {
    return false;
  }
  // use a regexp without $ at the end to match nested routes better
  const nonEndingRE = new RegExp(found[1].replace(/\\$$/, &#39;&#39;), found[2]);
  if (nonEndingRE.test(filter)) {
    // mark children as matches
    route.children.forEach((child) =&gt; isRouteMatching(child, filter));
    // exception case: </span><span class="token template-punctuation string">\`</span></span><span class="token operator">/</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    if (route.record.path !== &#39;/&#39; || filter === &#39;/&#39;) {
      route.__vd_match = route.re.test(filter);
      return true;
    }
    // hide the / route
    return false;
  }
  const path = route.record.path.toLowerCase();
  const decodedPath = decode(path);
  // also allow partial matching on the path
  if (
    !filter.startsWith(&#39;/&#39;) &amp;&amp;
    (decodedPath.includes(filter) || path.includes(filter))
  )
    return true;
  if (decodedPath.startsWith(filter) || path.startsWith(filter)) return true;
  if (route.record.name &amp;&amp; String(route.record.name).includes(filter))
    return true;
  return route.children.some((child) =&gt; isRouteMatching(child, filter));
}
function omit(obj, keys) {
  const ret = {};
  for (const key in obj) {
    if (!keys.includes(key)) {
      // @ts-expect-error
      ret[key] = obj[key];
    }
  }
  return ret;
}

/**
 * Creates a Router instance that can be used by a Vue app.
 *
 * @param options - {@link RouterOptions}
 */
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$1 = options.parseQuery || parseQuery;
  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  if (!routerHistory)
    throw new Error(
      &#39;Provide the &quot;history&quot; option when calling &quot;createRouter()&quot;:&#39; +
        &#39; https://next.router.vuejs.org/api/#history.&#39;
    );
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  // leave the scrollRestoration if no scrollBehavior is provided
  if (isBrowser &amp;&amp; options.scrollBehavior &amp;&amp; &#39;scrollRestoration&#39; in history) {
    history.scrollRestoration = &#39;manual&#39;;
  }
  const normalizeParams = applyToParams.bind(
    null,
    (paramValue) =&gt; &#39;&#39; + paramValue
  );
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams =
    // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode);
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    } else {
      warn(</span><span class="token template-punctuation string">\`</span></span>Cannot remove non<span class="token operator">-</span>existent route <span class="token string">&quot;\${String(name)}&quot;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) =&gt; routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve(rawLocation, currentLocation) {
    // const objectLocation = routerLocationAsObject(rawLocation)
    // we create a copy to modify it later
    currentLocation = assign({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === &#39;string&#39;) {
      const locationNormalized = parseURL(
        parseQuery$1,
        rawLocation,
        currentLocation.path
      );
      const matchedRoute = matcher.resolve(
        { path: locationNormalized.path },
        currentLocation
      );
      const href = routerHistory.createHref(locationNormalized.fullPath);
      {
        if (href.startsWith(&#39;//&#39;))
          warn(
            </span><span class="token template-punctuation string">\`</span></span>Location <span class="token string">&quot;\${rawLocation}&quot;</span> resolved to <span class="token string">&quot;\${href}&quot;</span><span class="token punctuation">.</span> <span class="token constant">A</span> resolved location cannot start <span class="token keyword">with</span> multiple slashes<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          );
        else if (!matchedRoute.matched.length) {
          warn(</span><span class="token template-punctuation string">\`</span></span>No match found <span class="token keyword">for</span> location <span class="token keyword">with</span> path <span class="token string">&quot;\${rawLocation}&quot;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">);
        }
      }
      // locationNormalized is always a new object
      return assign(locationNormalized, matchedRoute, {
        params: decodeParams(matchedRoute.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: undefined,
        href,
      });
    }
    let matcherLocation;
    // path could be relative in object as well
    if (&#39;path&#39; in rawLocation) {
      if (
        &#39;params&#39; in rawLocation &amp;&amp;
        !(&#39;name&#39; in rawLocation) &amp;&amp;
        // @ts-expect-error: the type is never
        Object.keys(rawLocation.params).length
      ) {
        warn(
          </span><span class="token template-punctuation string">\`</span></span>Path &quot;$<span class="token punctuation">{</span>
            <span class="token comment">// @ts-expect-error: the type is never</span>
            rawLocation<span class="token punctuation">.</span>path
          <span class="token punctuation">}</span>&quot; was passed <span class="token keyword">with</span> params but they will be ignored<span class="token punctuation">.</span> Use a named route alongside params instead<span class="token punctuation">.</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        );
      }
      matcherLocation = assign({}, rawLocation, {
        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path)
          .path,
      });
    } else {
      // remove any nullish param
      const targetParams = assign({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      // pass encoded values to the matcher so it can produce encoded path and fullPath
      matcherLocation = assign({}, rawLocation, {
        params: encodeParams(rawLocation.params),
      });
      // current location params are decoded, we need to encode them in case the
      // matcher merges the params
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash = rawLocation.hash || &#39;&#39;;
    if (hash &amp;&amp; !hash.startsWith(&#39;#&#39;)) {
      warn(
        </span><span class="token template-punctuation string">\`</span></span><span class="token constant">A</span> \\<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hash\\\` should always start with the character &quot;#&quot;. Replace &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; with &quot;#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// decoding them) the matcher might have merged current location params so</span>
    <span class="token comment">// we need to run the decoding again</span>
    matchedRoute<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token function">normalizeParams</span><span class="token punctuation">(</span><span class="token function">decodeParams</span><span class="token punctuation">(</span>matchedRoute<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> fullPath <span class="token operator">=</span> <span class="token function">stringifyURL</span><span class="token punctuation">(</span>
      stringifyQuery$<span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> rawLocation<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        hash<span class="token operator">:</span> <span class="token function">encodeHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">,</span>
        path<span class="token operator">:</span> matchedRoute<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> href <span class="token operator">=</span> routerHistory<span class="token punctuation">.</span><span class="token function">createHref</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>href<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;//&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Location &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>rawLocation<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; resolved to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. A resolved location cannot start with multiple slashes.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchedRoute<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">No match found for location with path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
            <span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> rawLocation <span class="token operator">?</span> rawLocation<span class="token punctuation">.</span>path <span class="token operator">:</span> rawLocation
          <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        fullPath<span class="token punctuation">,</span>
        <span class="token comment">// keep the hash encoded so fullPath is effectively path + encodedQuery +</span>
        <span class="token comment">// hash</span>
        hash<span class="token punctuation">,</span>
        query<span class="token operator">:</span>
          <span class="token comment">// if the user is using a custom query lib like qs, we might have</span>
          <span class="token comment">// nested objects, so we keep the query as is, meaning it can contain</span>
          <span class="token comment">// numbers at \`$route.query\`, but at the point, the user will have to</span>
          <span class="token comment">// use their own type anyway.</span>
          <span class="token comment">// https://github.com/vuejs/vue-router-next/issues/328#issuecomment-649481567</span>
          stringifyQuery$<span class="token number">1</span> <span class="token operator">===</span> stringifyQuery
            <span class="token operator">?</span> <span class="token function">normalizeQuery</span><span class="token punctuation">(</span>rawLocation<span class="token punctuation">.</span>query<span class="token punctuation">)</span>
            <span class="token operator">:</span> rawLocation<span class="token punctuation">.</span>query <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      matchedRoute<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        redirectedFrom<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
        href<span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">locationAsObject</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>
      <span class="token operator">?</span> <span class="token function">parseURL</span><span class="token punctuation">(</span>parseQuery$<span class="token number">1</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">!==</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        from<span class="token punctuation">,</span>
        to<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> lastMatched <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastMatched <span class="token operator">&amp;&amp;</span> lastMatched<span class="token punctuation">.</span>redirect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> redirect <span class="token punctuation">}</span> <span class="token operator">=</span> lastMatched<span class="token punctuation">;</span>
      <span class="token keyword">let</span> newTargetLocation <span class="token operator">=</span>
        <span class="token keyword">typeof</span> redirect <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">redirect</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token operator">:</span> redirect<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newTargetLocation <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newTargetLocation <span class="token operator">=</span>
          newTargetLocation<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> newTargetLocation<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">?</span> <span class="token punctuation">(</span>newTargetLocation <span class="token operator">=</span> <span class="token function">locationAsObject</span><span class="token punctuation">(</span>newTargetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">:</span> <span class="token comment">// force empty params</span>
              <span class="token punctuation">{</span> path<span class="token operator">:</span> newTargetLocation <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// @ts-expect-error: force empty params when a string is passed to let</span>
        <span class="token comment">// the router parse them again</span>
        newTargetLocation<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> newTargetLocation<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> newTargetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Invalid redirect found:\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>
            newTargetLocation<span class="token punctuation">,</span>
            <span class="token keyword">null</span><span class="token punctuation">,</span>
            <span class="token number">2</span>
          <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n when navigating to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
            to<span class="token punctuation">.</span>fullPath
          <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. A redirect must contain a name or path. This will break in production.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid redirect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token function">assign</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
          query<span class="token operator">:</span> to<span class="token punctuation">.</span>query<span class="token punctuation">,</span>
          hash<span class="token operator">:</span> to<span class="token punctuation">.</span>hash<span class="token punctuation">,</span>
          params<span class="token operator">:</span> to<span class="token punctuation">.</span>params<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        newTargetLocation
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> redirectedFrom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> targetLocation <span class="token operator">=</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> from <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> to<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">const</span> force <span class="token operator">=</span> to<span class="token punctuation">.</span>force<span class="token punctuation">;</span>
    <span class="token comment">// to could be a string where \`replace\` is a function</span>
    <span class="token keyword">const</span> replace <span class="token operator">=</span> to<span class="token punctuation">.</span>replace <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> shouldRedirect <span class="token operator">=</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span>targetLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>
        <span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          state<span class="token operator">:</span> data<span class="token punctuation">,</span>
          force<span class="token punctuation">,</span>
          replace<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// keep original redirectedFrom if it exists</span>
        redirectedFrom <span class="token operator">||</span> targetLocation
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// if it was a redirect we already called \`pushWithRedirect\` above</span>
    <span class="token keyword">const</span> toLocation <span class="token operator">=</span> targetLocation<span class="token punctuation">;</span>
    toLocation<span class="token punctuation">.</span>redirectedFrom <span class="token operator">=</span> redirectedFrom<span class="token punctuation">;</span>
    <span class="token keyword">let</span> failure<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>force <span class="token operator">&amp;&amp;</span> <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span>stringifyQuery$<span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> targetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      failure <span class="token operator">=</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        to<span class="token operator">:</span> toLocation<span class="token punctuation">,</span>
        from<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// trigger scroll to allow scrolling to the same anchor</span>
      <span class="token function">handleScroll</span><span class="token punctuation">(</span>
        from<span class="token punctuation">,</span>
        from<span class="token punctuation">,</span>
        <span class="token comment">// this is a push, the only way for it to be triggered from a</span>
        <span class="token comment">// history.listen is with a redirect, which makes it become a push</span>
        <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// This cannot be the first navigation because the initial location</span>
        <span class="token comment">// cannot be manually navigated to</span>
        <span class="token boolean">false</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>failure <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">navigate</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
          <span class="token operator">?</span> error
          <span class="token operator">:</span> <span class="token comment">// reject any unknown error</span>
            <span class="token function">triggerError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>failure<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* NAVIGATION_GUARD_REDIRECT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>
              <span class="token comment">// we are redirecting to the same location we were already at</span>
              <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span>
                stringifyQuery$<span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>failure<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span>
                toLocation
              <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
              <span class="token comment">// and we have done it a couple of times</span>
              redirectedFrom <span class="token operator">&amp;&amp;</span>
              <span class="token comment">// @ts-expect-error: added only in dev</span>
              <span class="token punctuation">(</span>redirectedFrom<span class="token punctuation">.</span>_count <span class="token operator">=</span> redirectedFrom<span class="token punctuation">.</span>_count
                <span class="token operator">?</span> <span class="token comment">// @ts-expect-error</span>
                  redirectedFrom<span class="token punctuation">.</span>_count <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span>
            <span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">warn</span><span class="token punctuation">(</span>
                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Detected an infinite redirection in a navigation guard when going from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>from<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>toLocation<span class="token punctuation">.</span>fullPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Aborting to avoid a Stack Overflow. This will break in production if not fixed.</span><span class="token template-punctuation string">\`</span></span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Infinite redirect in navigation guard&#39;</span><span class="token punctuation">)</span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>
              <span class="token comment">// keep options</span>
              <span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>failure<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                state<span class="token operator">:</span> data<span class="token punctuation">,</span>
                force<span class="token punctuation">,</span>
                replace<span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token comment">// preserve the original redirectedFrom if any</span>
              redirectedFrom <span class="token operator">||</span> toLocation
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// if we fail we don&#39;t finalize the navigation</span>
          failure <span class="token operator">=</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> failure<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * Helper to reject and skip all navigation guards if a new navigation happened
   * <span class="token keyword">@param</span> <span class="token parameter">to</span>
   * <span class="token keyword">@param</span> <span class="token parameter">from</span>
   */</span>
  <span class="token keyword">function</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> error <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// TODO: refactor the whole before guards by internally using router.beforeEach</span>
  <span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> guards<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span> <span class="token operator">=</span>
      <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// all components here have been resolved once because we are leaving</span>
    guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
      leavingRecords<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span>
      to<span class="token punctuation">,</span>
      from
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// leavingRecords is already reversed</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> leavingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      record<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> canceledNavigationCheck <span class="token operator">=</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      to<span class="token punctuation">,</span>
      from
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// run the queue of per route beforeRouteLeave guards</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// check global guards beforeEach</span>
          guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// check in components beforeRouteUpdate</span>
          guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
            updatingRecords<span class="token punctuation">,</span>
            <span class="token string">&#39;beforeRouteUpdate&#39;</span><span class="token punctuation">,</span>
            to<span class="token punctuation">,</span>
            from
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> updatingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            record<span class="token punctuation">.</span>updateGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// run the queue of per route beforeEnter guards</span>
          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// check the route beforeEnter</span>
          guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// do not trigger beforeEnter on reused views</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> beforeEnter <span class="token keyword">of</span> record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span>
                  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// run the queue of per route beforeEnter guards</span>
          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// NOTE: at this point to.matched is normalized and does not contain any () =&gt; Promise&lt;Component&gt;</span>
          <span class="token comment">// clear existing enterCallbacks, these are added by extractComponentsGuards</span>
          to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>enterCallbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// check in-component beforeRouteEnter</span>
          guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
            enteringRecords<span class="token punctuation">,</span>
            <span class="token string">&#39;beforeRouteEnter&#39;</span><span class="token punctuation">,</span>
            to<span class="token punctuation">,</span>
            from
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// run the queue of per route beforeEnter guards</span>
          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// check global guards beforeResolve</span>
          guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeResolveGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// catch any navigation canceled</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span><span class="token punctuation">)</span>
            <span class="token operator">?</span> err
            <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// navigation is confirmed, call afterGuards</span>
    <span class="token comment">// TODO: wrap with error handlers</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> afterGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">guard</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * - Cleans up any navigation guards
   * - Changes the url if necessary
   * - Calls the scrollBehavior
   */</span>
  <span class="token keyword">function</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span><span class="token parameter">toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// a more recent navigation took place</span>
    <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> error<span class="token punctuation">;</span>
    <span class="token comment">// only consider as push if it&#39;s not the first navigation</span>
    <span class="token keyword">const</span> isFirstNavigation <span class="token operator">=</span> from <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">!</span>isBrowser <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token comment">// change URL only if the user did a push/replace and if it&#39;s not the initial navigation because</span>
    <span class="token comment">// it&#39;s just reflecting the url</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isPush<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// on the initial navigation, we want to reuse the scroll position from</span>
      <span class="token comment">// history state if it exists</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>replace <span class="token operator">||</span> isFirstNavigation<span class="token punctuation">)</span>
        routerHistory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
          toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>
          <span class="token function">assign</span><span class="token punctuation">(</span>
            <span class="token punctuation">{</span>
              scroll<span class="token operator">:</span> isFirstNavigation <span class="token operator">&amp;&amp;</span> state <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>scroll<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            data
          <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> routerHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// accept current navigation</span>
    currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> toLocation<span class="token punctuation">;</span>
    <span class="token function">handleScroll</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> isFirstNavigation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> removeHistoryListener<span class="token punctuation">;</span>
  <span class="token comment">// attach listener to history to trigger navigations</span>
  <span class="token keyword">function</span> <span class="token function">setupListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    removeHistoryListener <span class="token operator">=</span> routerHistory<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> _from<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// cannot be a redirect route because it was in history</span>
      <span class="token keyword">const</span> toLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// due to dynamic routing, and to hash history with manual navigation</span>
      <span class="token comment">// (manually changing the url or calling history.hash = &#39;#/somewhere&#39;),</span>
      <span class="token comment">// there could be a redirect record in history</span>
      <span class="token keyword">const</span> shouldRedirect <span class="token operator">=</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>
          <span class="token function">assign</span><span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">,</span> <span class="token punctuation">{</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          toLocation
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      pendingLocation <span class="token operator">=</span> toLocation<span class="token punctuation">;</span>
      <span class="token keyword">const</span> from <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token comment">// TODO: should be moved to web history?</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">saveScrollPosition</span><span class="token punctuation">(</span>
          <span class="token function">getScrollKey</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> info<span class="token punctuation">.</span>delta<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">navigate</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>
            <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>
              error<span class="token punctuation">,</span>
              <span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> error<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* NAVIGATION_GUARD_REDIRECT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Here we could call if (info.delta) routerHistory.go(-info.delta,</span>
            <span class="token comment">// false) but this is bug prone as we have no way to wait the</span>
            <span class="token comment">// navigation to be finished before calling pushWithRedirect. Using</span>
            <span class="token comment">// a setTimeout of 16ms seems to work but there is not guarantee for</span>
            <span class="token comment">// it to work on every browser. So Instead we do not restore the</span>
            <span class="token comment">// history entry and trigger a new navigation as requested by the</span>
            <span class="token comment">// navigation guard.</span>
            <span class="token comment">// the error is already handled by router.push we just want to avoid</span>
            <span class="token comment">// logging the error</span>
            <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>
              error<span class="token punctuation">.</span>to<span class="token punctuation">,</span>
              toLocation
              <span class="token comment">// avoid an uncaught rejection, let push call triggerError</span>
            <span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// manual change in hash history #916 ending up in the URL not</span>
                <span class="token comment">// changing but it was changed by the manual url change, so we</span>
                <span class="token comment">// need to manually change it ourselves</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>
                  <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>
                    failure<span class="token punctuation">,</span>
                    <span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span> <span class="token operator">|</span> <span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span>
                  <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                  <span class="token operator">!</span>info<span class="token punctuation">.</span>delta <span class="token operator">&amp;&amp;</span>
                  info<span class="token punctuation">.</span>type <span class="token operator">===</span> NavigationType<span class="token punctuation">.</span>pop
                <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// avoid the then branch</span>
            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// do not restore history on unknown direction</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">)</span> routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// unrecognized error, transfer to the global handler</span>
          <span class="token keyword">return</span> <span class="token function">triggerError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          failure <span class="token operator">=</span>
            failure <span class="token operator">||</span>
            <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span>
              <span class="token comment">// after navigation, all matched components are resolved</span>
              toLocation<span class="token punctuation">,</span>
              from<span class="token punctuation">,</span>
              <span class="token boolean">false</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// revert the navigation</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span>info<span class="token punctuation">.</span>delta<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
              info<span class="token punctuation">.</span>type <span class="token operator">===</span> NavigationType<span class="token punctuation">.</span>pop <span class="token operator">&amp;&amp;</span>
              <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>
                failure<span class="token punctuation">,</span>
                <span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span> <span class="token operator">|</span> <span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span>
              <span class="token punctuation">)</span>
            <span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// manual change in hash history #916</span>
              <span class="token comment">// it&#39;s like a push but lacks the information of the direction</span>
              routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Initialization and Errors</span>
  <span class="token keyword">let</span> readyHandlers <span class="token operator">=</span> <span class="token function">useCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> errorHandlers <span class="token operator">=</span> <span class="token function">useCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> ready<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Trigger errorHandlers added via onError and throws the error as well
   *
   * <span class="token keyword">@param</span> <span class="token parameter">error</span> - error to throw
   * <span class="token keyword">@param</span> <span class="token parameter">to</span> - location we were navigating to when the error happened
   * <span class="token keyword">@param</span> <span class="token parameter">from</span> - location we were navigating from when the error happened
   * <span class="token keyword">@returns</span> the error as a rejected promise
   */</span>
  <span class="token keyword">function</span> <span class="token function">triggerError</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">markAsReady</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> list <span class="token operator">=</span> errorHandlers<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handler</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;uncaught error during route navigation:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ready <span class="token operator">&amp;&amp;</span> currentRoute<span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      readyHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * Mark the router as ready, resolving the promised returned by isReady(). Can
   * only be called once, otherwise does nothing.
   * <span class="token keyword">@param</span> <span class="token parameter">err</span> - optional error
   */</span>
  <span class="token keyword">function</span> <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">setupListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    readyHandlers
      <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    readyHandlers<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Scroll behavior</span>
  <span class="token keyword">function</span> <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> isFirstNavigation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollBehavior <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBrowser <span class="token operator">||</span> <span class="token operator">!</span>scrollBehavior<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> scrollPosition <span class="token operator">=</span>
      <span class="token punctuation">(</span><span class="token operator">!</span>isPush <span class="token operator">&amp;&amp;</span> <span class="token function">getSavedScrollPosition</span><span class="token punctuation">(</span><span class="token function">getScrollKey</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span><span class="token punctuation">(</span>isFirstNavigation <span class="token operator">||</span> <span class="token operator">!</span>isPush<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        history<span class="token punctuation">.</span>state <span class="token operator">&amp;&amp;</span>
        history<span class="token punctuation">.</span>state<span class="token punctuation">.</span>scroll<span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">scrollBehavior</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> scrollPosition<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> position <span class="token operator">&amp;&amp;</span> <span class="token function">scrollToPosition</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">triggerError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">go</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">delta</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> started<span class="token punctuation">;</span>
  <span class="token keyword">const</span> installedApps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>
    currentRoute<span class="token punctuation">,</span>
    addRoute<span class="token punctuation">,</span>
    removeRoute<span class="token punctuation">,</span>
    hasRoute<span class="token punctuation">,</span>
    getRoutes<span class="token punctuation">,</span>
    resolve<span class="token punctuation">,</span>
    options<span class="token punctuation">,</span>
    push<span class="token punctuation">,</span>
    replace<span class="token punctuation">,</span>
    go<span class="token punctuation">,</span>
    <span class="token function-variable function">back</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">forward</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    beforeEach<span class="token operator">:</span> beforeGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
    beforeResolve<span class="token operator">:</span> beforeResolveGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
    afterEach<span class="token operator">:</span> afterGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
    onError<span class="token operator">:</span> errorHandlers<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
    isReady<span class="token punctuation">,</span>
    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
      app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterLink&#39;</span><span class="token punctuation">,</span> RouterLink<span class="token punctuation">)</span><span class="token punctuation">;</span>
      app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span> RouterView<span class="token punctuation">)</span><span class="token punctuation">;</span>
      app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$router <span class="token operator">=</span> router<span class="token punctuation">;</span>
      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">,</span> <span class="token string">&#39;$route&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unref</span><span class="token punctuation">(</span>currentRoute<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// this initial navigation is only necessary on client, on server it doesn&#39;t</span>
      <span class="token comment">// make sense because it will create an extra unnecessary navigation and could</span>
      <span class="token comment">// lead to problems</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        isBrowser <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// used for the initial navigation client side to avoid pushing</span>
        <span class="token comment">// multiple times when the router is used in multiple apps</span>
        <span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span>
        currentRoute<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// see above</span>
        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">push</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Unexpected error when starting the router:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// @ts-expect-error: the key matches</span>
        reactiveRoute<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>
      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">,</span> <span class="token function">reactive</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">,</span> currentRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> unmountApp <span class="token operator">=</span> app<span class="token punctuation">.</span>unmount<span class="token punctuation">;</span>
      installedApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
      app<span class="token punctuation">.</span><span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        installedApps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// the router is not attached to an app anymore</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>installedApps<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// invalidate the current navigation</span>
          pendingLocation <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>
          removeHistoryListener <span class="token operator">&amp;&amp;</span> <span class="token function">removeHistoryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>
          started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">unmountApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addDevtools</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> router<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> router<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span><span class="token parameter">guards</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> guards<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> leavingRecords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> updatingRecords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> enteringRecords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">,</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> recordFrom <span class="token operator">=</span> from<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> recordFrom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        updatingRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> leavingRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> recordTo <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>recordTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// the type doesn&#39;t matter because we are comparing per reference</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> recordTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        enteringRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Returns the router instance. Equivalent to using \`$router\` inside
 * templates.
 */</span>
<span class="token keyword">function</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * Returns the current route location. Equivalent to using \`$route\` inside
 * templates.
 */</span>
<span class="token keyword">function</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span>
  NavigationFailureType<span class="token punctuation">,</span>
  RouterLink<span class="token punctuation">,</span>
  RouterView<span class="token punctuation">,</span>
  <span class="token constant">START_LOCATION_NORMALIZED</span> <span class="token keyword">as</span> <span class="token constant">START_LOCATION</span><span class="token punctuation">,</span>
  createMemoryHistory<span class="token punctuation">,</span>
  createRouter<span class="token punctuation">,</span>
  createRouterMatcher<span class="token punctuation">,</span>
  createWebHashHistory<span class="token punctuation">,</span>
  createWebHistory<span class="token punctuation">,</span>
  isNavigationFailure<span class="token punctuation">,</span>
  matchedRouteKey<span class="token punctuation">,</span>
  onBeforeRouteLeave<span class="token punctuation">,</span>
  onBeforeRouteUpdate<span class="token punctuation">,</span>
  parseQuery<span class="token punctuation">,</span>
  routeLocationKey<span class="token punctuation">,</span>
  routerKey<span class="token punctuation">,</span>
  routerViewLocationKey<span class="token punctuation">,</span>
  stringifyQuery<span class="token punctuation">,</span>
  useLink<span class="token punctuation">,</span>
  useRoute<span class="token punctuation">,</span>
  useRouter<span class="token punctuation">,</span>
  viewDepthKey<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$V = _sfc_main$V.setup;
_sfc_main$V.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vueRouter/code.html.vue");
  return _sfc_setup$V ? _sfc_setup$V(props, ctx) : void 0;
};
var code_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["ssrRender", _sfc_ssrRender$H]]);
var code_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": code_html$1
});
const _sfc_main$U = {};
function _sfc_ssrRender$G(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="minivuerouter" tabindex="-1"><a class="header-anchor" href="#minivuerouter" aria-hidden="true">#</a> miniVueRouter</h1><p>Vue3 \u4E2D\u662F\u5982\u4F55\u4F7F\u7528\u8DEF\u7531\u7684</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// router.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">&quot;../pages/login.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&quot;../pages/home.vue&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// \u5B9A\u4E49\u5404\u4E2A\u7EC4\u4EF6\u7684\u8DEF\u7531\u5730\u5740</span>
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> Login<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> Home<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// \u521B\u5EFA\u8DEF\u7531\u5B9E\u4F8B</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// App.vue</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&quot;./router/router&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>createRouter</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5B9A\u4E49\u4E00\u4E2A\u8DEF\u7531\u5BF9\u8C61</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// \u8FD4\u56DE\u8DEF\u7531\u5BF9\u8C61</span>
  <span class="token keyword">return</span> router<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u4ECE createRouter \u7684\u4F7F\u7528\u4E2D\uFF0C\u6211\u4EEC\u53EF\u4EE5\u770B\u5230\u4F20\u5165\u4E86\u4E24\u4E2A\u53C2\u6570\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u83B7\u53D6\u4F20\u5165\u7684\u4E24\u4E2A\u53C2\u6570</span>
  <span class="token keyword">const</span> history <span class="token operator">=</span> params<span class="token punctuation">.</span>history<span class="token punctuation">;</span>
  <span class="token keyword">const</span> routes <span class="token operator">=</span> params<span class="token punctuation">.</span>routes<span class="token punctuation">;</span>

  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>
    history<span class="token punctuation">,</span>
    routes<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> router<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u56E0\u4E3A\u8981\u6839\u636E\u5F53\u524D hash \u6765\u52A8\u6001\u9009\u62E9\u7EC4\u4EF6\u6E32\u67D3\uFF0C\u6240\u4EE5 router \u5B9E\u4F8B\u8FD8\u9700\u8981\u4FDD\u5B58\u5F53\u524D\u7684\u8DEF\u5F84 hash\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> history <span class="token operator">=</span> params<span class="token punctuation">.</span>history<span class="token punctuation">;</span>
  <span class="token keyword">const</span> routes <span class="token operator">=</span> params<span class="token punctuation">.</span>routes<span class="token punctuation">;</span>

  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>
    history<span class="token punctuation">,</span>
    routes<span class="token punctuation">,</span>
    <span class="token comment">// \u589E\u52A0\u5F53\u524D\u8DEF\u5F84hash\u7684\u54CD\u5E94\u5F0F\u53D8\u91CF</span>
    hash<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> router<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u533A\u5206\u8DEF\u7531\u6A21\u5F0F</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u533A\u5206\u8DEF\u7531\u6A21\u5F0F</span>
<span class="token operator">+</span>   <span class="token keyword">return</span> <span class="token string">&#39;WebHashHistory&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> history <span class="token operator">=</span> params<span class="token punctuation">.</span>history<span class="token punctuation">;</span>
    <span class="token keyword">const</span> routes <span class="token operator">=</span> params<span class="token punctuation">.</span>routes<span class="token punctuation">;</span>

    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>
        history<span class="token punctuation">,</span>
        routes<span class="token punctuation">,</span>
        <span class="token comment">// \u589E\u52A0\u5F53\u524D\u8DEF\u5F84hash\u7684\u54CD\u5E94\u5F0F\u53D8\u91CF</span>
        hash<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u589E\u52A0\u76D1\u542C\u4E8B\u4EF6</span>
<span class="token operator">+</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>history <span class="token operator">===</span> <span class="token string">&#39;WebHashHistory&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>            <span class="token comment">// hash\u4FEE\u6539\u540E\u66F4\u65B0\u53D8\u91CF</span>
<span class="token operator">+</span>            router<span class="token punctuation">.</span>hash<span class="token punctuation">.</span>value <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span>    <span class="token punctuation">}</span>

     <span class="token keyword">return</span> router<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$U = _sfc_main$U.setup;
_sfc_main$U.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vueRouter/miniVueRouter.html.vue");
  return _sfc_setup$U ? _sfc_setup$U(props, ctx) : void 0;
};
var miniVueRouter_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["ssrRender", _sfc_ssrRender$G]]);
var miniVueRouter_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": miniVueRouter_html$1
});
const _sfc_main$T = {};
function _sfc_ssrRender$F(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="vue-router-\u6E90\u7801\u89E3\u8BFB" tabindex="-1"><a class="header-anchor" href="#vue-router-\u6E90\u7801\u89E3\u8BFB" aria-hidden="true">#</a> Vue Router \u6E90\u7801\u89E3\u8BFB</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u76EE\u5F55\u7ED3\u6784" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u76EE\u5F55\u7ED3\u6784`);
      } else {
        return [
          vue.createTextVNode("\u76EE\u5F55\u7ED3\u6784")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#createrouter" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`createRouter`);
      } else {
        return [
          vue.createTextVNode("createRouter")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#install" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`install`);
      } else {
        return [
          vue.createTextVNode("install")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#provide" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`provide`);
      } else {
        return [
          vue.createTextVNode("provide")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#currentroute" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`currentRoute`);
      } else {
        return [
          vue.createTextVNode("currentRoute")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#pushwithredirect" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`pushWithRedirect`);
      } else {
        return [
          vue.createTextVNode("pushWithRedirect")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#navigate" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`navigate`);
      } else {
        return [
          vue.createTextVNode("navigate")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#finalizenavigation" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`finalizeNavigation`);
      } else {
        return [
          vue.createTextVNode("finalizeNavigation")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#history-\u7684\u6A21\u5F0F" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`history \u7684\u6A21\u5F0F`);
      } else {
        return [
          vue.createTextVNode("history \u7684\u6A21\u5F0F")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5`);
      } else {
        return [
          vue.createTextVNode("\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#createwebhistory" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`createWebHistory`);
      } else {
        return [
          vue.createTextVNode("createWebHistory")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#usehistorystatenavigation" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`useHistoryStateNavigation`);
      } else {
        return [
          vue.createTextVNode("useHistoryStateNavigation")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#changelocation" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`changeLocation`);
      } else {
        return [
          vue.createTextVNode("changeLocation")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#usehistorylisteners" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`useHistoryListeners`);
      } else {
        return [
          vue.createTextVNode("useHistoryListeners")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#finalizenavigation-1" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`finalizeNavigation`);
      } else {
        return [
          vue.createTextVNode("finalizeNavigation")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#markasready" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`markAsReady`);
      } else {
        return [
          vue.createTextVNode("markAsReady")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#routerview" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`RouterView`);
      } else {
        return [
          vue.createTextVNode("RouterView")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#matched-\u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684`);
      } else {
        return [
          vue.createTextVNode("matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#createrouterecordmatcher" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`createRouteRecordMatcher`);
      } else {
        return [
          vue.createTextVNode("createRouteRecordMatcher")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#resolve" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`resolve`);
      } else {
        return [
          vue.createTextVNode("resolve")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0`);
      } else {
        return [
          vue.createTextVNode("\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></nav><h2 id="\u76EE\u5F55\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u76EE\u5F55\u7ED3\u6784" aria-hidden="true">#</a> \u76EE\u5F55\u7ED3\u6784</h2><h2 id="createrouter" tabindex="-1"><a class="header-anchor" href="#createrouter" aria-hidden="true">#</a> createRouter</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u521B\u5EFA router \u5BF9\u8C61</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>
    currentRoute<span class="token punctuation">,</span> <span class="token comment">// \u5F53\u524D\u8DEF\u5F84</span>
    addRoute<span class="token punctuation">,</span>
    removeRoute<span class="token punctuation">,</span>
    hasRoute<span class="token punctuation">,</span>
    getRoutes<span class="token punctuation">,</span>
    resolve<span class="token punctuation">,</span>
    options<span class="token punctuation">,</span>
    push<span class="token punctuation">,</span>
    replace<span class="token punctuation">,</span>
    go<span class="token punctuation">,</span>
    <span class="token function-variable function">back</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">forward</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    beforeEach<span class="token operator">:</span> beforeGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
    beforeResolve<span class="token operator">:</span> beforeResolveGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
    afterEach<span class="token operator">:</span> afterGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
    onError<span class="token operator">:</span> errorHandlers<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
    isReady<span class="token punctuation">,</span>
    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5B89\u88C5\u8DEF\u7531\u51FD\u6570</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> router<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD4\u56DE\u6765\u4E00\u4E2A router \u5BF9\u8C61\uFF0C\u901A\u8FC7 install \u6CE8\u518C\u5230 vue \u6839\u5B9E\u4F8B</p><h3 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> install</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    <span class="token comment">// \u6CE8\u518C\u5168\u5C40\u8DEF\u7531\u7EC4\u4EF6</span>
    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterLink&#39;</span><span class="token punctuation">,</span> RouterLink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span> RouterView<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5168\u5C40\u914D\u7F6E\u5B9A\u4E49 $router \u548C $route</span>
    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$router <span class="token operator">=</span> router<span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">,</span> <span class="token string">&#39;$route&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unref</span><span class="token punctuation">(</span>currentRoute<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5728\u6D4F\u89C8\u5668\u7AEF\u521D\u59CB\u5316\u5BFC\u822A</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      isBrowser <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span>
      currentRoute<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// see above</span>
      started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">push</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Unexpected error when starting the router:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8DEF\u5F84\u53D8\u6210\u54CD\u5E94\u5F0F</span>
    <span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      reactiveRoute<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5168\u5C40\u6CE8\u5165 router \u548C reactiveRoute</span>
    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">,</span> <span class="token function">reactive</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> unmountApp <span class="token operator">=</span> app<span class="token punctuation">.</span>unmount<span class="token punctuation">;</span>
    installedApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5E94\u7528\u5378\u8F7D\u7684\u65F6\u5019\uFF0C\u9700\u8981\u505A\u4E00\u4E9B\u8DEF\u7531\u6E05\u7406\u5DE5\u4F5C</span>
    app<span class="token punctuation">.</span><span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      installedApps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>installedApps<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">removeHistoryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>
        started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">unmountApp</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="provide" tabindex="-1"><a class="header-anchor" href="#provide" aria-hidden="true">#</a> provide</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">PolySymbol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  hasSymbol <span class="token operator">?</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;[vue-router]: &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;[vue-router]: &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>

<span class="token keyword">const</span> routerKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> routeLocationKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;route location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> routerViewLocationKey <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">PolySymbol</span><span class="token punctuation">(</span><span class="token string">&#39;router view location&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  reactiveRoute<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">,</span> <span class="token function">reactive</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">,</span> currentRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u6B64\u5904\u7684\u4EE3\u7801\u662F\u62FC\u51D1\u7684\u3002</p><h2 id="currentroute" tabindex="-1"><a class="header-anchor" href="#currentroute" aria-hidden="true">#</a> currentRoute</h2><p>\u5176\u5B9E\u5C31\u662F\u5F53\u524D\u6D4F\u89C8\u5668\u7684\u8DEF\u5F84\u4FE1\u606F\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">START_LOCATION_NORMALIZED</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  query<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  hash<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  fullPath<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  matched<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  meta<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  redirectedFrom<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u901A\u8FC7 router.push\u3001router.replace \u6539\u53D8\u5F53\u524D\u7684\u8DEF\u7531\u5BF9\u8C61\uFF0C\u5B83\u4EEC\u7684\u5E95\u5C42\u6700\u7EC8\u90FD\u662F\u901A\u8FC7 pushWithRedirect \u5B8C\u6210\u8DEF\u5F84\u7684\u5207\u6362\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token operator">:</span> RouteLocationRaw <span class="token operator">|</span> RouteLocation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token operator">:</span> RouteLocationRaw <span class="token operator">|</span> RouteLocationNormalized</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="pushwithredirect" tabindex="-1"><a class="header-anchor" href="#pushwithredirect" aria-hidden="true">#</a> pushWithRedirect</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> redirectedFrom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> targetLocation <span class="token operator">=</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> from <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> to<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
  <span class="token keyword">const</span> force <span class="token operator">=</span> to<span class="token punctuation">.</span>force<span class="token punctuation">;</span>
  <span class="token keyword">const</span> replace <span class="token operator">=</span> to<span class="token punctuation">.</span>replace <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> toLocation <span class="token operator">=</span> targetLocation<span class="token punctuation">;</span>
  toLocation<span class="token punctuation">.</span>redirectedFrom <span class="token operator">=</span> redirectedFrom<span class="token punctuation">;</span>
  <span class="token keyword">let</span> failure<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>force <span class="token operator">&amp;&amp;</span> <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span>stringifyQuery$<span class="token number">1</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> targetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    failure <span class="token operator">=</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token comment">/* NAVIGATION_DUPLICATED */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      to<span class="token operator">:</span> toLocation<span class="token punctuation">,</span>
      from<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">handleScroll</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>failure <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">navigate</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>
          error<span class="token punctuation">,</span>
          <span class="token number">4</span> <span class="token comment">/* NAVIGATION_ABORTED */</span> <span class="token operator">|</span>
            <span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span> <span class="token operator">|</span>
            <span class="token number">2</span> <span class="token comment">/* NAVIGATION_GUARD_REDIRECT */</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> error<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token function">triggerError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5904\u7406\u9519\u8BEF</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        failure <span class="token operator">=</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> failure<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>navigate \u6267\u884C\u5BFC\u822A\u5B88\u536B\u51FD\u6570</li><li>finalizeNavigation \u6700\u7EC8\u7684\u8DEF\u5F84\u5207\u6362</li></ul><h3 id="navigate" tabindex="-1"><a class="header-anchor" href="#navigate" aria-hidden="true">#</a> navigate</h3><p>\u5B9E\u9645\u4E0A\u662F\u6267\u884C\u8DEF\u7531\u5207\u6362\u8FC7\u7A0B\u4E2D\u7684\u4E00\u7CFB\u5217\u5BFC\u822A\u5B88\u536B\u51FD\u6570</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> guards<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span> <span class="token operator">=</span>
    <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// all components here have been resolved once because we are leaving</span>
  guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
    leavingRecords<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span>
    to<span class="token punctuation">,</span>
    from
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// leavingRecords is already reversed</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> leavingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    record<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> canceledNavigationCheck <span class="token operator">=</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    to<span class="token punctuation">,</span>
    from
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// run the queue of per route beforeRouteLeave guards</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// check global guards beforeEach</span>
        guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// check in components beforeRouteUpdate</span>
        guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
          updatingRecords<span class="token punctuation">,</span>
          <span class="token string">&#39;beforeRouteUpdate&#39;</span><span class="token punctuation">,</span>
          to<span class="token punctuation">,</span>
          from
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> updatingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          record<span class="token punctuation">.</span>updateGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// run the queue of per route beforeEnter guards</span>
        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// check the route beforeEnter</span>
        guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// do not trigger beforeEnter on reused views</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> beforeEnter <span class="token keyword">of</span> record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span>
                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// run the queue of per route beforeEnter guards</span>
        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// NOTE: at this point to.matched is normalized and does not contain any () =&gt; Promise&lt;Component&gt;</span>
        <span class="token comment">// clear existing enterCallbacks, these are added by extractComponentsGuards</span>
        to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>enterCallbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// check in-component beforeRouteEnter</span>
        guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
          enteringRecords<span class="token punctuation">,</span>
          <span class="token string">&#39;beforeRouteEnter&#39;</span><span class="token punctuation">,</span>
          to<span class="token punctuation">,</span>
          from
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// run the queue of per route beforeEnter guards</span>
        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// check global guards beforeResolve</span>
        guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeResolveGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// catch any navigation canceled</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* NAVIGATION_CANCELLED */</span><span class="token punctuation">)</span>
          <span class="token operator">?</span> err
          <span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span><span class="token parameter">guards</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> guards<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> guard</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="finalizenavigation" tabindex="-1"><a class="header-anchor" href="#finalizenavigation" aria-hidden="true">#</a> finalizeNavigation</h3><p>\u8FD9\u91CC\u5B8C\u6210\u771F\u6B63\u7684\u8DEF\u5F84\u5207\u6362</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span><span class="token parameter">toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> error<span class="token punctuation">;</span>
  <span class="token keyword">const</span> isFirstNavigation <span class="token operator">=</span> from <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">!</span>isBrowser <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPush<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>replace <span class="token operator">||</span> isFirstNavigation<span class="token punctuation">)</span>
      routerHistory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
        toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>
        <span class="token function">assign</span><span class="token punctuation">(</span>
          <span class="token punctuation">{</span>
            scroll<span class="token operator">:</span> isFirstNavigation <span class="token operator">&amp;&amp;</span> state <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>scroll<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          data
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> routerHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> toLocation<span class="token punctuation">;</span>
  <span class="token function">handleScroll</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> isFirstNavigation<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4E3B\u8981\u8C03\u53D6\u4E86\u4E0B\u9762\u4E24\u4E2A\u65B9\u6CD5\uFF1A</p><ul><li>routerHistory.push</li><li>routerHistory.replace</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> routerHistory <span class="token operator">=</span> options<span class="token punctuation">.</span>history<span class="token punctuation">;</span>
</code></pre></div><p>routerHistory \u662F history \u4E2D\u7684 routerHistory\uFF0Chistory \u5728 createRouter \u65F6\u4F20\u5165\u3002history \u662F createWebHistory\u3001createWebHashHistory\u3001createMemoryHistory \u521B\u5EFA\u7684\u5BF9\u8C61\u3002</p><h2 id="history-\u7684\u6A21\u5F0F" tabindex="-1"><a class="header-anchor" href="#history-\u7684\u6A21\u5F0F" aria-hidden="true">#</a> history \u7684\u6A21\u5F0F</h2><h3 id="\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5" aria-hidden="true">#</a> \u6E90\u7801\u4E2D\u7684\u65B9\u6CD5</h3><ul><li>createBaseLocation</li><li>createCurrentLocation</li><li>useHistoryListeners</li><li>buildState</li><li>useHistoryStateNavigation <ul><li>changeLocation</li><li>replace</li><li>push</li></ul></li><li>createWebHistory\uFF08export\uFF09</li></ul><div class="custom-container tip"><p class="custom-container-title">\u95EE\u9898</p><p>\u6BCF\u5F53\u6211\u4EEC\u5207\u6362\u8DEF\u7531\u7684\u65F6\u5019\uFF0C\u4F1A\u53D1\u73B0\u6D4F\u89C8\u5668\u7684 URL \u53D1\u751F\u4E86\u53D8\u5316\uFF0C\u4F46\u662F\u9875\u9762\u5374\u6CA1\u6709\u5237\u65B0\uFF0C\u5B83\u662F\u600E\u4E48\u505A\u7684\u5462\uFF1F</p></div><h3 id="createwebhistory" tabindex="-1"><a class="header-anchor" href="#createwebhistory" aria-hidden="true">#</a> createWebHistory</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> historyNavigation <span class="token operator">=</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> historyListeners <span class="token operator">=</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span>
    base<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>replace
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">delta<span class="token punctuation">,</span> triggerListeners <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>triggerListeners<span class="token punctuation">)</span> historyListeners<span class="token punctuation">.</span><span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> routerHistory <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// it&#39;s overridden right after</span>
      location<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      base<span class="token punctuation">,</span>
      go<span class="token punctuation">,</span>
      createHref<span class="token operator">:</span> <span class="token function">createHref</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">,</span>
    historyListeners
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> routerHistory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>routerHistory</code> \u5BF9\u8C61\u800C\u8A00\uFF0C\u5B83\u6709\u4E24\u4E2A\u91CD\u8981\u7684\u4F5C\u7528\uFF0C\u4E00\u4E2A\u662F\u8DEF\u5F84\u7684\u5207\u6362\uFF0C\u4E00\u4E2A\u662F\u76D1\u542C\u8DEF\u5F84\u7684\u53D8\u5316\u3002</p><p>\u8DEF\u5F84\u5207\u6362\u4E3B\u8981\u901A\u8FC7 <code>historyNavigation</code> \u6765\u5B8C\u6210\u7684\uFF0C\u5B83\u662F <code>useHistoryStateNavigation</code> \u51FD\u6570\u7684\u8FD4\u56DE\u503C\u3002</p><h3 id="usehistorystatenavigation" tabindex="-1"><a class="header-anchor" href="#usehistorystatenavigation" aria-hidden="true">#</a> useHistoryStateNavigation</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span><span class="token parameter">base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> location <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>
  <span class="token keyword">let</span> currentLocation <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> historyState <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> history<span class="token punctuation">.</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>historyState<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>
      currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        back<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        current<span class="token operator">:</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
        forward<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        position<span class="token operator">:</span> history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        replaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        scroll<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token boolean">true</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      history<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
      <span class="token function">buildState</span><span class="token punctuation">(</span>
        historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>back<span class="token punctuation">,</span>
        <span class="token comment">// keep back and forward entries but override current position</span>
        to<span class="token punctuation">,</span>
        historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>
        <span class="token boolean">true</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      data<span class="token punctuation">,</span>
      <span class="token punctuation">{</span> position<span class="token operator">:</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>position <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> currentState <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">,</span> history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      forward<span class="token operator">:</span> to<span class="token punctuation">,</span>
      scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">history.replaceState(history.state, &#39;&#39;, url)\\n\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>currentState<span class="token punctuation">.</span>current<span class="token punctuation">,</span> currentState<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">buildState</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> to<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> position<span class="token operator">:</span> currentState<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      data
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    location<span class="token operator">:</span> currentLocation<span class="token punctuation">,</span>
    state<span class="token operator">:</span> historyState<span class="token punctuation">,</span>
    push<span class="token punctuation">,</span>
    replace<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD4\u56DE\u7684 push \u548C replace \u51FD\u6570\uFF0C\u4F1A\u6DFB\u52A0\u7ED9 routerHistory \u5BF9\u8C61\u4E0A\uFF0C\u56E0\u6B64\u5F53\u6211\u4EEC\u8C03\u7528 routerHistory.push \u6216\u8005\u662F routerHistory.replace \u65B9\u6CD5\u7684\u65F6\u5019\u5B9E\u9645\u4E0A\u5C31\u662F\u5728\u6267\u884C\u8FD9\u4E24\u4E2A\u51FD\u6570\u3002</p><p>push \u548C replace \u65B9\u6CD5\u5185\u90E8\u90FD\u662F\u6267\u884C\u4E86 <code>changeLocation</code> \u65B9\u6CD5\uFF0C\u8BE5\u51FD\u6570\u5185\u90E8\u6267\u884C\u4E86\u6D4F\u89C8\u5668\u5E95\u5C42\u7684 <code>history.pushState</code> \u6216\u8005 <code>history.replaceState</code> \u65B9\u6CD5\uFF0C\u4F1A\u5411\u5F53\u524D\u6D4F\u89C8\u5668\u4F1A\u8BDD\u7684\u5386\u53F2\u5806\u6808\u4E2D\u6DFB\u52A0\u4E00\u4E2A\u72B6\u6001\uFF0C\u8FD9\u6837\u5C31\u5728\u4E0D\u5237\u65B0\u9875\u9762\u7684\u60C5\u51B5\u4E0B\u4FEE\u6539\u4E86\u9875\u9762\u7684 URL\u3002</p><h3 id="changelocation" tabindex="-1"><a class="header-anchor" href="#changelocation" aria-hidden="true">#</a> changeLocation</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> hashIndex <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span>
    hashIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
      <span class="token operator">?</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>host <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span>
          <span class="token operator">?</span> base
          <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> to
      <span class="token operator">:</span> <span class="token function">createBaseLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> base <span class="token operator">+</span> to<span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// BROWSER QUIRK</span>
    <span class="token comment">// NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds</span>
    history<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replaceState&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;pushState&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Error with push/replace State&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Force the navigation, this also resets the call count</span>
    location<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replace&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="usehistorylisteners" tabindex="-1"><a class="header-anchor" href="#usehistorylisteners" aria-hidden="true">#</a> useHistoryListeners</h3><p>\u5047\u8BBE\u6211\u4EEC\u70B9\u51FB\u6D4F\u89C8\u5668\u7684\u56DE\u9000\u6309\u94AE\u56DE\u5230\u4E0A\u4E00\u4E2A URL\uFF0C\u8FD9\u9700\u8981\u6062\u590D\u5230\u4E0A\u4E00\u4E2A\u8DEF\u5F84\u4EE5\u53CA\u66F4\u65B0\u8DEF\u7531\u89C6\u56FE\uFF0C\u56E0\u6B64\u6211\u4EEC\u8FD8\u9700\u8981\u76D1\u542C\u8FD9\u79CD history \u53D8\u5316\u7684\u884C\u4E3A\uFF0C\u505A\u4E00\u4E9B\u76F8\u5E94\u7684\u5904\u7406\u3002history \u53D8\u5316\u7684\u76D1\u542C\u4E3B\u8981\u662F\u901A\u8FC7 historyListeners \u6765\u5B8C\u6210\u7684\uFF0C\u5B83\u662F useHistoryListeners \u51FD\u6570\u7684\u8FD4\u56DE\u503C\uFF0C</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> historyState<span class="token punctuation">,</span> currentLocation<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> pauseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">popStateHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> state <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> to <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> from <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">const</span> fromState <span class="token operator">=</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">let</span> delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to<span class="token punctuation">;</span>
      historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pauseState <span class="token operator">&amp;&amp;</span> pauseState <span class="token operator">===</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pauseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      delta <span class="token operator">=</span> fromState <span class="token operator">?</span> state<span class="token punctuation">.</span>position <span class="token operator">-</span> fromState<span class="token punctuation">.</span>position <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">listener</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        delta<span class="token punctuation">,</span>
        type<span class="token operator">:</span> NavigationType<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>
        direction<span class="token operator">:</span> delta
          <span class="token operator">?</span> delta <span class="token operator">&gt;</span> <span class="token number">0</span>
            <span class="token operator">?</span> NavigationDirection<span class="token punctuation">.</span>forward
            <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>back
          <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>unknown<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pauseState <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">teardown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    teardowns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>teardown<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> teardown<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">beforeUnloadListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> window<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>
      <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> teardown <span class="token keyword">of</span> teardowns<span class="token punctuation">)</span> <span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    pauseListeners<span class="token punctuation">,</span>
    listen<span class="token punctuation">,</span>
    destroy<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6570\u5185\u90E8\u8FD8\u76D1\u542C\u4E86\u6D4F\u89C8\u5668\u5E95\u5C42 Window \u7684 popstate \u4E8B\u4EF6\uFF0C\u5F53\u6211\u4EEC\u70B9\u51FB\u6D4F\u89C8\u5668\u7684\u56DE\u9000\u6309\u94AE\u6216\u8005\u662F\u6267\u884C\u4E86 history.back \u65B9\u6CD5\u7684\u65F6\u5019\uFF0C\u4F1A\u89E6\u53D1\u4E8B\u4EF6\u7684\u56DE\u8C03\u51FD\u6570 <code>popStateHandler</code>\uFF0C\u8FDB\u800C\u904D\u5386\u4FA6\u542C\u5668 listeners\uFF0C\u6267\u884C\u6BCF\u4E00\u4E2A\u4FA6\u542C\u5668\u51FD\u6570\u3002</p><p>Vue Router \u662F\u5982\u4F55\u6DFB\u52A0\u8FD9\u4E9B\u4FA6\u542C\u5668\u7684\u5462\uFF1F\u539F\u6765\u5728\u5B89\u88C5\u8DEF\u7531\u7684\u65F6\u5019\uFF0C\u4F1A\u6267\u884C\u4E00\u6B21\u521D\u59CB\u5316\u5BFC\u822A\uFF0C\u6267\u884C\u4E86 push \u65B9\u6CD5\u8FDB\u800C\u6267\u884C\u4E86 <code>finalizeNavigation</code> \u65B9\u6CD5\u3002</p><h3 id="finalizenavigation-1" tabindex="-1"><a class="header-anchor" href="#finalizenavigation-1" aria-hidden="true">#</a> finalizeNavigation</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span><span class="token parameter">toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> replace<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// only consider as push if it&#39;s not the first navigation</span>
  <span class="token keyword">const</span> isFirstNavigation <span class="token operator">=</span> from <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token operator">!</span>isBrowser <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
  <span class="token comment">// change URL only if the user did a push/replace and if it&#39;s not the initial navigation because</span>
  <span class="token comment">// it&#39;s just reflecting the url</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPush<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// on the initial navigation, we want to reuse the scroll position from</span>
    <span class="token comment">// history state if it exists</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>replace <span class="token operator">||</span> isFirstNavigation<span class="token punctuation">)</span>
      routerHistory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
        toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span>
        <span class="token function">assign</span><span class="token punctuation">(</span>
          <span class="token punctuation">{</span>
            scroll<span class="token operator">:</span> isFirstNavigation <span class="token operator">&amp;&amp;</span> state <span class="token operator">&amp;&amp;</span> state<span class="token punctuation">.</span>scroll<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          data
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> routerHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">.</span>fullPath<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// accept current navigation</span>
  currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> toLocation<span class="token punctuation">;</span>
  <span class="token function">handleScroll</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">,</span> isPush<span class="token punctuation">,</span> isFirstNavigation<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5728 finalizeNavigation \u7684\u6700\u540E\uFF0C\u4F1A\u6267\u884C markAsReady \u65B9\u6CD5</p><h3 id="markasready" tabindex="-1"><a class="header-anchor" href="#markasready" aria-hidden="true">#</a> markAsReady</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Mark the router as ready, resolving the promised returned by isReady(). Can
 * only be called once, otherwise does nothing.
 * <span class="token keyword">@param</span> <span class="token parameter">err</span> - optional error
 */</span>
<span class="token keyword">function</span> <span class="token function">markAsReady</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token function">setupListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  readyHandlers
    <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  readyHandlers<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="routerview" tabindex="-1"><a class="header-anchor" href="#routerview" aria-hidden="true">#</a> RouterView</h2><p>\u8DEF\u7531\u7EC4\u4EF6\u5C31\u662F\u901A\u8FC7 RouterView \u7EC4\u4EF6\u6E32\u67D3\u7684</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> RouterView <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    route<span class="token operator">:</span> Object<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">,</span> slots <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warnDeprecatedUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// provide\uFF1Aapp.provide(routeLocationKey, reactive(reactiveRoute));</span>
    <span class="token keyword">const</span> injectedRoute <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// injectedRoute\u662F\u54CD\u5E94\u5F0F\u7684</span>
    <span class="token keyword">const</span> depth <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>viewDepthKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 \u662F\u9ED8\u8BA4\u503C</span>
    <span class="token keyword">const</span> matchedRouteRef <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>route <span class="token operator">||</span> injectedRoute<span class="token punctuation">)</span><span class="token punctuation">.</span>matched<span class="token punctuation">[</span>depth<span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">provide</span><span class="token punctuation">(</span>viewDepthKey<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">provide</span><span class="token punctuation">(</span>matchedRouteKey<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> viewRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>viewRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>instance<span class="token punctuation">,</span> to<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>oldInstance<span class="token punctuation">,</span> from<span class="token punctuation">,</span> oldName<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          to<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> instance<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">&amp;&amp;</span> instance <span class="token operator">===</span> oldInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            to<span class="token punctuation">.</span>leaveGuards <span class="token operator">=</span> from<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">;</span>
            to<span class="token punctuation">.</span>updateGuards <span class="token operator">=</span> from<span class="token punctuation">.</span>updateGuards<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          instance <span class="token operator">&amp;&amp;</span>
          to <span class="token operator">&amp;&amp;</span>
          <span class="token punctuation">(</span><span class="token operator">!</span>from <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>oldInstance<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token punctuation">(</span>to<span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> route <span class="token operator">=</span> props<span class="token punctuation">.</span>route <span class="token operator">||</span> injectedRoute<span class="token punctuation">;</span>
      <span class="token keyword">const</span> matchedRoute <span class="token operator">=</span> matchedRouteRef<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">const</span> ViewComponent <span class="token operator">=</span> matchedRoute <span class="token operator">&amp;&amp;</span> matchedRoute<span class="token punctuation">.</span>components<span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> currentName <span class="token operator">=</span> props<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ViewComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> slots<span class="token punctuation">.</span>default
          <span class="token operator">?</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token operator">:</span> ViewComponent<span class="token punctuation">,</span> route <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> routePropsOption <span class="token operator">=</span> matchedRoute<span class="token punctuation">.</span>props<span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> routeProps <span class="token operator">=</span> routePropsOption
        <span class="token operator">?</span> routePropsOption <span class="token operator">===</span> <span class="token boolean">true</span>
          <span class="token operator">?</span> route<span class="token punctuation">.</span>params
          <span class="token operator">:</span> <span class="token keyword">typeof</span> routePropsOption <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
          <span class="token operator">?</span> <span class="token function">routePropsOption</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token operator">:</span> routePropsOption
        <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token function-variable function">onVnodeUnmounted</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component<span class="token punctuation">.</span>isUnmounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          matchedRoute<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>currentName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
        ViewComponent<span class="token punctuation">,</span>
        <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> routeProps<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          onVnodeUnmounted<span class="token punctuation">,</span>
          ref<span class="token operator">:</span> viewRef<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> slots<span class="token punctuation">.</span>default
        <span class="token operator">?</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token operator">:</span> component<span class="token punctuation">,</span> route <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> component<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>setup \u51FD\u6570\u7684\u8FD4\u56DE\u503C\u662F\u4E00\u4E2A\u51FD\u6570\uFF0C\u90A3\u8FD9\u4E2A\u51FD\u6570\u5C31\u662F\u5B83\u7684\u6E32\u67D3\u51FD\u6570\u3002</li><li>depth \u5C31\u662F\u8868\u793A\u8FD9\u4E2A RouterView \u7684\u5D4C\u5957\u5C42\u7EA7\u3002</li><li>\u54CD\u5E94\u5F0F\u5173\u8054\u903B\u8F91\uFF1A<code>RouterView</code> -&gt; <code>ViewComponent</code> -&gt; <code>matchedRoute &amp;&amp; matchedRoute.components[props.name] </code> -&gt; <code>matchedRouteRef</code> -&gt; <code>(props.route || injectedRoute).matched[depth]</code></li><li>injectedRoute \u5C31\u662F\u6211\u4EEC\u5728\u524D\u9762\u5728\u5B89\u88C5\u8DEF\u7531\u65F6\u5019\uFF0C\u6CE8\u5165\u7684\u54CD\u5E94\u5F0F currentRoute \u5BF9\u8C61\uFF0C\u800C depth \u5C31\u662F\u8868\u793A\u8FD9\u4E2A RouterView \u7684\u5D4C\u5957\u5C42\u7EA7\u3002\u8FD9\u91CC\u7684 injectedRoute \u662F\u54CD\u5E94\u5F0F\u7684\u3002</li><li>RouterView \u7684\u6E32\u67D3\u7684\u8DEF\u7531\u7EC4\u4EF6\u548C\u5F53\u524D\u8DEF\u5F84 currentRoute \u7684 matched \u5BF9\u8C61\u76F8\u5173\uFF0C\u4E5F\u548C RouterView \u81EA\u8EAB\u7684\u5D4C\u5957\u5C42\u7EA7\u76F8\u5173\u3002</li></ul><h3 id="matched-\u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684" tabindex="-1"><a class="header-anchor" href="#matched-\u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684" aria-hidden="true">#</a> matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684</h3><p>\u6211\u4EEC\u6267\u884C <code>createRouter</code> \u51FD\u6570\u521B\u5EFA\u8DEF\u7531\u7684\u65F6\u5019\uFF0C\u5185\u90E8\u4F1A\u6267\u884C\u5982\u4E0B\u4EE3\u7801\u6765\u521B\u5EFA\u4E00\u4E2A matcher \u5BF9\u8C61\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">:</span> RouterOptions</span><span class="token punctuation">)</span><span class="token operator">:</span> Router <span class="token punctuation">{</span>
  <span class="token keyword">const</span> matcher <span class="token operator">=</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>routes<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>createRouterMatcher</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> globalOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> matchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> matcherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  globalOptions <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span> strict<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sensitive<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    globalOptions
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> originalRecord</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isRootAdd <span class="token operator">=</span> <span class="token operator">!</span>originalRecord<span class="token punctuation">;</span>
    <span class="token keyword">let</span> mainNormalizedRecord <span class="token operator">=</span> <span class="token function">normalizeRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mainNormalizedRecord<span class="token punctuation">.</span>aliasOf <span class="token operator">=</span> originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>record<span class="token punctuation">;</span>
    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>globalOptions<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> normalizedRecords <span class="token operator">=</span> <span class="token punctuation">[</span>mainNormalizedRecord<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> matcher<span class="token punctuation">;</span>
    <span class="token keyword">let</span> originalMatcher<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> normalizedRecord <span class="token keyword">of</span> normalizedRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token punctuation">{</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> normalizedRecord<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> parentPath <span class="token operator">=</span> parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
        <span class="token keyword">let</span> connectingSlash <span class="token operator">=</span>
          parentPath<span class="token punctuation">[</span>parentPath<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
        normalizedRecord<span class="token punctuation">.</span>path <span class="token operator">=</span>
          parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token punctuation">(</span>path <span class="token operator">&amp;&amp;</span> connectingSlash <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      matcher <span class="token operator">=</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span>normalizedRecord<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
        <span class="token function">checkMissingParamsInAbsolutePath</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>originalRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        originalRecord<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">{</span>
          <span class="token function">checkSameParams</span><span class="token punctuation">(</span>originalRecord<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        originalMatcher <span class="token operator">=</span> originalMatcher <span class="token operator">||</span> matcher<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>originalMatcher <span class="token operator">!==</span> matcher<span class="token punctuation">)</span> originalMatcher<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRootAdd <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">removeRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;children&#39;</span> <span class="token keyword">in</span> mainNormalizedRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> children <span class="token operator">=</span> mainNormalizedRecord<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">addRoute</span><span class="token punctuation">(</span>
            children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            matcher<span class="token punctuation">,</span>
            originalRecord <span class="token operator">&amp;&amp;</span> originalRecord<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      originalRecord <span class="token operator">=</span> originalRecord <span class="token operator">||</span> matcher<span class="token punctuation">;</span>
      <span class="token function">insertMatcher</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> originalMatcher
      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">removeRoute</span><span class="token punctuation">(</span>originalMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token operator">:</span> noop<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">insertMatcher</span><span class="token punctuation">(</span><span class="token parameter">matcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>
      i <span class="token operator">&lt;</span> matchers<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>
      <span class="token function">comparePathParserScore</span><span class="token punctuation">(</span>matcher<span class="token punctuation">,</span> matchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span>
    <span class="token punctuation">)</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    matchers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isAliasRecord</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">)</span>
      matcherMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u5B9A\u4E49\u5176\u5B83\u4E00\u4E9B\u8F85\u52A9\u51FD\u6570</span>

  <span class="token comment">// \u6DFB\u52A0\u521D\u59CB\u8DEF\u5F84</span>
  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> addRoute<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> removeRoute<span class="token punctuation">,</span> getRoutes<span class="token punctuation">,</span> getRecordMatcher <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>createRouterMatcher</code> \u51FD\u6570\u5185\u90E8\u5B9A\u4E49\u4E86\u4E00\u4E2A <code>matchers</code> \u6570\u7EC4\u548C\u4E00\u4E9B\u8F85\u52A9\u51FD\u6570</p><ul><li>addRoute</li><li>resolve</li><li>removeRoute</li><li>getRoutes</li><li>getRecordMatcher</li></ul><p>\u5728 createRouterMatcher \u51FD\u6570\u7684\u6700\u540E\uFF0C\u4F1A\u904D\u5386 routes \u8DEF\u5F84\u6570\u7EC4\u8C03\u7528 addRoute \u65B9\u6CD5\u6DFB\u52A0\u521D\u59CB\u8DEF\u5F84\u3002\u5728 addRoute \u51FD\u6570\u5185\u90E8\uFF0C\u9996\u5148\u4F1A\u628A route \u5BF9\u8C61\u6807\u51C6\u5316\u6210\u4E00\u4E2A record\uFF0C\u5176\u5B9E\u5C31\u662F\u7ED9\u8DEF\u5F84\u5BF9\u8C61\u6DFB\u52A0\u66F4\u4E30\u5BCC\u7684\u5C5E\u6027\u3002</p><p>\u7136\u540E\u518D\u6267\u884C createRouteRecordMatcher \u51FD\u6570\uFF0C\u4F20\u5165\u6807\u51C6\u5316\u7684 record \u5BF9\u8C61</p><h3 id="createrouterecordmatcher" tabindex="-1"><a class="header-anchor" href="#createrouterecordmatcher" aria-hidden="true">#</a> createRouteRecordMatcher</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRouteRecordMatcher</span><span class="token punctuation">(</span><span class="token parameter">record<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">tokensToParser</span><span class="token punctuation">(</span><span class="token function">tokenizePath</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">const</span> existingKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> parser<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>existingKeys<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found duplicated params with name &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; for path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>record<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Only the last one will be available on &quot;$route.params&quot;.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      existingKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> matcher <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>parser<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    record<span class="token punctuation">,</span>
    parent<span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    alias<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf <span class="token operator">===</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>record<span class="token punctuation">.</span>aliasOf<span class="token punctuation">)</span>
      parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> matcher<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5176\u5B9E createRouteRecordMatcher \u521B\u5EFA\u7684 matcher \u5BF9\u8C61\u4E0D\u4EC5\u4EC5\u62E5\u6709 record \u5C5E\u6027\u6765\u5B58\u50A8 record\uFF0C\u8FD8\u6269\u5C55\u4E86\u4E00\u4E9B\u5176\u4ED6\u5C5E\u6027\uFF0C\u9700\u8981\u6CE8\u610F\uFF0C\u5982\u679C\u5B58\u5728 parent matcher\uFF0C\u90A3\u4E48\u4F1A\u628A\u5F53\u524D matcher \u6DFB\u52A0\u5230 parent.children \u4E2D\u53BB\uFF0C\u8FD9\u6837\u5C31\u7EF4\u62A4\u4E86\u7236\u5B50\u5173\u7CFB\uFF0C\u6784\u9020\u4E86\u6811\u5F62\u7ED3\u6784\u3002</p><div style="${serverRenderer.ssrRenderStyle({ "color": "red" })}"> matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684? </div><p>\u5207\u6362\u8DEF\u5F84\u4F1A\u6267\u884C pushWithRedirect \u65B9\u6CD5\uFF0C\u5185\u90E8\u4F1A\u6267\u884C\u4E00\u6BB5\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetLocation <span class="token operator">=</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> resolve</h3><p>\u6267\u884C resolve \u51FD\u6570\u89E3\u6790\u751F\u6210 targetLocation\uFF0C\u8FD9\u4E2A targetLocation \u6700\u540E\u4E5F\u4F1A\u5728 finalizeNavigation \u7684\u65F6\u5019\u8D4B\u503C currentRoute \u66F4\u65B0\u5F53\u524D\u8DEF\u5F84\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> currentLocation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> matcher<span class="token punctuation">;</span>
  <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> path<span class="token punctuation">;</span>
  <span class="token keyword">let</span> name<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> location <span class="token operator">&amp;&amp;</span> location<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    matcher <span class="token operator">=</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        location<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
      <span class="token function">paramsFromLocation</span><span class="token punctuation">(</span>
        currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span>
        matcher<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>k<span class="token punctuation">.</span>optional<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> k<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      location<span class="token punctuation">.</span>params
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span> <span class="token keyword">in</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    path <span class="token operator">=</span> location<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The Matcher cannot resolve relative paths but received &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Unless you directly called \\\`matcher.resolve(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)\\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    matcher <span class="token operator">=</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      params <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
      name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    matcher <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>name
      <span class="token operator">?</span> matcherMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
      <span class="token operator">:</span> matchers<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matcher<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token function">createRouterError</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment">/* MATCHER_NOT_FOUND */</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        location<span class="token punctuation">,</span>
        currentLocation<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    name <span class="token operator">=</span> matcher<span class="token punctuation">.</span>record<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    params <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> currentLocation<span class="token punctuation">.</span>params<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    path <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> matched <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> parentMatcher <span class="token operator">=</span> matcher<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>parentMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    matched<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>parentMatcher<span class="token punctuation">.</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    parentMatcher <span class="token operator">=</span> parentMatcher<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span>
    path<span class="token punctuation">,</span>
    params<span class="token punctuation">,</span>
    matched<span class="token punctuation">,</span>
    meta<span class="token operator">:</span> <span class="token function">mergeMetaFields</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>resolve \u51FD\u6570\u4E3B\u8981\u505A\u7684\u4E8B\u60C5\u5C31\u662F\u6839\u636E location \u7684 name \u6216\u8005 path \u4ECE\u6211\u4EEC\u524D\u9762\u521B\u5EFA\u7684 matchers \u6570\u7EC4\u4E2D\u627E\u5230\u5BF9\u5E94\u7684 matcher\uFF0C\u7136\u540E\u518D\u987A\u7740 matcher \u7684 parent \u4E00\u76F4\u627E\u5230\u94FE\u8DEF\u4E0A\u6240\u6709\u5339\u914D\u7684 matcher\uFF0C\u7136\u540E\u83B7\u53D6\u5176\u4E2D\u7684 record \u5C5E\u6027\u6784\u9020\u6210\u4E00\u4E2A matched \u6570\u7EC4\uFF0C\u6700\u7EC8\u8FD4\u56DE\u5305\u542B matched \u5C5E\u6027\u7684\u65B0\u7684\u8DEF\u5F84\u5BF9\u8C61\u3002</p><p>\u8FD9\u4E48\u505A\u7684\u76EE\u7684\u5C31\u662F\u8BA9 matched \u6570\u7EC4\u5B8C\u6574\u8BB0\u5F55 record \u8DEF\u5F84\uFF0C\u5B83\u7684\u987A\u5E8F\u548C\u5D4C\u5957\u7684 RouterView \u7EC4\u4EF6\u987A\u5E8F\u4E00\u81F4\uFF0C\u4E5F\u5C31\u662F matched \u6570\u7EC4\u4E2D\u7684\u7B2C n \u4E2A\u5143\u7D20\u5C31\u4EE3\u8868\u7740 RouterView \u5D4C\u5957\u7684\u7B2C n \u5C42\u3002</p><p>\u56E0\u6B64 targetLocation \u548C to \u76F8\u6BD4\uFF0C\u5176\u5B9E\u5C31\u662F\u591A\u4E86\u4E00\u4E2A matched \u5BF9\u8C61\uFF0C\u8FD9\u6837\u518D\u56DE\u5230\u6211\u4EEC\u7684 RouterView \u7EC4\u4EF6\uFF0C\u5C31\u53EF\u4EE5\u4ECE<code>injectedRoute.matched[depth] [props.name]</code>\u4E2D\u62FF\u5230\u5BF9\u5E94\u7684\u7EC4\u4EF6\u5BF9\u8C61\u5B9A\u4E49\uFF0C\u53BB\u6E32\u67D3\u5BF9\u5E94\u7684\u7EC4\u4EF6\u4E86\u3002</p><h2 id="\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0" aria-hidden="true">#</a> \u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&#39;Login&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isAuthenticated<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Login&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\u5BF9\u4E8E\u5BFC\u822A\u5B88\u536B\u800C\u8A00\uFF0C\u7ECF\u8FC7 Promise \u5316\u540E\u6DFB\u52A0\u5230 guards \u6570\u7EC4\u4E2D\uFF0C\u7136\u540E\u518D\u901A\u8FC7 runGuards \u4EE5\u53CA Promise \u7684\u65B9\u5F0F\u94FE\u5F0F\u8C03\u7528\uFF0C\u6700\u7EC8\u4F9D\u6B21\u987A\u5E8F\u6267\u884C\u8FD9\u4E9B\u5BFC\u822A\u5B88\u536B\u3002</p><ul><li><a href="https://blog.csdn.net/weixin_40906515/article/details/120695253" target="_blank" rel="noopener noreferrer">\u662F\u4EC0\u4E48\u4E8B\u8BA9\u5C24\u5927\u5982\u6B64\u751F\u6C14\uFF1F`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$T = _sfc_main$T.setup;
_sfc_main$T.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vueRouter/sourceCode.html.vue");
  return _sfc_setup$T ? _sfc_setup$T(props, ctx) : void 0;
};
var sourceCode_html$2 = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["ssrRender", _sfc_ssrRender$F]]);
var sourceCode_html$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": sourceCode_html$2
});
var _imports_0$2 = "/assets/vuex.804b3f17.png";
const _sfc_main$S = {};
function _sfc_ssrRender$E(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  _push(`<!--[--><h1 id="vuex-\u7B14\u8BB0" tabindex="-1"><a class="header-anchor" href="#vuex-\u7B14\u8BB0" aria-hidden="true">#</a> vuex \u7B14\u8BB0</h1><blockquote><p>Flux \u67B6\u6784\u5C31\u50CF\u773C\u955C\uFF1A\u60A8\u81EA\u4F1A\u77E5\u9053\u4EC0\u4E48\u65F6\u5019\u9700\u8981\u5B83\u3002 \u2014\u2014 Redux \u7684\u4F5C\u8005 Dan Abramov</p></blockquote><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#vuex-\u5173\u7CFB\u56FE" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`vuex \u5173\u7CFB\u56FE`);
      } else {
        return [
          vue.createTextVNode("vuex \u5173\u7CFB\u56FE")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u793A\u4F8B" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u793A\u4F8B`);
      } else {
        return [
          vue.createTextVNode("\u793A\u4F8B")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#form-\u8868\u5355\u95EE\u9898" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`form \u8868\u5355\u95EE\u9898`);
      } else {
        return [
          vue.createTextVNode("form \u8868\u5355\u95EE\u9898")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u5B98\u65B9\u89E3\u51B3" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u5B98\u65B9\u89E3\u51B3`);
      } else {
        return [
          vue.createTextVNode("\u5B98\u65B9\u89E3\u51B3")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u8BA1\u7B97\u5C5E\u6027-set\u3001get-\u65B9\u5F0F" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u8BA1\u7B97\u5C5E\u6027 set\u3001get \u65B9\u5F0F`);
      } else {
        return [
          vue.createTextVNode("\u8BA1\u7B97\u5C5E\u6027 set\u3001get \u65B9\u5F0F")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li></ul></nav><h2 id="vuex-\u5173\u7CFB\u56FE" tabindex="-1"><a class="header-anchor" href="#vuex-\u5173\u7CFB\u56FE" aria-hidden="true">#</a> vuex \u5173\u7CFB\u56FE</h2><p><img${serverRenderer.ssrRenderAttr("src", _imports_0$2)} alt="vuex"></p><h2 id="\u793A\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u793A\u4F8B" aria-hidden="true">#</a> \u793A\u4F8B</h2><p><code>/app.js</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./components/App.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> currency <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./currency&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>/store/index.js</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> createLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> products <span class="token keyword">from</span> <span class="token string">&#39;./modules/products&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> debug <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  modules<span class="token operator">:</span> <span class="token punctuation">{</span>
    products<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  strict<span class="token operator">:</span> debug<span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> debug <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>/store/modules/products.js</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> shop <span class="token keyword">from</span> <span class="token string">&#39;../../api/shop&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// initial state</span>
<span class="token keyword">const</span> <span class="token function-variable function">state</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  all<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// getters</span>
<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// actions</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">getAllProducts</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> products <span class="token operator">=</span> <span class="token keyword">await</span> shop<span class="token punctuation">.</span><span class="token function">getProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;setProducts&#39;</span><span class="token punctuation">,</span> products<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// mutations</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">setProducts</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> products</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>all <span class="token operator">=</span> products<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function">decrementProductInventory</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> product <span class="token operator">=</span> state<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">product</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> product<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    product<span class="token punctuation">.</span>inventory<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  state<span class="token punctuation">,</span>
  getters<span class="token punctuation">,</span>
  actions<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="form-\u8868\u5355\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#form-\u8868\u5355\u95EE\u9898" aria-hidden="true">#</a> form \u8868\u5355\u95EE\u9898</h2><h3 id="\u5B98\u65B9\u89E3\u51B3" tabindex="-1"><a class="header-anchor" href="#\u5B98\u65B9\u89E3\u51B3" aria-hidden="true">#</a> \u5B98\u65B9\u89E3\u51B3</h3><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateMessage<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
computed<span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">message</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>message
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
methods<span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">updateMessage</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;updateMessage&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4E0B\u9762\u662F mutation \u51FD\u6570\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
mutations<span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">updateMessage</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>message <span class="token operator">=</span> message
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="\u53CC\u5411\u7ED1\u5B9A\u7684\u8BA1\u7B97\u5C5E\u6027" tabindex="-1"><a class="header-anchor" href="#\u53CC\u5411\u7ED1\u5B9A\u7684\u8BA1\u7B97\u5C5E\u6027" aria-hidden="true">#</a> \u53CC\u5411\u7ED1\u5B9A\u7684\u8BA1\u7B97\u5C5E\u6027</h4><p>\u4F7F\u7528\u5E26\u6709 setter \u7684\u53CC\u5411\u7ED1\u5B9A\u8BA1\u7B97\u5C5E\u6027</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
computed<span class="token operator">:</span> <span class="token punctuation">{</span>
  message<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>message
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;updateMessage&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u8BA1\u7B97\u5C5E\u6027-set\u3001get-\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u8BA1\u7B97\u5C5E\u6027-set\u3001get-\u65B9\u5F0F" aria-hidden="true">#</a> \u8BA1\u7B97\u5C5E\u6027 set\u3001get \u65B9\u5F0F</h3><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stateValue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  computed<span class="token operator">:</span> <span class="token punctuation">{</span>
    stateValue<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>stateValue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;SET_STATE_VALUE&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u5982\u679C\u6709\u5F88\u591A\u4E2A computed\uFF0C\u53EF\u4EE5\u5199\u6210\u8FD9\u6837</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mapModel</span><span class="token punctuation">(</span><span class="token parameter">names</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">computed<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>computed<span class="token punctuation">,</span>
      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>values<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;setValues&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
computed<span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">mapModel</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4F9D\u7136\u6BD4\u8F83\u7E41\u7410\u3002\u5176\u5B9E\u5728 github vuex \u7684 Issues \u4E2D\u6709\u597D\u51E0\u4E2A\u7C7B\u4F3C\u7684\u95EE\u9898\uFF0C\u4F46\u89E3\u51B3\u65B9\u6848\u4F9D\u7136\u662F\u8FD9\u4E2A\u3002\u6700\u7B80\u5355\u7684\u529E\u6CD5\u5C31\u662F\u5C06 vuex \u8BBE\u7F6E\u6210\u975E\u4E25\u683C\u6A21\u5F0F\uFF0C\u76F4\u63A5\u4FEE\u6539 store \u7684\u503C\uFF0C\u5982\u679C\u8FD9\u6837\u4F7F\u7528\uFF0C\u53EF\u80FD\u4E0D\u7B26\u5408 vuex \u7684\u4E00\u4E9B\u8BBE\u8BA1\u539F\u5219\u3002</p><!--]-->`);
}
const _sfc_setup$S = _sfc_main$S.setup;
_sfc_main$S.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuex/index.html.vue");
  return _sfc_setup$S ? _sfc_setup$S(props, ctx) : void 0;
};
var index_html$i = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["ssrRender", _sfc_ssrRender$E]]);
var index_html$j = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$i
});
const _sfc_main$R = {};
function _sfc_ssrRender$D(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="\u81EA\u5B9A\u4E49-vuex" tabindex="-1"><a class="header-anchor" href="#\u81EA\u5B9A\u4E49-vuex" aria-hidden="true">#</a> \u81EA\u5B9A\u4E49 Vuex</h1><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> useStore <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>createStore</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4F20\u5165\u7684state\u662F\u4E2A\u65B9\u6CD5\uFF0C\u6211\u4EEC\u771F\u6B63\u9700\u8981\u7684\u662F\u8FD4\u56DE\u7684\u7ED3\u679C</span>
    state<span class="token operator">:</span> params<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    mutations<span class="token operator">:</span> params<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>state \u58F0\u660E\u6210\u54CD\u5E94\u5F0F</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// state\u58F0\u660E\u6210\u54CD\u5E94\u5F0F</span>
    state<span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    mutations<span class="token operator">:</span> params<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u589E\u52A0 install \u65B9\u6CD5\uFF0C\u5C06 store \u5B9E\u4F8B\u6CE8\u518C\u5230\u5168\u5C40</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> provide<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        state<span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        mutations<span class="token operator">:</span> params<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span>
        <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;STORE&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>useStore</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u8FD4\u56DEstore\u5B9E\u4F8B</span>
<span class="token keyword">const</span> <span class="token function-variable function">useStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&quot;STORE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>commit \u65B9\u6CD5</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    state<span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    mutations<span class="token operator">:</span> params<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span>
    <span class="token comment">// commit\u7528\u6765\u6267\u884Cmutations\u4E0B\u7684\u65B9\u6CD5</span>
    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token parameter">fun<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// mutations\u4E0B\u7684\u65B9\u6CD5\u63A5\u53D7state\u4F5C\u4E3A\u53C2\u6570</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>fun<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&quot;STORE&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u7B80\u5355\u7248\u672C\u7684 Vuex</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    state<span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    mutations<span class="token operator">:</span> params<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span>
    <span class="token comment">// commit\u7528\u6765\u6267\u884Cmutations\u4E0B\u7684\u65B9\u6CD5</span>
    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token parameter">fun<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// mutations\u4E0B\u7684\u65B9\u6CD5\u63A5\u53D7state\u4F5C\u4E3A\u53C2\u6570</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>fun<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&quot;STORE&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&quot;STORE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> useStore <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$R = _sfc_main$R.setup;
_sfc_main$R.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuex/miniVuex.html.vue");
  return _sfc_setup$R ? _sfc_setup$R(props, ctx) : void 0;
};
var miniVuex_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["ssrRender", _sfc_ssrRender$D]]);
var miniVuex_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": miniVuex_html$1
});
const _sfc_main$Q = {};
function _sfc_ssrRender$C(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="vuex-\u63D2\u4EF6" tabindex="-1"><a class="header-anchor" href="#vuex-\u63D2\u4EF6" aria-hidden="true">#</a> vuex \u63D2\u4EF6</h1><h2 id="\u6301\u4E45\u5316\u5B58\u50A8\u63D2\u4EF6" tabindex="-1"><a class="header-anchor" href="#\u6301\u4E45\u5316\u5B58\u50A8\u63D2\u4EF6" aria-hidden="true">#</a> \u6301\u4E45\u5316\u5B58\u50A8\u63D2\u4EF6</h2><p>saveiInLocal.js</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5982\u679C\u672C\u5730\u5B58\u50A8\u4E86state\uFF0C\u5C31\u628A\u8FD9\u4E2AstateJSON\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u5BF9\u8C61\uFF0C\u66FF\u6362\u5230\u5F53\u524Dstore\u5B9E\u4F8B\u7684state</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    store<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u63D0\u4EA4commit\u63D0\u4EA4mutation\u4E4B\u540E\u6267\u884C\u8FD9\u91CC\uFF0C\u628Astate\u8F6C\u6362\u6210JSON\u5B57\u7B26\u4E32\u50A8\u5B58\u5230localStorage\u7684state\u4E2D</span>
    localStorage<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">,</span>
  getters<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
  actions<span class="token punctuation">,</span>
  modules<span class="token operator">:</span> <span class="token punctuation">{</span>
    user<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>saveiInLocal<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$Q = _sfc_main$Q.setup;
_sfc_main$Q.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuex/plugin.html.vue");
  return _sfc_setup$Q ? _sfc_setup$Q(props, ctx) : void 0;
};
var plugin_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["ssrRender", _sfc_ssrRender$C]]);
var plugin_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": plugin_html$1
});
const _sfc_main$P = {};
function _sfc_ssrRender$B(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="vuex-\u6709\u5173\u7684\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#vuex-\u6709\u5173\u7684\u95EE\u9898" aria-hidden="true">#</a> vuex \u6709\u5173\u7684\u95EE\u9898</h1><h3 id="action-\u548C-mutations" tabindex="-1"><a class="header-anchor" href="#action-\u548C-mutations" aria-hidden="true">#</a> action \u548C mutations</h3><p><a href="https://www.zhihu.com/question/48759748?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=689440301193916416&amp;utm_content=group3_supplementQuestions&amp;utm_campaign=shareopn" target="_blank" rel="noopener noreferrer">vuex \u4E2D\u4E3A\u4EC0\u4E48\u628A\u628A\u5F02\u6B65\u64CD\u4F5C\u5C01\u88C5\u5728 action\uFF0C\u628A\u540C\u6B65\u64CD\u4F5C\u653E\u5728 mutations\uFF1F`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></p><blockquote><p>\u533A\u5206 actions \u548C mutations \u5E76\u4E0D\u662F\u4E3A\u4E86\u89E3\u51B3\u7ADE\u6001\u95EE\u9898\uFF0C\u800C\u662F\u4E3A\u4E86\u80FD\u7528 devtools \u8FFD\u8E2A\u72B6\u6001\u53D8\u5316\u3002\u4E8B\u5B9E\u4E0A\u5728 vuex \u91CC\u9762 actions \u53EA\u662F\u4E00\u4E2A\u67B6\u6784\u6027\u7684\u6982\u5FF5\uFF0C\u5E76\u4E0D\u662F\u5FC5\u987B\u7684\uFF0C\u8BF4\u5230\u5E95\u53EA\u662F\u4E00\u4E2A\u51FD\u6570\uFF0C\u4F60\u5728\u91CC\u9762\u60F3\u5E72\u561B\u90FD\u53EF\u4EE5\uFF0C\u53EA\u8981\u6700\u540E\u89E6\u53D1 mutation \u5C31\u884C\u3002\u5F02\u6B65\u7ADE\u6001\u600E\u4E48\u5904\u7406\u90A3\u662F\u7528\u6237\u81EA\u5DF1\u7684\u4E8B\u60C5\u3002vuex \u771F\u6B63\u9650\u5236\u4F60\u7684\u53EA\u6709 mutation \u5FC5\u987B\u662F\u540C\u6B65\u7684\u8FD9\u4E00\u70B9\uFF08\u5728 redux \u91CC\u9762\u5C31\u597D\u50CF reducer \u5FC5\u987B\u540C\u6B65\u8FD4\u56DE\u4E0B\u4E00\u4E2A\u72B6\u6001\u4E00\u6837\uFF09\u3002\u540C\u6B65\u7684\u610F\u4E49\u5728\u4E8E\u8FD9\u6837\u6BCF\u4E00\u4E2A mutation \u6267\u884C\u5B8C\u6210\u540E\u90FD\u53EF\u4EE5\u5BF9\u5E94\u5230\u4E00\u4E2A\u65B0\u7684\u72B6\u6001\uFF08\u548C reducer \u4E00\u6837\uFF09\uFF0C\u8FD9\u6837 devtools \u5C31\u53EF\u4EE5\u6253\u4E2A snapshot \u5B58\u4E0B\u6765\uFF0C\u7136\u540E\u5C31\u53EF\u4EE5\u968F\u4FBF time-travel \u4E86\u3002\u5982\u679C\u4F60\u5F00\u7740 devtool \u8C03\u7528\u4E00\u4E2A\u5F02\u6B65\u7684 action\uFF0C\u4F60\u53EF\u4EE5\u6E05\u695A\u5730\u770B\u5230\u5B83\u6240\u8C03\u7528\u7684 mutation \u662F\u4F55\u65F6\u88AB\u8BB0\u5F55\u4E0B\u6765\u7684\uFF0C\u5E76\u4E14\u53EF\u4EE5\u7ACB\u523B\u67E5\u770B\u5B83\u4EEC\u5BF9\u5E94\u7684\u72B6\u6001\u3002\u5176\u5B9E\u6211\u6709\u4E2A\u70B9\u5B50\u4E00\u76F4\u6CA1\u65F6\u95F4\u505A\uFF0C\u90A3\u5C31\u662F\u628A\u8BB0\u5F55\u4E0B\u6765\u7684 mutations \u505A\u6210\u7C7B\u4F3C rx-marble \u90A3\u6837\u7684\u65F6\u95F4\u7EBF\u56FE\uFF0C\u5BF9\u4E8E\u7406\u89E3\u5E94\u7528\u7684\u5F02\u6B65\u72B6\u6001\u53D8\u5316\u5F88\u6709\u5E2E\u52A9\u3002</p><p>\u4F5C\u8005\uFF1A\u5C24\u96E8\u6EAA \u94FE\u63A5\uFF1Ahttps://www.zhihu.com/question/48759748/answer/112823337</p></blockquote><h3 id="state-\u5185\u90E8\u652F\u6301\u6A21\u5757\u914D\u7F6E\u548C\u6A21\u5757\u5D4C\u5957-\u5982\u4F55\u5B9E\u73B0\u7684" tabindex="-1"><a class="header-anchor" href="#state-\u5185\u90E8\u652F\u6301\u6A21\u5757\u914D\u7F6E\u548C\u6A21\u5757\u5D4C\u5957-\u5982\u4F55\u5B9E\u73B0\u7684" aria-hidden="true">#</a> state \u5185\u90E8\u652F\u6301\u6A21\u5757\u914D\u7F6E\u548C\u6A21\u5757\u5D4C\u5957\uFF0C\u5982\u4F55\u5B9E\u73B0\u7684\uFF1F</h3><p>\u5728 store \u6784\u9020\u65B9\u6CD5\u4E2D\u6709 makeLocalContext \u65B9\u6CD5\uFF0C\u6240\u6709 module \u90FD\u4F1A\u6709\u4E00\u4E2A local context\uFF0C\u6839\u636E\u914D\u7F6E\u65F6\u7684 path \u8FDB\u884C\u5339\u914D\u3002\u6240\u4EE5\u6267\u884C\u5982 <code>dispatch(&#39;submitOrder&#39;, payload)</code> \u8FD9\u7C7B action \u65F6\uFF0C\u9ED8\u8BA4\u7684\u62FF\u5230\u90FD\u662F module \u7684 local state\uFF0C\u5982\u679C\u8981\u8BBF\u95EE\u6700\u5916\u5C42\u6216\u8005\u662F\u5176\u4ED6 module \u7684 state\uFF0C\u53EA\u80FD\u4ECE rootState \u6309\u7167 path \u8DEF\u5F84\u9010\u6B65\u8FDB\u884C\u8BBF\u95EE\u3002</p><blockquote><p>https://tech.meituan.com/2017/04/27/vuex-code-analysis.html</p></blockquote><h3 id="defineproperty-\u4F55\u65F6\u6267\u884C" tabindex="-1"><a class="header-anchor" href="#defineproperty-\u4F55\u65F6\u6267\u884C" aria-hidden="true">#</a> defineProperty \u4F55\u65F6\u6267\u884C</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Archiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> temperature <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> archive <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;temperature&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> temperature<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      temperature <span class="token operator">=</span> value<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      archive<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> val<span class="token operator">:</span> temperature <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getArchive</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> archive<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> arc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Archiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arc<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arc<span class="token punctuation">.</span>temperature <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arc<span class="token punctuation">.</span>temperature <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// get1</span>
<span class="token comment">// get2</span>
<span class="token comment">// set1</span>
<span class="token comment">// set2</span>
<span class="token comment">// set1</span>
<span class="token comment">// set3</span>
</code></pre></div><p>vuex \u4F7F\u7528 <code>this._committing</code> \u6765\u5224\u65AD\u662F\u5426\u662F\u7531 <code>_withCommit</code> \u89E6\u53D1\u7684</p><h3 id="\u4E3A\u4EC0\u4E48-vuex-store-\u4E2D\u7684\u503C\u9700\u8981\u653E\u5230-computed-\u4E2D" tabindex="-1"><a class="header-anchor" href="#\u4E3A\u4EC0\u4E48-vuex-store-\u4E2D\u7684\u503C\u9700\u8981\u653E\u5230-computed-\u4E2D" aria-hidden="true">#</a> \u4E3A\u4EC0\u4E48 vuex store \u4E2D\u7684\u503C\u9700\u8981\u653E\u5230 computed \u4E2D</h3><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    Clicked: {{ count }} times, count is {{ evenOrOdd }}.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decrement<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>incrementIfOdd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Increment if odd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>incrementAsync<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Increment async<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      count<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span>
      evenOrOdd<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>evenOrOdd<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;decrement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">incrementIfOdd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;incrementIfOdd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">incrementAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;incrementAsync&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u5982\u679C\u5C06 <code>computed(() =&gt; store.state.count)</code> \u76F4\u63A5\u5199\u6210 <code>store.state.count</code>\uFF0C\u70B9\u51FB\u9875\u9762\u65F6\u9875\u9762\u4E0D\u4F1A\u6709\u53D8\u5316\u3002</p><!--]-->`);
}
const _sfc_setup$P = _sfc_main$P.setup;
_sfc_main$P.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuex/q&a.html.vue");
  return _sfc_setup$P ? _sfc_setup$P(props, ctx) : void 0;
};
var q_a_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["ssrRender", _sfc_ssrRender$B]]);
var q_a_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": q_a_html$1
});
const _sfc_main$O = {};
function _sfc_ssrRender$A(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="vuex3-\u6E90\u7801" tabindex="-1"><a class="header-anchor" href="#vuex3-\u6E90\u7801" aria-hidden="true">#</a> vuex3 \u6E90\u7801</h1><p>Vuex \u4F7F\u7528\u6CE8\u5165\u4EE3\u7801\u7684\u65B9\u5F0F\uFF0C\u8C03\u7528\u4E86 applyMixin \u65B9\u6CD5\uFF0Cvuex3 \u8C03\u7528\u7684\u662F Vue.mixin\uFF0C\u5728\u6240\u6709\u7EC4\u4EF6\u7684 beforeCreate \u751F\u547D\u5468\u671F\u6CE8\u5165\u4E86\u8BBE\u7F6E this.$store \u8FD9\u6837\u4E00\u4E2A\u5BF9\u8C61\u3002</p><h2 id="vue-mixin" tabindex="-1"><a class="header-anchor" href="#vue-mixin" aria-hidden="true">#</a> Vue.mixin</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// src/store.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">_Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Vue <span class="token operator">&amp;&amp;</span> _Vue <span class="token operator">===</span> Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Vue <span class="token operator">=</span> _Vue<span class="token punctuation">;</span>
  <span class="token function">applyMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// src/mixins.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> version <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>version<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>version <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> beforeCreate<span class="token operator">:</span> vuexInit <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u517C\u5BB92\u4E4B\u524D\u7684\u7248\u672C</span>
    <span class="token keyword">const</span> _init <span class="token operator">=</span> <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init<span class="token punctuation">;</span>
    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">.</span>init <span class="token operator">=</span> options<span class="token punctuation">.</span>init <span class="token operator">?</span> <span class="token punctuation">[</span>vuexInit<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>init<span class="token punctuation">)</span> <span class="token operator">:</span> vuexInit<span class="token punctuation">;</span>
      <span class="token function">_init</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">vuexInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">;</span>
    <span class="token comment">// store injection</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>store<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span>
        <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>store <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> options<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> options<span class="token punctuation">.</span>store<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>Vue.mixin({ beforeCreate: vuexInit })</code>\uFF0C\u6240\u6709\u7EC4\u4EF6\u4E2D\u90FD\u6CE8\u5165\u4E86 vuexInit\u3002vuexInit \u4E2D<code>this.$store = options.parent.$store</code>\u662F\u5C06$store \u4E00\u5C42\u4E00\u5C42\u7684\u4F20\u9012\u4E0B\u53BB\u3002</p><h2 id="vuex-store" tabindex="-1"><a class="header-anchor" href="#vuex-store" aria-hidden="true">#</a> Vuex.Store</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// src/store.js</span>
<span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    strict <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> options

  <span class="token comment">// \u521D\u59CB\u53D8\u91CF\u8BBE\u7F6E</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// \u662F\u5426\u5728\u8FDB\u884C\u63D0\u4EA4\u72B6\u6001\u6807\u8BC6</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_wrappedGetters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// \u5C01\u88C5\u540E\u7684getters\u96C6\u5408\u5BF9\u8C61</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> 
  <span class="token keyword">this</span><span class="token punctuation">.</span>_modulesNamespaceMap <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_watcherVM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Vue\u7EC4\u4EF6\u7528\u4E8Ewatch\u76D1\u89C6\u53D8\u5316</span>

  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">this</span>

  <span class="token comment">// dispatch\u548Ccommit\u8BBE\u7F6E</span>
  <span class="token comment">// \u5C01\u88C5\u66FF\u6362\u539F\u578B\u4E2D\u7684dispatch\u548Ccommit\u65B9\u6CD5\uFF0C\u5C06this\u6307\u5411\u5F53\u524Dstore\u5BF9\u8C61</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">boundDispatch</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">commit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">boundCommit</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">commit</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

  <span class="token comment">// strict mode</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>strict <span class="token operator">=</span> strict

  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">.</span>state

  <span class="token comment">// init root module.</span>

  <span class="token comment">// this also recursively registers all sub-modules</span>
  <span class="token comment">// and collects all module getters inside this._wrappedGetters</span>
  <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">)</span>

  <span class="token function">resetStoreVM</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>

  <span class="token comment">// apply plugins</span>
  plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">plugin</span> <span class="token operator">=&gt;</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre></div><h2 id="resetstorevm" tabindex="-1"><a class="header-anchor" href="#resetstorevm" aria-hidden="true">#</a> resetStoreVM</h2><p>\u8FDB\u884C store \u7EC4\u4EF6\u7684\u521D\u59CB\u5316\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// src/store.js</span>
<span class="token keyword">function</span> <span class="token function">resetStoreVM</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> state<span class="token punctuation">,</span> hot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>silent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      $$state<span class="token operator">:</span> state<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    computed<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resetStoreVM</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> state<span class="token punctuation">,</span> hot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> oldVm <span class="token operator">=</span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">;</span>

  <span class="token comment">// bind store public getters</span>
  store<span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// reset local getters cache</span>
  store<span class="token punctuation">.</span>_makeLocalGettersCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> wrappedGetters <span class="token operator">=</span> store<span class="token punctuation">.</span>_wrappedGetters<span class="token punctuation">;</span>
  <span class="token keyword">const</span> computed <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5FAA\u73AF\u6240\u6709\u5904\u7406\u8FC7\u7684getters\uFF0C\u5E76\u65B0\u5EFAcomputed\u5BF9\u8C61\u8FDB\u884C\u5B58\u50A8\uFF0C\u901A\u8FC7Object.defineProperty\u65B9\u6CD5\u4E3Agetters\u5BF9\u8C61\u5EFA\u7ACB\u5C5E\u6027\uFF0C\u4F7F\u5F97\u6211\u4EEC\u901A\u8FC7this.$store.getters.xxxgetter\u80FD\u591F\u8BBF\u95EE\u5230\u8BE5getters</span>
  <span class="token function">forEachValue</span><span class="token punctuation">(</span>wrappedGetters<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// use computed to leverage its lazy-caching mechanism</span>
    <span class="token comment">// direct inline function use will lead to closure preserving oldVm.</span>
    <span class="token comment">// using partial to return function with only arguments preserved in closure environment.</span>
    computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>_vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>
      enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// for local getters</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// use a Vue instance to store the state tree</span>
  <span class="token comment">// suppress warnings just in case the user has added</span>
  <span class="token comment">// some funky global mixins</span>
  <span class="token keyword">const</span> silent <span class="token operator">=</span> Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>silent<span class="token punctuation">;</span>
  Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>silent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      $$state<span class="token operator">:</span> state<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    computed<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>silent <span class="token operator">=</span> silent<span class="token punctuation">;</span>

  <span class="token comment">// enable strict mode for new vm</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">enableStrictMode</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// dispatch changes in all subscribed watchers</span>
      <span class="token comment">// to force getter re-evaluation for hot reloading.</span>
      store<span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        oldVm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> oldVm<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>vuex \u7684\u54CD\u5E94\u5F0F\u4E3B\u8981\u4F7F\u7528\u4E86 Vue2 \u7684 data \u548C computed\u3002</p><h2 id="enablestrictmode" tabindex="-1"><a class="header-anchor" href="#enablestrictmode" aria-hidden="true">#</a> enableStrictMode</h2><p>\u8BE5\u65B9\u6CD5\u5BF9 state \u6267\u884C$watch \u4EE5\u7981\u6B62\u4ECE mutation \u5916\u90E8\u4FEE\u6539 state\uFF0C\u53EA\u662F\u4E00\u4E2A\u5BF9 state \u4FEE\u6539\u7684\u7EA6\u675F\u5224\u65AD\uFF0C\u6709\u6027\u80FD\u95EE\u9898\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">enableStrictMode</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span>_vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">.</span>$$state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>
          store<span class="token punctuation">.</span>_committing<span class="token punctuation">,</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">do not mutate vuex store state outside mutation handlers.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sync<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u76F8\u5173\u4EE3\u7801</span>
<span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token parameter">condition<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">_withCommit</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> committing <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_committing<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> committing<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Vuex \u4E2D\u4FEE\u6539 state \u7684\u552F\u4E00\u6E20\u9053\u5C31\u662F\u6267\u884C commit(&#39;xx&#39;, payload) \u65B9\u6CD5\uFF0C\u5176\u5E95\u5C42\u901A\u8FC7\u6267\u884C <code>this._withCommit(fn)</code> \u8BBE\u7F6E <code>_committing</code> \u6807\u5FD7\u53D8\u91CF\u4E3A true\uFF0C\u7136\u540E\u624D\u80FD\u4FEE\u6539 state\uFF0C\u4FEE\u6539\u5B8C\u6BD5\u8FD8\u9700\u8981\u8FD8\u539F<code>_committing</code>\u53D8\u91CF\u3002\u5916\u90E8\u4FEE\u6539\u867D\u7136\u80FD\u591F\u76F4\u63A5\u4FEE\u6539 state\uFF0C\u4F46\u662F\u5E76\u6CA1\u6709\u4FEE\u6539 <code>_committing</code> \u6807\u5FD7\u4F4D\uFF0C\u6240\u4EE5\u53EA\u8981 watch \u4E00\u4E0B state\uFF0Cstate change \u65F6\u5224\u65AD\u662F\u5426 <code>_committing</code> \u503C\u4E3A true\uFF0C\u5373\u53EF\u5224\u65AD\u4FEE\u6539\u7684\u5408\u6CD5\u6027\u3002</p><h2 id="modulecollection" tabindex="-1"><a class="header-anchor" href="#modulecollection" aria-hidden="true">#</a> ModuleCollection</h2><p>ModuleCollection \u4E3B\u8981\u5C06\u4F20\u5165\u7684 options \u5BF9\u8C61\u6574\u4E2A\u6784\u9020\u4E3A\u4E00\u4E2A module \u5BF9\u8C61\uFF0C\u5E76\u5FAA\u73AF\u8C03\u7528 this.register([key], rawModule, false) \u4E3A\u5176\u4E2D\u7684 modules \u5C5E\u6027\u8FDB\u884C\u6A21\u5757\u6CE8\u518C\uFF0C\u4F7F\u5176\u90FD\u6210\u4E3A module \u5BF9\u8C61\uFF0C\u6700\u540E options \u5BF9\u8C61\u88AB\u6784\u9020\u6210\u4E00\u4E2A\u5B8C\u6574\u7684\u7EC4\u4EF6\u6811\u3002</p><p>\u6240\u6709 module \u90FD\u4F1A\u6709\u4E00\u4E2A local context\uFF0C\u6839\u636E\u914D\u7F6E\u65F6\u7684 path \u8FDB\u884C\u5339\u914D\u3002\u6240\u4EE5\u6267\u884C\u5982 <code>dispatch(&#39;submitOrder&#39;, payload)</code> \u8FD9\u7C7B action \u65F6\uFF0C\u9ED8\u8BA4\u7684\u62FF\u5230\u90FD\u662F module \u7684 local state\uFF0C\u5982\u679C\u8981\u8BBF\u95EE\u6700\u5916\u5C42\u6216\u8005\u662F\u5176\u4ED6 module \u7684 state\uFF0C\u53EA\u80FD\u4ECE rootState \u6309\u7167 path \u8DEF\u5F84\u9010\u6B65\u8FDB\u884C\u8BBF\u95EE\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// register nested modules</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">forEachValue</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">rawChildModule<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> rawChildModule<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ModuleCollection</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">rawRootModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// register root module (Vuex.Store options)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rawRootModule<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      module <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> namespace <span class="token operator">+</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>namespaced <span class="token operator">?</span> key <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">rawRootModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> rawRootModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rawModule<span class="token punctuation">,</span> runtime <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token function">assertRawModule</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> rawModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> newModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> newModule<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// register nested modules</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">rawChildModule<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> rawChildModule<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">unregister</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> parent<span class="token punctuation">.</span><span class="token function">hasChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="dispatch" tabindex="-1"><a class="header-anchor" href="#dispatch" aria-hidden="true">#</a> dispatch</h2><p>\u89E6\u53D1 <code>_actions</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">dispatch</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check object-style dispatch</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">,</span>
    payload
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown action type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>before<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in before action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> entry<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span>
    <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">handler</span> <span class="token operator">=&gt;</span> <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> entry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>after<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in after action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in error action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre></div><h2 id="commit" tabindex="-1"><a class="header-anchor" href="#commit" aria-hidden="true">#</a> commit</h2><p>\u89E6\u53D1<code>mutation</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">commit</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check object-style commit</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">,</span>
    payload<span class="token punctuation">,</span>
    options
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    entry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">commitIterator</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>silent
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Silent option has been removed. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token string">&#39;Use the filter functionality in the vue-devtools&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u53C2\u8003\u8D44\u6599\uFF1A</p><ul><li><a href="https://tech.meituan.com/2017/04/27/vuex-code-analysis.html" target="_blank" rel="noopener noreferrer">Vuex \u6846\u67B6\u539F\u7406\u4E0E\u6E90\u7801\u5206\u6790\uFF08vue2\uFF09-\u7F8E\u56E2\u6280\u672F\u56E2\u961F`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://github.com/answershuto/learnVue/blob/master/docs/Vuex%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.MarkDown" target="_blank" rel="noopener noreferrer">Vuex \u6E90\u7801\u89E3\u6790`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://github.com/dwqs/blog/issues/58" target="_blank" rel="noopener noreferrer">Vuex \u6E90\u7801\u5206\u6790 #58`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$O = _sfc_main$O.setup;
_sfc_main$O.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuex/sourceCode_v3.html.vue");
  return _sfc_setup$O ? _sfc_setup$O(props, ctx) : void 0;
};
var sourceCode_v3_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["ssrRender", _sfc_ssrRender$A]]);
var sourceCode_v3_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": sourceCode_v3_html$1
});
var _imports_0$1 = "/assets/moduleCollection.f54da120.png";
var _imports_1 = "/assets/components_provide.89199c09.png";
const _sfc_main$N = {};
function _sfc_ssrRender$z(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="vuex4-\u6E90\u7801\u89E3\u8BFB" tabindex="-1"><a class="header-anchor" href="#vuex4-\u6E90\u7801\u89E3\u8BFB" aria-hidden="true">#</a> vuex4 \u6E90\u7801\u89E3\u8BFB</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u6E90\u7801\u8C03\u8BD5" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u6E90\u7801\u8C03\u8BD5`);
      } else {
        return [
          vue.createTextVNode("\u6E90\u7801\u8C03\u8BD5")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#source-map" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`source-map`);
      } else {
        return [
          vue.createTextVNode("source-map")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#rollup-plugin-buble" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`@rollup/plugin-buble`);
      } else {
        return [
          vue.createTextVNode("@rollup/plugin-buble")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u6E90\u7801\u5165\u53E3" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u6E90\u7801\u5165\u53E3`);
      } else {
        return [
          vue.createTextVNode("\u6E90\u7801\u5165\u53E3")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#store-\u5BF9\u8C61" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`store \u5BF9\u8C61`);
      } else {
        return [
          vue.createTextVNode("store \u5BF9\u8C61")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u5224\u65AD\u73AF\u5883" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u5224\u65AD\u73AF\u5883`);
      } else {
        return [
          vue.createTextVNode("\u5224\u65AD\u73AF\u5883")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u521D\u59CB\u5316\u53D8\u91CF" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u521D\u59CB\u5316\u53D8\u91CF`);
      } else {
        return [
          vue.createTextVNode("\u521D\u59CB\u5316\u53D8\u91CF")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#modulecollection" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`ModuleCollection`);
      } else {
        return [
          vue.createTextVNode("ModuleCollection")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#module" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`Module`);
      } else {
        return [
          vue.createTextVNode("Module")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#installmodule" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`installModule`);
      } else {
        return [
          vue.createTextVNode("installModule")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#resetstorestate" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`resetStoreState`);
      } else {
        return [
          vue.createTextVNode("resetStoreState")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#vue2-\u4E2D-vuex-\u7684\u54CD\u5E94\u5F0F" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`vue2 \u4E2D vuex \u7684\u54CD\u5E94\u5F0F`);
      } else {
        return [
          vue.createTextVNode("vue2 \u4E2D vuex \u7684\u54CD\u5E94\u5F0F")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#install" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`install`);
      } else {
        return [
          vue.createTextVNode("install")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#provide-inject" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`provide / inject`);
      } else {
        return [
          vue.createTextVNode("provide / inject")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#install-\u65B9\u6CD5" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`install \u65B9\u6CD5`);
      } else {
        return [
          vue.createTextVNode("install \u65B9\u6CD5")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#vue-mixin" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`Vue.mixin`);
      } else {
        return [
          vue.createTextVNode("Vue.mixin")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u5DE5\u5177\u65B9\u6CD5" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u5DE5\u5177\u65B9\u6CD5`);
      } else {
        return [
          vue.createTextVNode("\u5DE5\u5177\u65B9\u6CD5")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#enablestrictmode" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`enableStrictMode`);
      } else {
        return [
          vue.createTextVNode("enableStrictMode")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#partial" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`partial`);
      } else {
        return [
          vue.createTextVNode("partial")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#store-\u4E2D\u7684\u4E00\u4E9B-api" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`store \u4E2D\u7684\u4E00\u4E9B API`);
      } else {
        return [
          vue.createTextVNode("store \u4E2D\u7684\u4E00\u4E9B API")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#commit" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`commit`);
      } else {
        return [
          vue.createTextVNode("commit")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#dispatch" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`dispatch`);
      } else {
        return [
          vue.createTextVNode("dispatch")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#plugins" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`plugins`);
      } else {
        return [
          vue.createTextVNode("plugins")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`<ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#genericsubscribe" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`genericSubscribe`);
      } else {
        return [
          vue.createTextVNode("genericSubscribe")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#logger-\u63D2\u4EF6" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`logger \u63D2\u4EF6`);
      } else {
        return [
          vue.createTextVNode("logger \u63D2\u4EF6")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u53C2\u8003\u9605\u8BFB" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u53C2\u8003\u9605\u8BFB`);
      } else {
        return [
          vue.createTextVNode("\u53C2\u8003\u9605\u8BFB")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></nav><h2 id="\u6E90\u7801\u8C03\u8BD5" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801\u8C03\u8BD5" aria-hidden="true">#</a> \u6E90\u7801\u8C03\u8BD5</h2><h3 id="source-map" tabindex="-1"><a class="header-anchor" href="#source-map" aria-hidden="true">#</a> source-map</h3><p>\u5728 <code>examples/webpack.config.js</code> \u4E2D\u52A0 <code>source-map</code> \u6765\u8C03\u8BD5\u6E90\u7801\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  mode<span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  devtool<span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="rollup-plugin-buble" tabindex="-1"><a class="header-anchor" href="#rollup-plugin-buble" aria-hidden="true">#</a> @rollup/plugin-buble</h3><p>\u5C06 ES6 \u4EE3\u7801\u7F16\u8BD1\u6210 ES5,\u53EF\u4EE5\u5C06 <code>rollup.config.js</code> \u4E2D\u7684 buble \u6CE8\u91CA\u6389\u751F\u6210 ES6 \u89C4\u8303\u7684\u4EE3\u7801\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>transpile <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// c.plugins.push(buble())</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6216\u76F4\u63A5\u914D\u7F6E transpile\u3002</p><h2 id="\u6E90\u7801\u5165\u53E3" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801\u5165\u53E3" aria-hidden="true">#</a> \u6E90\u7801\u5165\u53E3</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  version<span class="token operator">:</span> <span class="token string">&#39;__VERSION__&#39;</span><span class="token punctuation">,</span>
  Store<span class="token punctuation">,</span>
  storeKey<span class="token punctuation">,</span>
  createStore<span class="token punctuation">,</span>
  useStore<span class="token punctuation">,</span>
  mapState<span class="token punctuation">,</span>
  mapMutations<span class="token punctuation">,</span>
  mapGetters<span class="token punctuation">,</span>
  mapActions<span class="token punctuation">,</span>
  createNamespacedHelpers<span class="token punctuation">,</span>
  createLogger<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5BFC\u51FA Store \u548C\u5E38\u7528 API\u3002</p><h2 id="store-\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#store-\u5BF9\u8C61" aria-hidden="true">#</a> store \u5BF9\u8C61</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>
        <span class="token comment">// \u5F53\u524D\u73AF\u5883\u662F\u5426\u652F\u6301 Promise</span>
        <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vuex requires a Promise polyfill in this browser.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>
        <span class="token comment">// \u662F\u5426\u662F\u901A\u8FC7 new \u64CD\u4F5C\u7B26\u6765\u521B\u5EFA store \u5BF9\u8C61\u7684</span>
        <span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Store</span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">store must be called with the new operator.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strict <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> devtools <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>

    <span class="token comment">// store internal state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_wrappedGetters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_modulesNamespaceMap <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_makeLocalGettersCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_devtools <span class="token operator">=</span> devtools<span class="token punctuation">;</span>

    <span class="token comment">// bind commit and dispatch to self</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">boundDispatch</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">commit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">boundCommit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">commit</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// strict mode</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>strict <span class="token operator">=</span> strict<span class="token punctuation">;</span>

    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">.</span>state<span class="token punctuation">;</span>

    <span class="token comment">// init root module.</span>
    <span class="token comment">// this also recursively registers all sub-modules</span>
    <span class="token comment">// and collects all module getters inside this._wrappedGetters</span>
    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// initialize the store state, which is responsible for the reactivity</span>
    <span class="token comment">// (also registers _wrappedGetters as computed properties)</span>
    <span class="token function">resetStoreState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// apply plugins</span>
    plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">plugin</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u5224\u65AD\u73AF\u5883" tabindex="-1"><a class="header-anchor" href="#\u5224\u65AD\u73AF\u5883" aria-hidden="true">#</a> \u5224\u65AD\u73AF\u5883</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>
    <span class="token comment">// \u5F53\u524D\u73AF\u5883\u662F\u5426\u652F\u6301 Promise</span>
    <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">,</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vuex requires a Promise polyfill in this browser.</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>
    <span class="token comment">// \u662F\u5426\u662F\u901A\u8FC7 new \u64CD\u4F5C\u7B26\u6765\u521B\u5EFA store \u5BF9\u8C61\u7684</span>
    <span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Store</span><span class="token punctuation">,</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">store must be called with the new operator.</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u62A5\u9519\u4FE1\u606F\u5904\u7406</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token parameter">condition<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u521D\u59CB\u5316\u53D8\u91CF" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316\u53D8\u91CF" aria-hidden="true">#</a> \u521D\u59CB\u5316\u53D8\u91CF</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// store internal state</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_wrappedGetters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// module\u6536\u96C6\u5668</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u6A21\u5757\u547D\u540D\u7A7A\u95F4map</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_modulesNamespaceMap <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_makeLocalGettersCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_devtools <span class="token operator">=</span> devtools<span class="token punctuation">;</span>
</code></pre></div><h3 id="modulecollection" tabindex="-1"><a class="header-anchor" href="#modulecollection" aria-hidden="true">#</a> ModuleCollection</h3><p>\u4F7F\u7528 register \u65B9\u6CD5\u9012\u5F52 modules \u751F\u6210 Module \u6811\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ModuleCollection</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">rawRootModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// register root module (Vuex.Store options)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rawRootModule<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      module <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> namespace <span class="token operator">+</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>namespaced <span class="token operator">?</span> key <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">rawRootModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> rawRootModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rawModule<span class="token punctuation">,</span> runtime <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">assertRawModule</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> rawModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> newModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> newModule<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// register nested modules</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">rawChildModule<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> rawChildModule<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre></div><p><img${serverRenderer.ssrRenderAttr("src", _imports_0$1)} alt="moduleCollection"></p><h3 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h3><p>\u5C06 modules \u7EC4\u88C5\u6210\u6807\u51C6\u5316\u7684 Module \u5BF9\u8C61\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">rawModule<span class="token punctuation">,</span> runtime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>runtime <span class="token operator">=</span> runtime<span class="token punctuation">;</span>
    <span class="token comment">// Store some children item</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Store the origin module object which passed by programmer</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule <span class="token operator">=</span> rawModule<span class="token punctuation">;</span>
    <span class="token keyword">const</span> rawState <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>state<span class="token punctuation">;</span>

    <span class="token comment">// Store the origin module&#39;s state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> rawState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">rawState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> rawState<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">namespaced</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>namespaced<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hasChild</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">rawModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>namespaced <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>namespaced<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">forEachChild</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="installmodule" tabindex="-1"><a class="header-anchor" href="#installmodule" aria-hidden="true">#</a> installModule</h3><p>installModule \u7684\u4F5C\u7528\u4E3B\u8981\u662F\u4E3A module \u52A0\u4E0A namespace \u540D\u5B57\u7A7A\u95F4\uFF08\u5982\u679C\u6709\uFF09\u540E\uFF0C\u6CE8\u518C mutation\u3001action \u4EE5\u53CA \u6536\u96C6\u6240\u6709 module \u7684 getter \u5230 <code>_wrappedGetters</code> \u4E2D\u53BB\uFF0C\u540C\u65F6\u9012\u5F52\u5B89\u88C5\u6240\u6709\u5B50 module\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">,</span> module<span class="token punctuation">,</span> hot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isRoot <span class="token operator">=</span> <span class="token operator">!</span>path<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> namespace <span class="token operator">=</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// register in namespace map</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>namespaced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_modulesNamespaceMap<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> __DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] duplicate namespace </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> for the namespaced module </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>
          <span class="token string">&#39;/&#39;</span>
        <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u6241\u5E73\u5316\u5904\u7406</span>
    store<span class="token punctuation">.</span>_modulesNamespaceMap<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// set state</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u83B7\u53D6\u7236\u7EA7\u7684state</span>
    <span class="token keyword">const</span> parentState <span class="token operator">=</span> <span class="token function">getNestedState</span><span class="token punctuation">(</span>rootState<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> moduleName <span class="token operator">=</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    store<span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>moduleName <span class="token keyword">in</span> parentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] state field &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>moduleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; was overridden by a module with the same name at &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>
              <span class="token string">&#39;.&#39;</span>
            <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      parentState<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> local <span class="token operator">=</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token function">makeLocalContext</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u904D\u5386\u6CE8\u518Cmutation</span>
  module<span class="token punctuation">.</span><span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> namespacedType <span class="token operator">=</span> namespace <span class="token operator">+</span> key<span class="token punctuation">;</span>
    <span class="token function">registerMutation</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> namespacedType<span class="token punctuation">,</span> mutation<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u904D\u5386\u6CE8\u518Caction</span>
  module<span class="token punctuation">.</span><span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> action<span class="token punctuation">.</span>root <span class="token operator">?</span> key <span class="token operator">:</span> namespace <span class="token operator">+</span> key<span class="token punctuation">;</span>
    <span class="token keyword">const</span> handler <span class="token operator">=</span> action<span class="token punctuation">.</span>handler <span class="token operator">||</span> action<span class="token punctuation">;</span>
    <span class="token function">registerAction</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u904D\u5386\u6CE8\u518Cgetter</span>
  module<span class="token punctuation">.</span><span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">getter<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> namespacedType <span class="token operator">=</span> namespace <span class="token operator">+</span> key<span class="token punctuation">;</span>
    <span class="token function">registerGetter</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> namespacedType<span class="token punctuation">,</span> getter<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u9012\u5F52\u5B89\u88C5mudule</span>
  module<span class="token punctuation">.</span><span class="token function">forEachChild</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">installModule</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> hot<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="resetstorestate" tabindex="-1"><a class="header-anchor" href="#resetstorestate" aria-hidden="true">#</a> resetStoreState</h3><p>\u521D\u59CB\u5316 store \u4E2D state, \u4F7F\u7528 reactive \u4F7F state \u6210\u4E3A\u54CD\u5E94\u5F0F\u5BF9\u8C61\u3002vue3 \u7684 reactive \u662F\u53EF\u4EE5\u62FF\u51FA\u6765\u5355\u72EC\u4F7F\u7528\u7684\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resetStoreState</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> state<span class="token punctuation">,</span> hot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> oldState <span class="token operator">=</span> store<span class="token punctuation">.</span>_state<span class="token punctuation">;</span>

  <span class="token comment">// bind store public getters</span>
  store<span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// reset local getters cache</span>
  store<span class="token punctuation">.</span>_makeLocalGettersCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> wrappedGetters <span class="token operator">=</span> store<span class="token punctuation">.</span>_wrappedGetters<span class="token punctuation">;</span>
  <span class="token keyword">const</span> computedObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">forEachValue</span><span class="token punctuation">(</span>wrappedGetters<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// use computed to leverage its lazy-caching mechanism</span>
    <span class="token comment">// direct inline function use will lead to closure preserving oldState.</span>
    <span class="token comment">// using partial to return function with only arguments preserved in closure environment.</span>
    computedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// TODO: use \`computed\` when it&#39;s possible. at the moment we can&#39;t due to</span>
      <span class="token comment">// https://github.com/vuejs/vuex/pull/1883</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> computedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// for local getters</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  store<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> state<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// enable strict mode for new state</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">enableStrictMode</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// dispatch changes in all subscribed watchers</span>
      <span class="token comment">// to force getter re-evaluation for hot reloading.</span>
      store<span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        oldState<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="vue2-\u4E2D-vuex-\u7684\u54CD\u5E94\u5F0F" tabindex="-1"><a class="header-anchor" href="#vue2-\u4E2D-vuex-\u7684\u54CD\u5E94\u5F0F" aria-hidden="true">#</a> vue2 \u4E2D vuex \u7684\u54CD\u5E94\u5F0F</h3><p>\u5728 vue2 \u7684 vuex \u4E2D\u91C7\u7528\u4E86 new \u4E00\u4E2A Vue \u5BF9\u8C61\u6765\u5B9E\u73B0\u6570\u636E\u7684\u54CD\u5E94\u5F0F\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span>_vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span>
    $$state<span class="token operator">:</span> state<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  computed<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> install</h2><p>\u548C vue3 \u548C vue2 \u5728\u5B9E\u73B0 vuex \u65F6\uFF0C\u4E0D\u4E86\u4E0A\u9762\u7684\u54CD\u5E94\u5F0F\u6570\u636E\u5B9E\u73B0\u4E0A\u6709\u5F88\u5927\u533A\u522B\uFF0C\u5728\u6CE8\u5165\u6570\u636E\u4E0A\u4E5F\u6709\u5F88\u5927\u533A\u522B\u3002 vuex4 \u4F7F\u7528 provide / inject \u548C \u5168\u5C40\u7684 $store \u5BF9\u8C61\u3002vuex3 \u4F7F\u7528\u7684\u662F Vue.mixin \u5728 beforeCreate \u4E2D\u6CE8\u5165\u3002</p><h3 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a> provide / inject</h3><p><img${serverRenderer.ssrRenderAttr("src", _imports_1)} alt="vuex"></p><ul><li>\u65E0\u8BBA\u7EC4\u4EF6\u5C42\u6B21\u7ED3\u6784\u6709\u591A\u6DF1\uFF0C\u7236\u7EC4\u4EF6\u90FD\u53EF\u4EE5\u4F5C\u4E3A\u5176\u6240\u6709\u5B50\u7EC4\u4EF6\u7684\u4F9D\u8D56\u63D0\u4F9B\u8005\u3002</li><li>\u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0Cprovide/inject \u7ED1\u5B9A\u5E76\u4E0D\u662F\u54CD\u5E94\u5F0F\u7684\u3002\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7\u4F20\u9012\u4E00\u4E2A ref property \u6216 reactive \u5BF9\u8C61\u7ED9 provide \u6765\u6539\u53D8\u8FD9\u79CD\u884C\u4E3A\u3002</li></ul><h3 id="install-\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#install-\u65B9\u6CD5" aria-hidden="true">#</a> install \u65B9\u6CD5</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">install</span> <span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> injectKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>injectKey <span class="token operator">||</span> storeKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>
</code></pre></div><p>this \u5C31\u662F\u521D\u59CB\u5316\u597D\u7684 Store\uFF0C\u90A3 useStore \u662F\u5982\u4F55\u83B7\u53D6 store \u7684\uFF0C\u4F7F\u7528 inject\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token parameter">key <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> key <span class="token operator">:</span> storeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="vue-mixin" tabindex="-1"><a class="header-anchor" href="#vue-mixin" aria-hidden="true">#</a> Vue.mixin</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// src/mixins.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> version <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>version<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>version <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> beforeCreate<span class="token operator">:</span> vuexInit <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u517C\u5BB92\u4E4B\u524D\u7684\u7248\u672C</span>
    <span class="token keyword">const</span> _init <span class="token operator">=</span> <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init<span class="token punctuation">;</span>
    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">.</span>init <span class="token operator">=</span> options<span class="token punctuation">.</span>init <span class="token operator">?</span> <span class="token punctuation">[</span>vuexInit<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>init<span class="token punctuation">)</span> <span class="token operator">:</span> vuexInit<span class="token punctuation">;</span>
      <span class="token function">_init</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">vuexInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">;</span>
    <span class="token comment">// store injection</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>store<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span>
        <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>store <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> options<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> options<span class="token punctuation">.</span>store<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store <span class="token operator">=</span> options<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>$store<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u901A\u8FC7\u7EC4\u4EF6\u7684 beforeCreate \u94A9\u5B50\u6CE8\u5165 $store\uFF0C\u5728\u7EC4\u4EF6\u4E2D\u76F4\u63A5\u4F7F\u7528 <code>this.$store</code>\u83B7\u53D6</p><h2 id="\u5DE5\u5177\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5DE5\u5177\u65B9\u6CD5" aria-hidden="true">#</a> \u5DE5\u5177\u65B9\u6CD5</h2><p><code>store-util.js</code>\u7684\u4E00\u4E9B\u65B9\u6CD5\uFF1A</p><ul><li>genericSubscribe,</li><li>getNestedState,</li><li>installModule,</li><li>resetStore,</li><li>resetStoreState,</li><li>unifyObjectStyle</li></ul><p>\u4E0A\u9762\u5DF2\u7ECF\u7528\u5230\u51E0\u4E2A\uFF0C\u4E0B\u9762\u518D\u4ECB\u7ECD\u51E0\u4E2A\uFF1A</p><h3 id="enablestrictmode" tabindex="-1"><a class="header-anchor" href="#enablestrictmode" aria-hidden="true">#</a> enableStrictMode</h3><p>\u53EA\u662F\u4E00\u4E2A\u5BF9 state \u4FEE\u6539\u7684\u7EA6\u675F\u63A7\u5236\uFF0C\u63A7\u5236 Vuex \u6267\u884C\u4E25\u683C\u6A21\u5F0F\uFF0C\u4E25\u683C\u6A21\u5F0F\u4E0B\uFF0C\u6240\u6709\u4FEE\u6539 state \u7684\u64CD\u4F5C\u5FC5\u987B\u901A\u8FC7 mutation \u5B9E\u73B0\uFF0C\u5426\u5219\u4F1A\u629B\u51FA\u9519\u8BEF\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">enableStrictMode</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">watch</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>_state<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>
          store<span class="token punctuation">.</span>_committing<span class="token punctuation">,</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">do not mutate vuex store state outside mutation handlers.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> flush<span class="token operator">:</span> <span class="token string">&#39;sync&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5176\u5B9E\u5728 commit,\u6267\u884C mutation \u662F\u8FD9\u6837</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  entry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">commitIterator</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token function">_withCommit</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> committing <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_committing
    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> committing
  <span class="token punctuation">}</span>
</code></pre></div><h3 id="partial" tabindex="-1"><a class="header-anchor" href="#partial" aria-hidden="true">#</a> partial</h3><p>\u4EC5\u4EC5\u662F\u4E3A\u4E86\u751F\u6210\u4E00\u4E2A\u95ED\u5305\u73AF\u5883</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="store-\u4E2D\u7684\u4E00\u4E9B-api" tabindex="-1"><a class="header-anchor" href="#store-\u4E2D\u7684\u4E00\u4E9B-api" aria-hidden="true">#</a> store \u4E2D\u7684\u4E00\u4E9B API</h2><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit" aria-hidden="true">#</a> commit</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">commit</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check object-style commit</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">,</span>
    payload<span class="token punctuation">,</span>
    options
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options<span class="token punctuation">)</span>

  <span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span>
  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    entry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">commitIterator</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    __DEV__ <span class="token operator">&amp;&amp;</span>
    options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>silent
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Silent option has been removed. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
      <span class="token string">&#39;Use the filter functionality in the vue-devtools&#39;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="dispatch" tabindex="-1"><a class="header-anchor" href="#dispatch" aria-hidden="true">#</a> dispatch</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">dispatch</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check object-style dispatch</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">,</span>
    payload
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">)</span>

  <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span>
  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown action type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>before<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in before action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> entry<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span>
    <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">handler</span> <span class="token operator">=&gt;</span> <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> entry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>after<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in after action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in error action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> plugins</h2><p>\u63D2\u4EF6\u673A\u5236\u5176\u5B9E\u5C31\u662F\u5229\u7528\u94A9\u5B50\u51FD\u6570\u8BA2\u9605 store \u4E0A\u7684\u4E00\u4E9B\u4E8B\u4EF6\u3002</p><ul><li>store.subscribe</li><li>store.subscribeAction</li></ul><p>\u8FD9\u4E24\u4E2A\u65B9\u6CD5\u5E95\u5C42\u90FD\u8C03\u7528\u4E86 <code>genericSubscribe</code>\u3002</p><h3 id="genericsubscribe" tabindex="-1"><a class="header-anchor" href="#genericsubscribe" aria-hidden="true">#</a> genericSubscribe</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genericSubscribe</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> subs<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>subs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>prepend <span class="token operator">?</span> subs<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">:</span> subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> i <span class="token operator">=</span> subs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      subs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u91CC\u9762\u7684 subs \u5206\u522B\u662F <code>this._subscribers</code> \u548C <code>this._actionSubscribers</code>\uFF0C\u4ED6\u4EEC\u5206\u522B\u5728 commit() \u548C dispatch() \u4E2D\u89E6\u53D1\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">commit</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u548C<code> this._subscribers</code>\u4E0D\u540C\u7684\u662F\uFF0C<code>this._actionSubscribers</code>\u4E2D\u7684\u94A9\u5B50\u51FD\u6570\u5206\u4E86\u4E24\u4E2A\u9636\u6BB5\uFF1A<code>before</code> \u548C <code>after</code>\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">dispatch</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>before<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// ....</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>after<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="logger-\u63D2\u4EF6" tabindex="-1"><a class="header-anchor" href="#logger-\u63D2\u4EF6" aria-hidden="true">#</a> logger \u63D2\u4EF6</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  collapsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> stateBefore<span class="token punctuation">,</span> stateAfter</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">transformer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">,</span>
  <span class="token function-variable function">mutationTransformer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mut</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> mut<span class="token punctuation">,</span>
  <span class="token function-variable function">actionFilter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">actionTransformer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">act</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> act<span class="token punctuation">,</span>
  logMutations <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  logActions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  logger <span class="token operator">=</span> console<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> prevState <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> logger <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>logMutations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> prevState<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> formattedTime <span class="token operator">=</span> <span class="token function">getFormattedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> formattedMutation <span class="token operator">=</span> <span class="token function">mutationTransformer</span><span class="token punctuation">(</span>mutation<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mutation </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mutation<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formattedTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

          <span class="token function">startMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> message<span class="token punctuation">,</span> collapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&#39;%c prev state&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;color: #9E9E9E; font-weight: bold&#39;</span><span class="token punctuation">,</span>
            <span class="token function">transformer</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&#39;%c mutation&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;color: #03A9F4; font-weight: bold&#39;</span><span class="token punctuation">,</span>
            formattedMutation
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&#39;%c next state&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;color: #4CAF50; font-weight: bold&#39;</span><span class="token punctuation">,</span>
            <span class="token function">transformer</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">endMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        prevState <span class="token operator">=</span> nextState<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>logActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      store<span class="token punctuation">.</span><span class="token function">subscribeAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">actionFilter</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> formattedTime <span class="token operator">=</span> <span class="token function">getFormattedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> formattedAction <span class="token operator">=</span> <span class="token function">actionTransformer</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">action </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>action<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formattedTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

          <span class="token function">startMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> message<span class="token punctuation">,</span> collapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&#39;%c action&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;color: #03A9F4; font-weight: bold&#39;</span><span class="token punctuation">,</span>
            formattedAction
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">endMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u53C2\u8003\u9605\u8BFB" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u9605\u8BFB" aria-hidden="true">#</a> \u53C2\u8003\u9605\u8BFB</h2><ul><li><a href="https://tech.meituan.com/2017/04/27/vuex-code-analysis.html" target="_blank" rel="noopener noreferrer">Vuex \u6846\u67B6\u539F\u7406\u4E0E\u6E90\u7801\u5206\u6790\uFF08vue2\uFF09-\u7F8E\u56E2\u6280\u672F\u56E2\u961F`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://github.com/answershuto/learnVue/blob/master/docs/Vuex%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.MarkDown" target="_blank" rel="noopener noreferrer">Vuex \u6E90\u7801\u89E3\u6790`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://github.com/dwqs/blog/issues/58" target="_blank" rel="noopener noreferrer">Vuex \u6E90\u7801\u5206\u6790 #58`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://zhuanlan.zhihu.com/p/407011168" target="_blank" rel="noopener noreferrer">[\u6E90\u7801\u89E3\u8BFB]\u4E00\u6587\u8BFB\u61C2 Vuex4 \u6E90\u7801`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><!--]-->`);
}
const _sfc_setup$N = _sfc_main$N.setup;
_sfc_main$N.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuex/sourceCode_v4.html.vue");
  return _sfc_setup$N ? _sfc_setup$N(props, ctx) : void 0;
};
var sourceCode_v4_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["ssrRender", _sfc_ssrRender$z]]);
var sourceCode_v4_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": sourceCode_v4_html$1
});
const _sfc_main$M = {};
function _sfc_ssrRender$y(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="vuex-v4-0-2" tabindex="-1"><a class="header-anchor" href="#vuex-v4-0-2" aria-hidden="true">#</a> vuex v4.0.2</h1><p><code>vuex.esm-browser.js</code>\uFF0C\u4EE5\u4E0B\u4EE3\u7801\u6CA1\u6709\u7ECF\u8FC7\u7F16\u8BD1\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">/*!
 * vuex v4.0.2
 * (c) 2021 Evan You
 * @license MIT
 */</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inject<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupDevtoolsPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/devtools-api&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> storeKey <span class="token operator">=</span> <span class="token string">&#39;store&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token parameter">key <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> key <span class="token operator">:</span> storeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Get the first item that pass the test
 * by second argument function
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">list</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">f</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">obj</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">&lt;</span>Object<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> <span class="token parameter">cache</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// just return if obj is immutable value</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// if obj is hit, it is in circular structure</span>
  <span class="token keyword">const</span> hit <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>original <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> hit<span class="token punctuation">.</span>copy<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> copy <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// put the copy into cache at first</span>
  <span class="token comment">// because we want to refer it in recursive deepCopy</span>
  cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    original<span class="token operator">:</span> obj<span class="token punctuation">,</span>
    copy<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    copy<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> copy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * forEach for object
 */</span>
<span class="token keyword">function</span> <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isPromise</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token parameter">condition<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genericSubscribe</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> subs<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>subs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>prepend <span class="token operator">?</span> subs<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">:</span> subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> i <span class="token operator">=</span> subs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      subs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">resetStore</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> hot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span>_actions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  store<span class="token punctuation">.</span>_mutations <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  store<span class="token punctuation">.</span>_wrappedGetters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  store<span class="token punctuation">.</span>_modulesNamespaceMap <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
  <span class="token comment">// init all modules</span>
  <span class="token function">installModule</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// reset state</span>
  <span class="token function">resetStoreState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">,</span> hot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">resetStoreState</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> state<span class="token punctuation">,</span> hot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> oldState <span class="token operator">=</span> store<span class="token punctuation">.</span>_state<span class="token punctuation">;</span>

  <span class="token comment">// bind store public getters</span>
  store<span class="token punctuation">.</span>getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// reset local getters cache</span>
  store<span class="token punctuation">.</span>_makeLocalGettersCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> wrappedGetters <span class="token operator">=</span> store<span class="token punctuation">.</span>_wrappedGetters<span class="token punctuation">;</span>
  <span class="token keyword">const</span> computedObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">forEachValue</span><span class="token punctuation">(</span>wrappedGetters<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// use computed to leverage its lazy-caching mechanism</span>
    <span class="token comment">// direct inline function use will lead to closure preserving oldState.</span>
    <span class="token comment">// using partial to return function with only arguments preserved in closure environment.</span>
    computedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// TODO: use \`computed\` when it&#39;s possible. at the moment we can&#39;t due to</span>
      <span class="token comment">// https://github.com/vuejs/vuex/pull/1883</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> computedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// for local getters</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  store<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> state<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// enable strict mode for new state</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>strict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">enableStrictMode</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// dispatch changes in all subscribed watchers</span>
      <span class="token comment">// to force getter re-evaluation for hot reloading.</span>
      store<span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        oldState<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">,</span> module<span class="token punctuation">,</span> hot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isRoot <span class="token operator">=</span> <span class="token operator">!</span>path<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> namespace <span class="token operator">=</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// register in namespace map</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>namespaced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_modulesNamespaceMap<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] duplicate namespace </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> for the namespaced module </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>
          <span class="token string">&#39;/&#39;</span>
        <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    store<span class="token punctuation">.</span>_modulesNamespaceMap<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// set state</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parentState <span class="token operator">=</span> <span class="token function">getNestedState</span><span class="token punctuation">(</span>rootState<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> moduleName <span class="token operator">=</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    store<span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>moduleName <span class="token keyword">in</span> parentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] state field &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>moduleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; was overridden by a module with the same name at &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>
              <span class="token string">&#39;.&#39;</span>
            <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      parentState<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> local <span class="token operator">=</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token function">makeLocalContext</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  module<span class="token punctuation">.</span><span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> namespacedType <span class="token operator">=</span> namespace <span class="token operator">+</span> key<span class="token punctuation">;</span>
    <span class="token function">registerMutation</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> namespacedType<span class="token punctuation">,</span> mutation<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  module<span class="token punctuation">.</span><span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> type <span class="token operator">=</span> action<span class="token punctuation">.</span>root <span class="token operator">?</span> key <span class="token operator">:</span> namespace <span class="token operator">+</span> key<span class="token punctuation">;</span>
    <span class="token keyword">const</span> handler <span class="token operator">=</span> action<span class="token punctuation">.</span>handler <span class="token operator">||</span> action<span class="token punctuation">;</span>
    <span class="token function">registerAction</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  module<span class="token punctuation">.</span><span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">getter<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> namespacedType <span class="token operator">=</span> namespace <span class="token operator">+</span> key<span class="token punctuation">;</span>
    <span class="token function">registerGetter</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> namespacedType<span class="token punctuation">,</span> getter<span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  module<span class="token punctuation">.</span><span class="token function">forEachChild</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">installModule</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> rootState<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> hot<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */</span>
<span class="token keyword">function</span> <span class="token function">makeLocalContext</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> noNamespace <span class="token operator">=</span> namespace <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> local <span class="token operator">=</span> <span class="token punctuation">{</span>
    dispatch<span class="token operator">:</span> noNamespace
      <span class="token operator">?</span> store<span class="token punctuation">.</span><span class="token function-variable function">dispatch</span>
      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> payload<span class="token punctuation">,</span> options <span class="token punctuation">}</span> <span class="token operator">=</span> args<span class="token punctuation">;</span>
          <span class="token keyword">let</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> args<span class="token punctuation">;</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            type <span class="token operator">=</span> namespace <span class="token operator">+</span> type<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown local action type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, global type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

    commit<span class="token operator">:</span> noNamespace
      <span class="token operator">?</span> store<span class="token punctuation">.</span><span class="token function-variable function">commit</span>
      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> payload<span class="token punctuation">,</span> options <span class="token punctuation">}</span> <span class="token operator">=</span> args<span class="token punctuation">;</span>
          <span class="token keyword">let</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> args<span class="token punctuation">;</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">||</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            type <span class="token operator">=</span> namespace <span class="token operator">+</span> type<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown local mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, global type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>

          store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// getters and state object must be gotten lazily</span>
  <span class="token comment">// because they will be changed by state update</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>local<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    getters<span class="token operator">:</span> <span class="token punctuation">{</span>
      get<span class="token operator">:</span> noNamespace
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function-variable function">getters</span>
        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">makeLocalGetters</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> namespace<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    state<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getNestedState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> local<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">makeLocalGetters</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> namespace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store<span class="token punctuation">.</span>_makeLocalGettersCache<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> gettersProxy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> splitPos <span class="token operator">=</span> namespace<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// skip if the target getter is not match this namespace</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> splitPos<span class="token punctuation">)</span> <span class="token operator">!==</span> namespace<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token comment">// extract local getter type</span>
      <span class="token keyword">const</span> localType <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>splitPos<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Add a port to the getters proxy.</span>
      <span class="token comment">// Define as getter property because</span>
      <span class="token comment">// we do not want to evaluate the getters in this time.</span>
      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>gettersProxy<span class="token punctuation">,</span> localType<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">,</span>
        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    store<span class="token punctuation">.</span>_makeLocalGettersCache<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span> <span class="token operator">=</span> gettersProxy<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> store<span class="token punctuation">.</span>_makeLocalGettersCache<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerMutation</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> local</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> entry <span class="token operator">=</span> store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  entry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">wrappedMutationHandler</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">handler</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> local<span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerAction</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> local</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> entry <span class="token operator">=</span> store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  entry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">wrappedActionHandler</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
      store<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        dispatch<span class="token operator">:</span> local<span class="token punctuation">.</span>dispatch<span class="token punctuation">,</span>
        commit<span class="token operator">:</span> local<span class="token punctuation">.</span>commit<span class="token punctuation">,</span>
        getters<span class="token operator">:</span> local<span class="token punctuation">.</span>getters<span class="token punctuation">,</span>
        state<span class="token operator">:</span> local<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
        rootGetters<span class="token operator">:</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">,</span>
        rootState<span class="token operator">:</span> store<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      payload
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_devtoolHook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        store<span class="token punctuation">.</span>_devtoolHook<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;vuex:error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerGetter</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> rawGetter<span class="token punctuation">,</span> local</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>_wrappedGetters<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] duplicate getter key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  store<span class="token punctuation">.</span>_wrappedGetters<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">wrappedGetter</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">rawGetter</span><span class="token punctuation">(</span>
      local<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token comment">// local state</span>
      local<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> <span class="token comment">// local getters</span>
      store<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token comment">// root state</span>
      store<span class="token punctuation">.</span>getters <span class="token comment">// root getters</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">enableStrictMode</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">watch</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>_state<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>
          store<span class="token punctuation">.</span>_committing<span class="token punctuation">,</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">do not mutate vuex store state outside mutation handlers.</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> flush<span class="token operator">:</span> <span class="token string">&#39;sync&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getNestedState</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options <span class="token operator">=</span> payload<span class="token punctuation">;</span>
    payload <span class="token operator">=</span> type<span class="token punctuation">;</span>
    type <span class="token operator">=</span> type<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>
      <span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">expects string as the type, but found </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">typeof</span> type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">LABEL_VUEX_BINDINGS</span> <span class="token operator">=</span> <span class="token string">&#39;vuex bindings&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">MUTATIONS_LAYER_ID</span> <span class="token operator">=</span> <span class="token string">&#39;vuex:mutations&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">ACTIONS_LAYER_ID</span> <span class="token operator">=</span> <span class="token string">&#39;vuex:actions&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">INSPECTOR_ID</span> <span class="token operator">=</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> actionId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">addDevtools</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setupDevtoolsPlugin</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token string">&#39;org.vuejs.vuex&#39;</span><span class="token punctuation">,</span>
      app<span class="token punctuation">,</span>
      label<span class="token operator">:</span> <span class="token string">&#39;Vuex&#39;</span><span class="token punctuation">,</span>
      homepage<span class="token operator">:</span> <span class="token string">&#39;https://next.vuex.vuejs.org/&#39;</span><span class="token punctuation">,</span>
      logo<span class="token operator">:</span> <span class="token string">&#39;https://vuejs.org/images/icons/favicon-96x96.png&#39;</span><span class="token punctuation">,</span>
      packageName<span class="token operator">:</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">,</span>
      componentStateTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">LABEL_VUEX_BINDINGS</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      api<span class="token punctuation">.</span><span class="token function">addTimelineLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token constant">MUTATIONS_LAYER_ID</span><span class="token punctuation">,</span>
        label<span class="token operator">:</span> <span class="token string">&#39;Vuex Mutations&#39;</span><span class="token punctuation">,</span>
        color<span class="token operator">:</span> <span class="token constant">COLOR_LIME_500</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      api<span class="token punctuation">.</span><span class="token function">addTimelineLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token constant">ACTIONS_LAYER_ID</span><span class="token punctuation">,</span>
        label<span class="token operator">:</span> <span class="token string">&#39;Vuex Actions&#39;</span><span class="token punctuation">,</span>
        color<span class="token operator">:</span> <span class="token constant">COLOR_LIME_500</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      api<span class="token punctuation">.</span><span class="token function">addInspector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token constant">INSPECTOR_ID</span><span class="token punctuation">,</span>
        label<span class="token operator">:</span> <span class="token string">&#39;Vuex&#39;</span><span class="token punctuation">,</span>
        icon<span class="token operator">:</span> <span class="token string">&#39;storage&#39;</span><span class="token punctuation">,</span>
        treeFilterPlaceholder<span class="token operator">:</span> <span class="token string">&#39;Filter stores...&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      api<span class="token punctuation">.</span>on<span class="token punctuation">.</span><span class="token function">getInspectorTree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>app <span class="token operator">===</span> app <span class="token operator">&amp;&amp;</span> payload<span class="token punctuation">.</span>inspectorId <span class="token operator">===</span> <span class="token constant">INSPECTOR_ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">flattenStoreForInspectorTree</span><span class="token punctuation">(</span>
              nodes<span class="token punctuation">,</span>
              store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">,</span>
              payload<span class="token punctuation">.</span>filter<span class="token punctuation">,</span>
              <span class="token string">&#39;&#39;</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            payload<span class="token punctuation">.</span>rootNodes <span class="token operator">=</span> nodes<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            payload<span class="token punctuation">.</span>rootNodes <span class="token operator">=</span> <span class="token punctuation">[</span>
              <span class="token function">formatStoreForInspectorTree</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      api<span class="token punctuation">.</span>on<span class="token punctuation">.</span><span class="token function">getInspectorState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>app <span class="token operator">===</span> app <span class="token operator">&amp;&amp;</span> payload<span class="token punctuation">.</span>inspectorId <span class="token operator">===</span> <span class="token constant">INSPECTOR_ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> modulePath <span class="token operator">=</span> payload<span class="token punctuation">.</span>nodeId<span class="token punctuation">;</span>
          <span class="token function">makeLocalGetters</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> modulePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
          payload<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">formatStoreForInspectorState</span><span class="token punctuation">(</span>
            <span class="token function">getStoreModule</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>_modules<span class="token punctuation">,</span> modulePath<span class="token punctuation">)</span><span class="token punctuation">,</span>
            modulePath <span class="token operator">===</span> <span class="token string">&#39;root&#39;</span>
              <span class="token operator">?</span> store<span class="token punctuation">.</span>getters
              <span class="token operator">:</span> store<span class="token punctuation">.</span>_makeLocalGettersCache<span class="token punctuation">,</span>
            modulePath
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      api<span class="token punctuation">.</span>on<span class="token punctuation">.</span><span class="token function">editInspectorState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">payload</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>app <span class="token operator">===</span> app <span class="token operator">&amp;&amp;</span> payload<span class="token punctuation">.</span>inspectorId <span class="token operator">===</span> <span class="token constant">INSPECTOR_ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> modulePath <span class="token operator">=</span> payload<span class="token punctuation">.</span>nodeId<span class="token punctuation">;</span>
          <span class="token keyword">let</span> path <span class="token operator">=</span> payload<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>modulePath <span class="token operator">!==</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>modulePath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          store<span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            payload<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>_state<span class="token punctuation">.</span>data<span class="token punctuation">,</span> path<span class="token punctuation">,</span> payload<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          data<span class="token punctuation">.</span>payload <span class="token operator">=</span> mutation<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        data<span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>

        api<span class="token punctuation">.</span><span class="token function">notifyComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        api<span class="token punctuation">.</span><span class="token function">sendInspectorTree</span><span class="token punctuation">(</span><span class="token constant">INSPECTOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        api<span class="token punctuation">.</span><span class="token function">sendInspectorState</span><span class="token punctuation">(</span><span class="token constant">INSPECTOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        api<span class="token punctuation">.</span><span class="token function">addTimelineEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          layerId<span class="token operator">:</span> <span class="token constant">MUTATIONS_LAYER_ID</span><span class="token punctuation">,</span>
          event<span class="token operator">:</span> <span class="token punctuation">{</span>
            time<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            title<span class="token operator">:</span> mutation<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
            data<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      store<span class="token punctuation">.</span><span class="token function">subscribeAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token function-variable function">before</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">.</span>payload <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          action<span class="token punctuation">.</span>_id <span class="token operator">=</span> actionId<span class="token operator">++</span><span class="token punctuation">;</span>
          action<span class="token punctuation">.</span>_time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          data<span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>

          api<span class="token punctuation">.</span><span class="token function">addTimelineEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            layerId<span class="token operator">:</span> <span class="token constant">ACTIONS_LAYER_ID</span><span class="token punctuation">,</span>
            event<span class="token operator">:</span> <span class="token punctuation">{</span>
              time<span class="token operator">:</span> action<span class="token punctuation">.</span>_time<span class="token punctuation">,</span>
              title<span class="token operator">:</span> action<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
              groupId<span class="token operator">:</span> action<span class="token punctuation">.</span>_id<span class="token punctuation">,</span>
              subtitle<span class="token operator">:</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span>
              data<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">after</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> duration <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> action<span class="token punctuation">.</span>_time<span class="token punctuation">;</span>
          data<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token punctuation">{</span>
            _custom<span class="token operator">:</span> <span class="token punctuation">{</span>
              type<span class="token operator">:</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">,</span>
              display<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>duration<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
              tooltip<span class="token operator">:</span> <span class="token string">&#39;Action duration&#39;</span><span class="token punctuation">,</span>
              value<span class="token operator">:</span> duration<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">.</span>payload <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          data<span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>

          api<span class="token punctuation">.</span><span class="token function">addTimelineEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            layerId<span class="token operator">:</span> <span class="token constant">ACTIONS_LAYER_ID</span><span class="token punctuation">,</span>
            event<span class="token operator">:</span> <span class="token punctuation">{</span>
              time<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              title<span class="token operator">:</span> action<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
              groupId<span class="token operator">:</span> action<span class="token punctuation">.</span>_id<span class="token punctuation">,</span>
              subtitle<span class="token operator">:</span> <span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span>
              data<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// extracted from tailwind palette</span>
<span class="token keyword">const</span> <span class="token constant">COLOR_LIME_500</span> <span class="token operator">=</span> <span class="token number">0x84cc16</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">COLOR_DARK</span> <span class="token operator">=</span> <span class="token number">0x666666</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">COLOR_WHITE</span> <span class="token operator">=</span> <span class="token number">0xffffff</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">TAG_NAMESPACED</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  label<span class="token operator">:</span> <span class="token string">&#39;namespaced&#39;</span><span class="token punctuation">,</span>
  textColor<span class="token operator">:</span> <span class="token constant">COLOR_WHITE</span><span class="token punctuation">,</span>
  backgroundColor<span class="token operator">:</span> <span class="token constant">COLOR_DARK</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">path</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">extractNameFromPath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> path <span class="token operator">&amp;&amp;</span> path <span class="token operator">!==</span> <span class="token string">&#39;root&#39;</span> <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">module</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/devtools-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CustomInspectorNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">formatStoreForInspectorTree</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> path <span class="token operator">||</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// all modules end with a \`/\`, we want the last segment only</span>
    <span class="token comment">// cart/ -&gt; cart</span>
    <span class="token comment">// nested/cart/ -&gt; cart</span>
    label<span class="token operator">:</span> <span class="token function">extractNameFromPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
    tags<span class="token operator">:</span> module<span class="token punctuation">.</span>namespaced <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">TAG_NAMESPACED</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>_children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">moduleName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token function">formatStoreForInspectorTree</span><span class="token punctuation">(</span>
        module<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span><span class="token punctuation">,</span>
        path <span class="token operator">+</span> moduleName <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/devtools-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CustomInspectorNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">result</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">module</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">filter</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">path</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">flattenStoreForInspectorTree</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> module<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      id<span class="token operator">:</span> path <span class="token operator">||</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
      label<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">?</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> path <span class="token operator">||</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">,</span>
      tags<span class="token operator">:</span> module<span class="token punctuation">.</span>namespaced <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">TAG_NAMESPACED</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>_children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">moduleName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">flattenStoreForInspectorTree</span><span class="token punctuation">(</span>
      result<span class="token punctuation">,</span>
      module<span class="token punctuation">.</span>_children<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span><span class="token punctuation">,</span>
      filter<span class="token punctuation">,</span>
      path <span class="token operator">+</span> moduleName <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">module</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/devtools-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CustomInspectorState<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">formatStoreForInspectorState</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  getters <span class="token operator">=</span> path <span class="token operator">===</span> <span class="token string">&#39;root&#39;</span> <span class="token operator">?</span> getters <span class="token operator">:</span> getters<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> gettersKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> storeState <span class="token operator">=</span> <span class="token punctuation">{</span>
    state<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      key<span class="token punctuation">,</span>
      editable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      value<span class="token operator">:</span> module<span class="token punctuation">.</span>state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>gettersKeys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token function">transformPathsToObjectTree</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    storeState<span class="token punctuation">.</span>getters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      key<span class="token operator">:</span> key<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">extractNameFromPath</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> key<span class="token punctuation">,</span>
      editable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token function">canThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> tree<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> storeState<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">transformPathsToObjectTree</span><span class="token punctuation">(</span><span class="token parameter">getters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> path <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> target <span class="token operator">=</span> result<span class="token punctuation">;</span>
      <span class="token keyword">const</span> leafKey <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          target<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            _custom<span class="token operator">:</span> <span class="token punctuation">{</span>
              value<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
              display<span class="token operator">:</span> p<span class="token punctuation">,</span>
              tooltip<span class="token operator">:</span> <span class="token string">&#39;Module&#39;</span><span class="token punctuation">,</span>
              abstract<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        target <span class="token operator">=</span> target<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>_custom<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      target<span class="token punctuation">[</span>leafKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">canThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> getters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">canThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> getters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getStoreModule</span><span class="token punctuation">(</span><span class="token parameter">moduleMap<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> names <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> child <span class="token operator">=</span> module<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Missing module &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>moduleName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; for path &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> i <span class="token operator">===</span> names<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> child <span class="token operator">:</span> child<span class="token punctuation">.</span>_children<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    path <span class="token operator">===</span> <span class="token string">&#39;root&#39;</span> <span class="token operator">?</span> moduleMap <span class="token operator">:</span> moduleMap<span class="token punctuation">.</span>root<span class="token punctuation">.</span>_children
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">canThrow</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> e<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Base data struct for store&#39;s module, package with some attribute and method</span>
<span class="token keyword">class</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">rawModule<span class="token punctuation">,</span> runtime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>runtime <span class="token operator">=</span> runtime<span class="token punctuation">;</span>
    <span class="token comment">// Store some children item</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_children <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Store the origin module object which passed by programmer</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule <span class="token operator">=</span> rawModule<span class="token punctuation">;</span>
    <span class="token keyword">const</span> rawState <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>state<span class="token punctuation">;</span>

    <span class="token comment">// Store the origin module&#39;s state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> rawState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">rawState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> rawState<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">namespaced</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>namespaced<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hasChild</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">rawModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>namespaced <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>namespaced<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters <span class="token operator">=</span> rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">forEachChild</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_children<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">forEachGetter</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>getters<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">forEachAction</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>actions<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">forEachMutation</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rawModule<span class="token punctuation">.</span>mutations<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ModuleCollection</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">rawRootModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// register root module (Vuex.Store options)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rawRootModule<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      module <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> namespace <span class="token operator">+</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>namespaced <span class="token operator">?</span> key <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">rawRootModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> rawRootModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rawModule<span class="token punctuation">,</span> runtime <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token function">assertRawModule</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> rawModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> newModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> newModule<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// register nested modules</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">forEachValue</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">rawChildModule<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> rawChildModule<span class="token punctuation">,</span> runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">unregister</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> child <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] trying to unregister module &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;, which is </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">not registered</span><span class="token template-punctuation string">\`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>runtime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> parent<span class="token punctuation">.</span><span class="token function">hasChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> targetModule<span class="token punctuation">,</span> newModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">{</span>
    <span class="token function">assertRawModule</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> newModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// update target module</span>
  targetModule<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>newModule<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// update nested modules</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> newModule<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>targetModule<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] trying to add a new module &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39; on hot reloading, </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
              <span class="token string">&#39;manual reload is needed&#39;</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">update</span><span class="token punctuation">(</span>
        path<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>
        targetModule<span class="token punctuation">.</span><span class="token function">getChild</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>
        newModule<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> functionAssert <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">assert</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span>
  expected<span class="token operator">:</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> objectAssert <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">assert</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span>
    <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value<span class="token punctuation">.</span>handler <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  expected<span class="token operator">:</span> <span class="token string">&#39;function or object with &quot;handler&quot; function&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> assertTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
  getters<span class="token operator">:</span> functionAssert<span class="token punctuation">,</span>
  mutations<span class="token operator">:</span> functionAssert<span class="token punctuation">,</span>
  actions<span class="token operator">:</span> objectAssert<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">assertRawModule</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rawModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>assertTypes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rawModule<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> assertOptions <span class="token operator">=</span> assertTypes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">forEachValue</span><span class="token punctuation">(</span>rawModule<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>
        assertOptions<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">makeAssertionMessage</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> key<span class="token punctuation">,</span> type<span class="token punctuation">,</span> value<span class="token punctuation">,</span> assertOptions<span class="token punctuation">.</span>expected<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">makeAssertionMessage</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> key<span class="token punctuation">,</span> type<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> should be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>expected<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> but &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buf <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> in module &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  buf <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> buf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>
        <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vuex requires a Promise polyfill in this browser.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>
        <span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Store</span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">store must be called with the new operator.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strict <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> devtools <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>

    <span class="token comment">// store internal state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_wrappedGetters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_modulesNamespaceMap <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_makeLocalGettersCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_devtools <span class="token operator">=</span> devtools<span class="token punctuation">;</span>

    <span class="token comment">// bind commit and dispatch to self</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">boundDispatch</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">commit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">boundCommit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">commit</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// strict mode</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>strict <span class="token operator">=</span> strict<span class="token punctuation">;</span>

    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">.</span>state<span class="token punctuation">;</span>

    <span class="token comment">// init root module.</span>
    <span class="token comment">// this also recursively registers all sub-modules</span>
    <span class="token comment">// and collects all module getters inside this._wrappedGetters</span>
    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// initialize the store state, which is responsible for the reactivity</span>
    <span class="token comment">// (also registers _wrappedGetters as computed properties)</span>
    <span class="token function">resetStoreState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// apply plugins</span>
    plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">plugin</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> injectKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>injectKey <span class="token operator">||</span> storeKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> useDevtools <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_devtools <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_devtools <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>useDevtools<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">addDevtools</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_state<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">set</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>
        <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">use store.replaceState() to explicit replace store state.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">commit</span><span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// check object-style commit</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>
      _type<span class="token punctuation">,</span>
      _payload<span class="token punctuation">,</span>
      _options
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      entry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">commitIterator</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>silent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Silent option has been removed. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token string">&#39;Use the filter functionality in the vue-devtools&#39;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">_type<span class="token punctuation">,</span> _payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// check object-style dispatch</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown action type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
        <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>before<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in before action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span>
      entry<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span>
        <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> entry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>after<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in after action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers
              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] error in error action subscribers: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">genericSubscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">subscribeAction</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span> before<span class="token operator">:</span> fn <span class="token punctuation">}</span> <span class="token operator">:</span> fn<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">genericSubscribe</span><span class="token punctuation">(</span>subs<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token parameter">getter<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>
        <span class="token keyword">typeof</span> getter <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">store.watch only accepts a function.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getters<span class="token punctuation">)</span><span class="token punctuation">,</span>
      cb<span class="token punctuation">,</span>
      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_state<span class="token punctuation">.</span>data <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> rawModule<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> path <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">module path must be a string or an Array.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>
        path<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token string">&#39;cannot register the root module by using registerModule.&#39;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> rawModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">installModule</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span>
      path<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
      options<span class="token punctuation">.</span>preserveState
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// reset store to update getters...</span>
    <span class="token function">resetStoreState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">unregisterModule</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> path <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">module path must be a string or an Array.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> parentState <span class="token operator">=</span> <span class="token function">getNestedState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">delete</span> parentState<span class="token punctuation">[</span>path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resetStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hasModule</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> path <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">module path must be a string or an Array.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">isRegistered</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hotUpdate</span><span class="token punctuation">(</span><span class="token parameter">newOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>newOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resetStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> committing <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_committing<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> committing<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Reduce the code which written in Vue.js for getting the state.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">namespace</span><span class="token punctuation">]</span></span> - Module&#39;s namespace
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token operator">|</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">states</span> # Object&#39;s item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> mapState <span class="token operator">=</span> <span class="token function">normalizeNamespace</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> states</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidMap</span><span class="token punctuation">(</span>states<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
      <span class="token string">&#39;[vuex] mapState: mapper parameter must be either an Array or an Object&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">normalizeMap</span><span class="token punctuation">(</span>states<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> val <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">mappedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
      <span class="token keyword">let</span> getters <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token function">getModuleByNamespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">,</span> <span class="token string">&#39;mapState&#39;</span><span class="token punctuation">,</span> namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        state <span class="token operator">=</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
        getters <span class="token operator">=</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span>getters<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
        <span class="token operator">?</span> <span class="token function">val</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> getters<span class="token punctuation">)</span>
        <span class="token operator">:</span> state<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// mark vuex getter for devtools</span>
    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>vuex <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Reduce the code which written in Vue.js for committing the mutation
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">namespace</span><span class="token punctuation">]</span></span> - Module&#39;s namespace
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token operator">|</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">mutations</span> # Object&#39;s item can be a function which accept \`commit\` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> mapMutations <span class="token operator">=</span> <span class="token function">normalizeNamespace</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> mutations</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidMap</span><span class="token punctuation">(</span>mutations<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
      <span class="token string">&#39;[vuex] mapMutations: mapper parameter must be either an Array or an Object&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">normalizeMap</span><span class="token punctuation">(</span>mutations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> val <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">mappedMutation</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Get the commit method from store</span>
      <span class="token keyword">let</span> commit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>commit<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token function">getModuleByNamespace</span><span class="token punctuation">(</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">,</span>
          <span class="token string">&#39;mapMutations&#39;</span><span class="token punctuation">,</span>
          namespace
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        commit <span class="token operator">=</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span>commit<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
        <span class="token operator">?</span> <span class="token function">val</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">commit</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">,</span> <span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Reduce the code which written in Vue.js for getting the getters
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">namespace</span><span class="token punctuation">]</span></span> - Module&#39;s namespace
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token operator">|</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">getters</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> mapGetters <span class="token operator">=</span> <span class="token function">normalizeNamespace</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidMap</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
      <span class="token string">&#39;[vuex] mapGetters: mapper parameter must be either an Array or an Object&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">normalizeMap</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> val <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// The namespace has been mutated by normalizeNamespace</span>
    val <span class="token operator">=</span> namespace <span class="token operator">+</span> val<span class="token punctuation">;</span>
    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">mappedGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        namespace <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span><span class="token function">getModuleByNamespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">,</span> <span class="token string">&#39;mapGetters&#39;</span><span class="token punctuation">,</span> namespace<span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>val <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] unknown getter: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// mark vuex getter for devtools</span>
    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>vuex <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Reduce the code which written in Vue.js for dispatch the action
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">namespace</span><span class="token punctuation">]</span></span> - Module&#39;s namespace
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token operator">|</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">actions</span> # Object&#39;s item can be a function which accept \`dispatch\` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> mapActions <span class="token operator">=</span> <span class="token function">normalizeNamespace</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> actions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidMap</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
      <span class="token string">&#39;[vuex] mapActions: mapper parameter must be either an Array or an Object&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">normalizeMap</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> val <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">mappedAction</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// get dispatch function from store</span>
      <span class="token keyword">let</span> dispatch <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token function">getModuleByNamespace</span><span class="token punctuation">(</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">,</span>
          <span class="token string">&#39;mapActions&#39;</span><span class="token punctuation">,</span>
          namespace
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dispatch <span class="token operator">=</span> module<span class="token punctuation">.</span>context<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
        <span class="token operator">?</span> <span class="token function">val</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dispatch<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">dispatch</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">,</span> <span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">namespace</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">createNamespacedHelpers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">namespace</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  mapState<span class="token operator">:</span> <span class="token function">mapState</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> namespace<span class="token punctuation">)</span><span class="token punctuation">,</span>
  mapGetters<span class="token operator">:</span> <span class="token function">mapGetters</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> namespace<span class="token punctuation">)</span><span class="token punctuation">,</span>
  mapMutations<span class="token operator">:</span> <span class="token function">mapMutations</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> namespace<span class="token punctuation">)</span><span class="token punctuation">,</span>
  mapActions<span class="token operator">:</span> <span class="token function">mapActions</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> namespace<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) =&gt; [ <span class="token punctuation">{</span> key: 1, val: 1 <span class="token punctuation">}</span>, <span class="token punctuation">{</span> key: 2, val: 2 <span class="token punctuation">}</span>, <span class="token punctuation">{</span> key: 3, val: 3 <span class="token punctuation">}</span> ]
 * normalizeMap(<span class="token punctuation">{</span>a: 1, b: 2, c: 3<span class="token punctuation">}</span>) =&gt; [ <span class="token punctuation">{</span> key: &#39;a&#39;, val: 1 <span class="token punctuation">}</span>, <span class="token punctuation">{</span> key: &#39;b&#39;, val: 2 <span class="token punctuation">}</span>, <span class="token punctuation">{</span> key: &#39;c&#39;, val: 3 <span class="token punctuation">}</span> ]
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token operator">|</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">map</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">normalizeMap</span><span class="token punctuation">(</span><span class="token parameter">map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValidMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>
    <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> val<span class="token operator">:</span> key <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> val<span class="token operator">:</span> map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Validate whether given map is valid or not
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">map</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">isValidMap</span><span class="token punctuation">(</span><span class="token parameter">map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isObject</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param&#39;s function will handle the new namespace and the map.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">fn</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">normalizeNamespace</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">namespace<span class="token punctuation">,</span> map</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> namespace <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      map <span class="token operator">=</span> namespace<span class="token punctuation">;</span>
      namespace <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      namespace <span class="token operator">+=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">store</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">helper</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">namespace</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">getModuleByNamespace</span><span class="token punctuation">(</span><span class="token parameter">store<span class="token punctuation">,</span> helper<span class="token punctuation">,</span> namespace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> module <span class="token operator">=</span> store<span class="token punctuation">.</span>_modulesNamespaceMap<span class="token punctuation">[</span>namespace<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[vuex] module namespace not found in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>helper<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(): </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> module<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Credits: borrowed code from fcomb/redux-logger</span>

<span class="token keyword">function</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  collapsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> stateBefore<span class="token punctuation">,</span> stateAfter</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">transformer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">,</span>
  <span class="token function-variable function">mutationTransformer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mut</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> mut<span class="token punctuation">,</span>
  <span class="token function-variable function">actionFilter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">actionTransformer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">act</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> act<span class="token punctuation">,</span>
  logMutations <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  logActions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  logger <span class="token operator">=</span> console<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> prevState <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> logger <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>logMutations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> prevState<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> formattedTime <span class="token operator">=</span> <span class="token function">getFormattedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> formattedMutation <span class="token operator">=</span> <span class="token function">mutationTransformer</span><span class="token punctuation">(</span>mutation<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mutation </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mutation<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formattedTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

          <span class="token function">startMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> message<span class="token punctuation">,</span> collapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&#39;%c prev state&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;color: #9E9E9E; font-weight: bold&#39;</span><span class="token punctuation">,</span>
            <span class="token function">transformer</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&#39;%c mutation&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;color: #03A9F4; font-weight: bold&#39;</span><span class="token punctuation">,</span>
            formattedMutation
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&#39;%c next state&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;color: #4CAF50; font-weight: bold&#39;</span><span class="token punctuation">,</span>
            <span class="token function">transformer</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">endMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        prevState <span class="token operator">=</span> nextState<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>logActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      store<span class="token punctuation">.</span><span class="token function">subscribeAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">actionFilter</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> formattedTime <span class="token operator">=</span> <span class="token function">getFormattedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> formattedAction <span class="token operator">=</span> <span class="token function">actionTransformer</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">action </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>action<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>formattedTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

          <span class="token function">startMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> message<span class="token punctuation">,</span> collapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
          logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&#39;%c action&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;color: #03A9F4; font-weight: bold&#39;</span><span class="token punctuation">,</span>
            formattedAction
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">endMessage</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">startMessage</span><span class="token punctuation">(</span><span class="token parameter">logger<span class="token punctuation">,</span> message<span class="token punctuation">,</span> collapsed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> startMessage <span class="token operator">=</span> collapsed <span class="token operator">?</span> logger<span class="token punctuation">.</span>groupCollapsed <span class="token operator">:</span> logger<span class="token punctuation">.</span>group<span class="token punctuation">;</span>

  <span class="token comment">// render</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">startMessage</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">endMessage</span><span class="token punctuation">(</span><span class="token parameter">logger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u2014\u2014 log end \u2014\u2014&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getFormattedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> @ </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">pad</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">pad</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">pad</span><span class="token punctuation">(</span>
    time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">2</span>
  <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">pad</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> times</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>times <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">pad</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> maxLength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> maxLength <span class="token operator">-</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token punctuation">{</span>
  version<span class="token operator">:</span> <span class="token string">&#39;4.0.2&#39;</span><span class="token punctuation">,</span>
  Store<span class="token punctuation">,</span>
  storeKey<span class="token punctuation">,</span>
  createStore<span class="token punctuation">,</span>
  useStore<span class="token punctuation">,</span>
  mapState<span class="token punctuation">,</span>
  mapMutations<span class="token punctuation">,</span>
  mapGetters<span class="token punctuation">,</span>
  mapActions<span class="token punctuation">,</span>
  createNamespacedHelpers<span class="token punctuation">,</span>
  createLogger<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> index<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>
  Store<span class="token punctuation">,</span>
  createLogger<span class="token punctuation">,</span>
  createNamespacedHelpers<span class="token punctuation">,</span>
  createStore<span class="token punctuation">,</span>
  mapActions<span class="token punctuation">,</span>
  mapGetters<span class="token punctuation">,</span>
  mapMutations<span class="token punctuation">,</span>
  mapState<span class="token punctuation">,</span>
  storeKey<span class="token punctuation">,</span>
  useStore<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$M = _sfc_main$M.setup;
_sfc_main$M.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vuex/vuexCode.html.vue");
  return _sfc_setup$M ? _sfc_setup$M(props, ctx) : void 0;
};
var vuexCode_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["ssrRender", _sfc_ssrRender$y]]);
var vuexCode_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": vuexCode_html$1
});
const _sfc_main$L = {};
function _sfc_ssrRender$x(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="use-attrs" tabindex="-1"><a class="header-anchor" href="#use-attrs" aria-hidden="true">#</a> use-attrs</h1><h2 id="attrs-\u4E0E-attrs" tabindex="-1"><a class="header-anchor" href="#attrs-\u4E0E-attrs" aria-hidden="true">#</a> $attrs \u4E0E attrs</h2><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[
     ...
      $attrs.class
    ]<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$attrs.style<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>attrs<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>attrs<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>attrs \u4E3B\u8981\u662F\u8FD4\u56DE \u9664\u4E86 class\u3001style \u53CA\u5176\u4ED6\u4E8B\u4EF6\u7684\u5C5E\u6027\u3002</p><h2 id="use-attrs-1" tabindex="-1"><a class="header-anchor" href="#use-attrs-1" aria-hidden="true">#</a> use-attrs</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> fromPairs <span class="token keyword">from</span> <span class="token string">&#39;lodash/fromPairs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> debugWarn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/error&#39;</span>

<span class="token keyword">import</span> type <span class="token punctuation">{</span> ComputedRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">interface</span> <span class="token class-name">Params</span> <span class="token punctuation">{</span>
  excludeListeners<span class="token operator">?</span><span class="token operator">:</span> boolean
  excludeKeys<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">DEFAULT_EXCLUDE_KEYS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token constant">LISTENER_PREFIX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z]</span><span class="token regex-delimiter">/</span></span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> Params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> unknown<span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> excludeListeners <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> excludeKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> params
  <span class="token keyword">const</span> allExcludeKeys <span class="token operator">=</span> excludeKeys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_EXCLUDE_KEYS</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">debugWarn</span><span class="token punctuation">(</span>
      <span class="token string">&#39;use-attrs&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function&#39;</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">fromPairs</span><span class="token punctuation">(</span>
      Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy<span class="token operator">?.</span>$attrs<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token operator">!</span>allExcludeKeys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token operator">!</span><span class="token punctuation">(</span>excludeListeners <span class="token operator">&amp;&amp;</span> <span class="token constant">LISTENER_PREFIX</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$L = _sfc_main$L.setup;
_sfc_main$L.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/hooks/use-attrs.html.vue");
  return _sfc_setup$L ? _sfc_setup$L(props, ctx) : void 0;
};
var useAttrs_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["ssrRender", _sfc_ssrRender$x]]);
var useAttrs_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": useAttrs_html$1
});
const _sfc_main$K = {};
function _sfc_ssrRender$w(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="usenamespace" tabindex="-1"><a class="header-anchor" href="#usenamespace" aria-hidden="true">#</a> useNamespace</h1><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> defaultNamespace <span class="token operator">=</span> <span class="token string">&#39;el&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> statePrefix <span class="token operator">=</span> <span class="token string">&#39;is-&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">_bem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  namespace<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  block<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  blockSuffix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  element<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  modifier<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cls <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">namespace</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>block<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>blockSuffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cls <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>blockSuffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cls <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>element<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>modifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cls <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>modifier<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cls<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useNamespace</span> <span class="token operator">=</span> <span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> namespace <span class="token operator">=</span> <span class="token function">useGlobalConfig</span><span class="token punctuation">(</span><span class="token string">&#39;namespace&#39;</span><span class="token punctuation">,</span> defaultNamespace<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>blockSuffix <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> blockSuffix<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    element <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">m</span> <span class="token operator">=</span> <span class="token punctuation">(</span>modifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    modifier <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> modifier<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">be</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockSuffix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> element<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    blockSuffix <span class="token operator">&amp;&amp;</span> element
      <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> blockSuffix<span class="token punctuation">,</span> element<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">em</span> <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> modifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    element <span class="token operator">&amp;&amp;</span> modifier
      <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> modifier<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">bm</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockSuffix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> modifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    blockSuffix <span class="token operator">&amp;&amp;</span> modifier
      <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> blockSuffix<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> modifier<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">bem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>blockSuffix<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> element<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> modifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    blockSuffix <span class="token operator">&amp;&amp;</span> element <span class="token operator">&amp;&amp;</span> modifier
      <span class="token operator">?</span> <span class="token function">_bem</span><span class="token punctuation">(</span>namespace<span class="token punctuation">.</span>value<span class="token punctuation">,</span> block<span class="token punctuation">,</span> blockSuffix<span class="token punctuation">,</span> element<span class="token punctuation">,</span> modifier<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token keyword">is</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">?</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> name <span class="token operator">&amp;&amp;</span> state <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>statePrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// for css var</span>
  <span class="token comment">// --el-xxx: value;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">cssVar</span> <span class="token operator">=</span> <span class="token punctuation">(</span>object<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> styles<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        styles<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> styles<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// with block</span>
  <span class="token keyword">const</span> <span class="token function-variable function">cssVarBlock</span> <span class="token operator">=</span> <span class="token punctuation">(</span>object<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> styles<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        styles<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>block<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> styles<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">cssVarName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">cssVarBlockName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>block<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    namespace<span class="token punctuation">,</span>
    b<span class="token punctuation">,</span>
    e<span class="token punctuation">,</span>
    m<span class="token punctuation">,</span>
    be<span class="token punctuation">,</span>
    em<span class="token punctuation">,</span>
    bm<span class="token punctuation">,</span>
    bem<span class="token punctuation">,</span>
    <span class="token keyword">is</span><span class="token punctuation">,</span>
    <span class="token comment">// css</span>
    cssVar<span class="token punctuation">,</span>
    cssVarName<span class="token punctuation">,</span>
    cssVarBlock<span class="token punctuation">,</span>
    cssVarBlockName<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>bem \u683C\u5F0F\uFF1A <code>namespace-block-blockSuffix__element--modifier</code>\uFF0C<code>el-form-item__button--hover</code></p><ul><li>namespace: el</li><li>block: form</li><li>blockSuffix: item</li><li>button: element</li><li>modifier: hover</li></ul><p>namespace \u8FD4\u56DE\u7684\u65B9\u6CD5</p><ul><li>namespace: el,\u53EF\u81EA\u5B9A\u4E49</li><li>b: <code>namespace-block-blockSuffix</code> \u6216 <code>namespace-block</code></li><li>e: <code>namespace-block__element</code>,</li><li>m: <code>namespace-block--modifier</code>,</li><li>be\uFF1A <code>namespace-block-blockSuffix__element</code>,</li><li>em\uFF1A<code>namespace-block__element--modifier</code>,</li><li>bm\uFF1A<code>namespace-block-blockSuffix--modifier</code>,</li><li>bem: <code>namespace-block-blockSuffix__element--modifier</code>,</li><li>is: <code>is-link</code>,</li><li>cssVar,</li><li>cssVarName,</li><li>cssVarBlock,</li><li>cssVarBlockName,</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> globalConfig <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>ConfigProviderContext<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useGlobalConfig</span><span class="token generic class-name"><span class="token operator">&lt;</span>
  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ConfigProviderContext<span class="token punctuation">,</span>
  <span class="token constant">D</span> <span class="token keyword">extends</span> ConfigProviderContext<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span>
  defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">D</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span>ConfigProviderContext<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token constant">D</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useGlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>ConfigProviderContext<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useGlobalConfig</span><span class="token punctuation">(</span>
  key<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">keyof</span> ConfigProviderContext<span class="token punctuation">,</span>
  defaultValue <span class="token operator">=</span> <span class="token keyword">undefined</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token function">inject</span><span class="token punctuation">(</span>configProviderContextKey<span class="token punctuation">,</span> globalConfig<span class="token punctuation">)</span>
    <span class="token operator">:</span> globalConfig<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> config<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">??</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$K = _sfc_main$K.setup;
_sfc_main$K.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/hooks/use-namespace.html.vue");
  return _sfc_setup$K ? _sfc_setup$K(props, ctx) : void 0;
};
var useNamespace_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["ssrRender", _sfc_ssrRender$w]]);
var useNamespace_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": useNamespace_html$1
});
const _sfc_main$J = {};
function _sfc_ssrRender$v(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="bem" tabindex="-1"><a class="header-anchor" href="#bem" aria-hidden="true">#</a> BEM</h1><p>\u5728 <code>theme-chalk/src/mixins/config.scss</code> \u6587\u4EF6\u4E2D\uFF0C\u6709\u5BF9elment ui\u98CE\u683C\u7684\u57FA\u7840\u914D\u7F6E\u3002</p><div class="language-scss ext-scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$namespace</span></span><span class="token punctuation">:</span> <span class="token string">&#39;el&#39;</span> <span class="token statement keyword">!default</span><span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$common-separator</span></span><span class="token punctuation">:</span> <span class="token string">&#39;-&#39;</span> <span class="token statement keyword">!default</span><span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$element-separator</span></span><span class="token punctuation">:</span> <span class="token string">&#39;__&#39;</span> <span class="token statement keyword">!default</span><span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$modifier-separator</span></span><span class="token punctuation">:</span> <span class="token string">&#39;--&#39;</span> <span class="token statement keyword">!default</span><span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$state-prefix</span></span><span class="token punctuation">:</span> <span class="token string">&#39;is-&#39;</span> <span class="token statement keyword">!default</span><span class="token punctuation">;</span>
</code></pre></div><p>\u5728 <code>theme-chalk/src/mixins/mixins.scss</code> \u4E2D\uFF0C\u5219\u5B9A\u4E49\u4E86BEM\u7684\u6DF7\u5408\u65B9\u6CD5\u3002</p><div class="language-scss ext-scss"><pre class="language-scss"><code><span class="token keyword">@mixin</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token variable">$block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token property"><span class="token variable">$B</span></span><span class="token punctuation">:</span> <span class="token variable">$namespace</span>+<span class="token string">&#39;-&#39;</span>+<span class="token variable">$block</span> !global<span class="token punctuation">;</span>

  <span class="token selector">.<span class="token variable">#{$B}</span> </span><span class="token punctuation">{</span>
    <span class="token keyword">@content</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">@mixin</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token property"><span class="token variable">$E</span></span><span class="token punctuation">:</span> <span class="token variable">$element</span> !global<span class="token punctuation">;</span>
  <span class="token property"><span class="token variable">$selector</span></span><span class="token punctuation">:</span> &amp;<span class="token punctuation">;</span>
  <span class="token property"><span class="token variable">$currentSelector</span></span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$unit</span> in <span class="token variable">$element</span> </span><span class="token punctuation">{</span>
    <span class="token property"><span class="token variable">$currentSelector</span></span><span class="token punctuation">:</span> #<span class="token punctuation">{</span><span class="token variable">$currentSelector</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> <span class="token variable">$B</span> <span class="token operator">+</span> <span class="token variable">$element-separator</span> <span class="token operator">+</span> <span class="token variable">$unit</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">@if</span> <span class="token function">hitAllSpecialNestRule</span><span class="token punctuation">(</span><span class="token variable">$selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token atrule"><span class="token rule">@at-root</span></span> <span class="token punctuation">{</span>
      <span class="token selector"><span class="token variable">#{$selector}</span> </span><span class="token punctuation">{</span>
        <span class="token selector"><span class="token variable">#{$currentSelector}</span> </span><span class="token punctuation">{</span>
          <span class="token keyword">@content</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">@else</span> <span class="token punctuation">{</span>
    <span class="token atrule"><span class="token rule">@at-root</span></span> <span class="token punctuation">{</span>
      <span class="token selector"><span class="token variable">#{$currentSelector}</span> </span><span class="token punctuation">{</span>
        <span class="token keyword">@content</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">@mixin</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token variable">$modifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token property"><span class="token variable">$selector</span></span><span class="token punctuation">:</span> &amp;<span class="token punctuation">;</span>
  <span class="token property"><span class="token variable">$currentSelector</span></span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$unit</span> in <span class="token variable">$modifier</span> </span><span class="token punctuation">{</span>
    <span class="token property"><span class="token variable">$currentSelector</span></span><span class="token punctuation">:</span> #<span class="token punctuation">{</span><span class="token variable">$currentSelector</span> <span class="token operator">+</span> &amp; <span class="token operator">+</span> <span class="token variable">$modifier-separator</span> <span class="token operator">+</span> <span class="token variable">$unit</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token atrule"><span class="token rule">@at-root</span></span> <span class="token punctuation">{</span>
    <span class="token selector"><span class="token variable">#{$currentSelector}</span> </span><span class="token punctuation">{</span>
      <span class="token keyword">@content</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$J = _sfc_main$J.setup;
_sfc_main$J.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/theme-chalk/BEM.html.vue");
  return _sfc_setup$J ? _sfc_setup$J(props, ctx) : void 0;
};
var BEM_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["ssrRender", _sfc_ssrRender$v]]);
var BEM_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": BEM_html$1
});
const _sfc_main$I = {};
function _sfc_ssrRender$u(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="scss" tabindex="-1"><a class="header-anchor" href="#scss" aria-hidden="true">#</a> scss</h1><blockquote><p>\u5C0F\u77E5\u8BC6\uFF1A sass \u548C scss \u5176\u5B9E\u5C31\u662F\u540C\u4E00\u79CD\u4E1C\u897F\uFF0C\u6211\u4EEC\u5E73\u65F6\u90FD\u79F0\u4E4B\u4E3A sass \uFF0C\u5B83\u4EEC\u4FE9\u7684\u4E3B\u8981\u533A\u522B\u5728\u4E8E\u8BED\u6CD5\u4E0A\uFF0Csass \u662F\u7F29\u8FDB\u8BED\u6CD5\u4E3A\u4E3B\uFF0C\u5B8C\u5168\u7701\u7565\u82B1\u62EC\u53F7\uFF1Bscss \u662F\u4E00\u79CD CSS-like \u8BED\u6CD5\uFF0C\u5C31\u6BD4\u8F83\u63A5\u8FD1 CSS \uFF0C\u66F4\u52A0\u53CB\u597D\u548C\u53EF\u8BFB\u3002</p></blockquote><h2 id="\u53D8\u91CF" tabindex="-1"><a class="header-anchor" href="#\u53D8\u91CF" aria-hidden="true">#</a> \u53D8\u91CF</h2><div class="language-css ext-css"><pre class="language-css"><code>$<span class="token property">font-stack</span><span class="token punctuation">:</span>    Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
$<span class="token property">primary-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>

<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> 100% $font-stack<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> $primary-color<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u53EF\u4EE5\u5728\u53D8\u91CF\u7684\u7ED3\u5C3E\u6DFB\u52A0 <code>!default</code>\uFF0C \u7ED9\u4E00\u4E2A\u672A\u901A\u8FC7 <code>!default</code> \u58F0\u660E\u8D4B\u503C\u7684\u53D8\u91CF\u8D4B\u503C\uFF0C\u6B64\u65F6\uFF0C\u5982\u679C\u53D8\u91CF\u5DF2\u7ECF\u88AB\u8D4B\u503C\uFF0C\u4E0D\u4F1A\u518D\u88AB\u91CD\u65B0\u8D4B\u503C\uFF0C\u4F46\u662F\u5982\u679C\u53D8\u91CF\u8FD8\u6CA1\u6709\u88AB\u8D4B\u503C\uFF0C\u5219\u4F1A\u88AB\u8D4B\u4E88\u65B0\u7684\u503C\u3002</p><div class="language-css ext-css"><pre class="language-css"><code>$<span class="token property">namespace</span><span class="token punctuation">:</span> <span class="token string">&#39;el&#39;</span> !default<span class="token punctuation">;</span>
$<span class="token property">common-separator</span><span class="token punctuation">:</span> <span class="token string">&#39;-&#39;</span> !default<span class="token punctuation">;</span>
$<span class="token property">element-separator</span><span class="token punctuation">:</span> <span class="token string">&#39;__&#39;</span> !default<span class="token punctuation">;</span>
$<span class="token property">modifier-separator</span><span class="token punctuation">:</span> <span class="token string">&#39;--&#39;</span> !default<span class="token punctuation">;</span>
$<span class="token property">state-prefix</span><span class="token punctuation">:</span> <span class="token string">&#39;is-&#39;</span> !default<span class="token punctuation">;</span>
</code></pre></div><h2 id="\u6CE8\u91CA" tabindex="-1"><a class="header-anchor" href="#\u6CE8\u91CA" aria-hidden="true">#</a> \u6CE8\u91CA</h2><p>SASS\u5171\u6709\u4E24\u79CD\u6CE8\u91CA\u98CE\u683C\u3002</p><p>\u6807\u51C6\u7684CSS\u6CE8\u91CA <code>/* comment */</code> \uFF0C\u4F1A\u4FDD\u7559\u5230\u7F16\u8BD1\u540E\u7684\u6587\u4EF6\u3002</p><p>\u5355\u884C\u6CE8\u91CA <code>// comment</code>\uFF0C\u53EA\u4FDD\u7559\u5728SASS\u6E90\u6587\u4EF6\u4E2D\uFF0C\u7F16\u8BD1\u540E\u88AB\u7701\u7565\u3002</p><p>\u5728<code>/*</code>\u540E\u9762\u52A0\u4E00\u4E2A\u611F\u53F9\u53F7\uFF0C\u8868\u793A\u8FD9\u662F&quot;\u91CD\u8981\u6CE8\u91CA&quot;\u3002\u5373\u4F7F\u662F\u538B\u7F29\u6A21\u5F0F\u7F16\u8BD1\uFF0C\u4E5F\u4F1A\u4FDD\u7559\u8FD9\u884C\u6CE8\u91CA\uFF0C\u901A\u5E38\u53EF\u4EE5\u7528\u4E8E\u58F0\u660E\u7248\u6743\u4FE1\u606F\u3002</p><h2 id="at-rules" tabindex="-1"><a class="header-anchor" href="#at-rules" aria-hidden="true">#</a> At-rules</h2><ul><li>@use processes the mixins, functions, and variables from different Sass stylesheets together. It also combines CSS from various different stylesheets into one.</li><li>@forward processes a Sass stylesheet and makes its mixins, functions, and variables available for use with the @use rule.</li><li>@import expands the CSS at-rule to process styles, mixins, functions, and variables from other stylesheets.</li><li>@mixin and @include makes it easy to use the sections of styles again.</li><li>@function defines the custom functions to be used in Sass expressions.</li><li>@extend allows selectors to receive styles from one another.</li><li>@at-root puts styles in it to the root of the CSS document.</li><li>@error causes compilation to fail with a given error message, as used in the above example.</li><li>@warn prints the warning without completely stopping the compilation.</li><li>@debug prints the command for debugging purposes.</li><li>Flow control rules like @if, @each, @for, and @while control the number of emissions of styles.</li></ul><h2 id="extend" tabindex="-1"><a class="header-anchor" href="#extend" aria-hidden="true">#</a> @extend</h2><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.class1</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.class2</span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@extend</span> .class1<span class="token punctuation">;</span></span>
  <span class="token property">font-size</span><span class="token punctuation">:</span>120%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin" aria-hidden="true">#</a> @mixin</h2><p>Mixin\u6709\u70B9\u50CFC\u8BED\u8A00\u7684\u5B8F\uFF08macro\uFF09\uFF0C\u662F\u53EF\u4EE5\u91CD\u7528\u7684\u4EE3\u7801\u5757\u3002</p><p>\u4F7F\u7528<code>@mixin</code>\u547D\u4EE4\uFF0C\u5B9A\u4E49\u4E00\u4E2A\u4EE3\u7801\u5757\u3002</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">link-colors</span><span class="token punctuation">(</span>$normal<span class="token punctuation">,</span> $hover<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> $normal<span class="token punctuation">;</span>
    <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> $hover<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="use" tabindex="-1"><a class="header-anchor" href="#use" aria-hidden="true">#</a> @use</h2><p>\u7531 @use \u52A0\u8F7D\u7684\u6837\u5F0F\u8868\u88AB\u79F0\u4E3A\u6A21\u5757\uFF08modules\uFF09\u3002</p><p>\u901A\u8FC7 @use \u52A0\u8F7D\u7684\u6A21\u5757\u4E0D\u7BA1\u88AB\u5F15\u7528\u4E86\u591A\u5C11\u6B21\uFF0C\u90FD\u53EA\u4F1A\u5728\u7F16\u8BD1\u540E\u8F93\u51FA\u4E00\u6B21\u5230 css \u4E2D\u3002\u4F46\u662F\u4F7F\u7528 @import \u591A\u6B21\u5F15\u5165\u540C\u4E00\u6A21\u5757\uFF0C\u4F1A\u53CD\u590D\u8F93\u51FA\u5230 css \u4E2D\u3002</p><p>// module.scss</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.module</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>// a.scss</p><div class="language-css ext-css"><pre class="language-css"><code>@use <span class="token string">&#39;./module.scss&#39;</span>
</code></pre></div><p>// b.scss</p><div class="language-css ext-css"><pre class="language-css"><code>@use <span class="token string">&#39;./module.scss&#39;</span>
</code></pre></div><p>// index.scss</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@use</span> <span class="token string">&#39;./a.scss&#39;</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@use</span> <span class="token string">&#39;./b.scss&#39;</span><span class="token punctuation">;</span></span>
</code></pre></div><p>\u6700\u540E\u7F16\u8BD1</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.module</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="forward" tabindex="-1"><a class="header-anchor" href="#forward" aria-hidden="true">#</a> @forward</h2><p>@forward \u8BED\u53E5\u53EF\u4EE5\u5F15\u5165\u53E6\u4E00\u4E2A\u6A21\u5757\u7684\u6240\u6709\u53D8\u91CF\u3001mixins\u548C\u51FD\u6570\uFF0C\u5C06\u5B83\u4EEC\u76F4\u63A5\u4F5C\u4E3A\u5F53\u524D\u6A21\u5757\u7684 API \u66B4\u9732\u51FA\u53BB\uFF0C\u800C\u4E0D\u4F1A\u771F\u7684\u5728\u5F53\u524D\u6A21\u5757\u589E\u52A0\u4EE3\u7801\u3002\u8FD9\u6837\uFF0C\u5E93\u4F5C\u8005\u53EF\u4EE5\u66F4\u597D\u5730\u5728\u4E0D\u540C\u6E90\u6587\u4EF6\u4E4B\u95F4\u62C6\u5206\u4EE3\u7801\u3002\u4E0D\u540C\u4E8E @use\uFF0C @forward\u4E0D\u4F1A\u7ED9\u53D8\u91CF\u6DFB\u52A0\u547D\u540D\u7A7A\u95F4\u3002</p><p>// base.scss</p><div class="language-css ext-css"><pre class="language-css"><code>$<span class="token property">padding</span><span class="token punctuation">:</span>22px<span class="token punctuation">;</span>
$<span class="token property">margin</span><span class="token punctuation">:</span>22px<span class="token punctuation">;</span>
</code></pre></div><p>forward \u4E2D\u95F4\u8F6C\u53D1\u6587\u4EF6</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@forward</span> <span class="token string">&quot;base.scss&quot;</span><span class="token punctuation">;</span></span>
</code></pre></div><p>main.scss</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@use</span> <span class="token string">&quot;forward&quot;</span><span class="token punctuation">;</span></span>
<span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> forward.$padding<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="forward-\u6DFB\u52A0\u524D\u7F00" tabindex="-1"><a class="header-anchor" href="#forward-\u6DFB\u52A0\u524D\u7F00" aria-hidden="true">#</a> @forward \u6DFB\u52A0\u524D\u7F00</h3><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@forward</span> <span class="token string">&quot;base.scss&quot;</span> as base-*<span class="token punctuation">;</span></span>
</code></pre></div><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@use</span> <span class="token string">&quot;forward&quot;</span><span class="token punctuation">;</span></span>
<span class="token selector">p</span> <span class="token punctuation">{</span> <span class="token property">padding</span><span class="token punctuation">:</span> forward.$base-padding<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre></div><h2 id="content" tabindex="-1"><a class="header-anchor" href="#content" aria-hidden="true">#</a> @content</h2><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@mixin</span> example</span> <span class="token punctuation">{</span>
 <span class="token atrule"><span class="token rule">@content</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span>
<span class="token selector">body</span><span class="token punctuation">{</span>
 <span class="token atrule"><span class="token rule">@include</span> example</span><span class="token punctuation">{</span> <span class="token property">color</span> <span class="token punctuation">:</span> white <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Output :</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">sm</span><span class="token punctuation">(</span>$val<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
 <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> $val<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token atrule"><span class="token rule">@content</span><span class="token punctuation">;</span></span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@include</span> <span class="token function">sm</span><span class="token punctuation">(</span>600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
 <span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Output :</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="at-root" tabindex="-1"><a class="header-anchor" href="#at-root" aria-hidden="true">#</a> @at-root</h2><p>\u6211\u4EECCSS\u4E2D\u6709\u4E00\u79CD\u547D\u540D\u65B9\u5F0F\u662FBEM,\u5982\uFF1A</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.block</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token selector">.block__element</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token selector">.block--modifier</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>\u5199\u6210\u5D4C\u5957</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.block</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>

    <span class="token selector">#</span><span class="token punctuation">{</span>&amp;<span class="token punctuation">}</span><span class="token selector">__element</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">#</span><span class="token punctuation">{</span>&amp;<span class="token punctuation">}</span><span class="token selector">--modifier</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u7F16\u8BD1\u5B8C\u540E\u662F\uFF1A</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.block</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token selector">.block .block__element</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token selector">.block .block--modifier</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD9\u4E0D\u662F\u6211\u4EEC\u60F3\u8981\u7684\u4EE3\u7801\u3002\u4F46\u5728LESS\u548CStylus\u4E2D\uFF0C\u80FD\u5F88\u597D\u7684\u5B9E\u73B0BEM\u7C7B\u540D\u7684\u5F62\u5F0F\u3002\u6B64\u65F6\u5728\u60F3\uFF0C\u5728Sass\u4E2D\u6709\u6CA1\u6709\u8FD9\u6837\u7684\u529F\u80FD\u5462\uFF1F\u503C\u5F97\u5E78\u8FD0\u7684\u662F\uFF0C\u5728Sass3.3\u4E2D\u65B0\u589E\u52A0\u4E86@at-root\u7279\u6027,\u80FD\u5B9E\u73B0\u4E0A\u9762BEM\u7684\u7279\u6027\uFF1A</p><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.block</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@at-root</span> #</span><span class="token punctuation">{</span>&amp;<span class="token punctuation">}</span><span class="token selector">__element</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token atrule"><span class="token rule">@at-root</span> #</span><span class="token punctuation">{</span>&amp;<span class="token punctuation">}</span><span class="token selector">--modifier</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="at-root\u548C-\u7684\u7ED3\u5408" tabindex="-1"><a class="header-anchor" href="#at-root\u548C-\u7684\u7ED3\u5408" aria-hidden="true">#</a> @at-root\u548C&amp;\u7684\u7ED3\u5408</h3><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.foo</span> <span class="token punctuation">{</span>
    <span class="token atrule"><span class="token rule">@at-root</span> .bar &amp;</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span>gray<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-css ext-css"><pre class="language-css"><code><span class="token selector">.bar .foo</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><h3 id="at-root\u548C-\u7ED3\u5408" tabindex="-1"><a class="header-anchor" href="#at-root\u548C-\u7ED3\u5408" aria-hidden="true">#</a> <code>@at-root</code>\u548C<code>#{&amp;}</code>\u7ED3\u5408</h3><p>Sass\u6709\u811A\u672C\u6A21\u5F0F <code>#{}</code>\uFF0C\u4ED6\u548C<code>&amp;</code>\u4E0D\u540C\u4E4B\u5904\u662F\uFF0C<code>&amp;</code>\u53EA\u7528\u4F5C\u9009\u62E9\u5668</p><h2 id="\u8D44\u6599" tabindex="-1"><a class="header-anchor" href="#\u8D44\u6599" aria-hidden="true">#</a> \u8D44\u6599</h2><ul><li><a href="https://www.sass.hk/docs/" target="_blank" rel="noopener noreferrer">Sass\u4E2D\u6587\u7F51`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.sass.hk/skill/sass40.html" target="_blank" rel="noopener noreferrer">Sass\uFF20at-root`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener noreferrer">SASS\u7528\u6CD5\u6307\u5357`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li><li><a href="https://www.lesscode.work/sections/621c2d75d20c1.html" target="_blank" rel="noopener noreferrer">SCSS \xB7 SASS \u6559\u7A0B`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a> \u6BD4\u8F83\u597D</li></ul><!--]-->`);
}
const _sfc_setup$I = _sfc_main$I.setup;
_sfc_main$I.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/theme-chalk/scss.html.vue");
  return _sfc_setup$I ? _sfc_setup$I(props, ctx) : void 0;
};
var scss_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["ssrRender", _sfc_ssrRender$u]]);
var scss_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": scss_html$1
});
const _sfc_main$H = {};
function _sfc_ssrRender$t(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="buildprops" tabindex="-1"><a class="header-anchor" href="#buildprops" aria-hidden="true">#</a> buildProps</h1><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> buildProps <span class="token operator">=</span> <span class="token operator">&lt;</span>
  Props <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span>
    <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>epPropKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token operator">|</span> NativePropType
    <span class="token operator">|</span> EpPropInput<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>
  <span class="token operator">&gt;</span></span>
<span class="token operator">&gt;</span><span class="token punctuation">(</span>
  props<span class="token operator">:</span> Props
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Props<span class="token punctuation">]</span><span class="token operator">:</span> IfEpProp<span class="token operator">&lt;</span>
    Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    IfNativePropType<span class="token operator">&lt;</span>Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EpPropConvert<span class="token operator">&lt;</span>Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>
  <span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">=&gt;</span>
  <span class="token function">fromPairs</span><span class="token punctuation">(</span>
    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> option<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      key<span class="token punctuation">,</span>
      <span class="token function">buildProp</span><span class="token punctuation">(</span>option <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span>
</code></pre></div><h2 id="\u6CDB\u578B" tabindex="-1"><a class="header-anchor" href="#\u6CDB\u578B" aria-hidden="true">#</a> \u6CDB\u578B</h2><p>\u5148\u6765TS\u6CDB\u578B\u7684\u5E94\u7528</p><p>\u666E\u901A\u51FD\u6570\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">drinkMilk</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><p>\u52A0\u4E0A\u6CDB\u578B\uFF1A\u5728\u53C2\u6570\u524D\u52A0 <code>&lt;T&gt;</code></p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">drinkMilk</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><p>\u5E26\u8FD4\u56DE\u503C\uFF1A\u5728\u53C2\u6570\u540E\u9762\u52A0 : T</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">drinkMilk</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span> \uFF1A<span class="token constant">T</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> args <span class="token punctuation">}</span>
</code></pre></div><p>\u4F7F\u7528\u7BAD\u5934\u51FD\u6570 <code>=&gt;</code></p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> getMilk <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> args<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre></div><p>\u7ED9\u6CDB\u578B T \u52A0\u4E0A\u7EA6\u675F\u6761\u4EF6</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">WithLength</span> <span class="token punctuation">{</span> 
  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">const</span> getMilk <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">WithLength</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u5E26\u7EA6\u675F\u7684\u6CDB\u578B" tabindex="-1"><a class="header-anchor" href="#\u5E26\u7EA6\u675F\u7684\u6CDB\u578B" aria-hidden="true">#</a> \u5E26\u7EA6\u675F\u7684\u6CDB\u578B</h2><blockquote><p>\u77E5\u8BC6\u70B9\uFF1ARecord&lt;key, value&gt;</p></blockquote><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u53D6 K \u4E2D\u7684\u6BCF\u4E00\u4E2A\u5C5E\u6027\uFF0C\u8BE5\u5C5E\u6027\u7684\u503C\u662F T \u7C7B\u578B\u3002</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">person</span> <span class="token operator">=</span> <span class="token string">&#39;man&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;woman&#39;</span>
<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">personInfo</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>person<span class="token punctuation">,</span> Info<span class="token operator">&gt;</span>
</code></pre></div><p>Record \u53EF\u4EE5\u628A\u8D85\u80FD\u529B\u8D4B\u4E88\u6BCF\u4E00\u4E2A\u4EBA\u3002\u77AC\u95F4\u5C31\u8BA9 man \u548C woman \u62E5\u6709\u4E86 name \u548C age \u5C5E\u6027\u3002</p><p>\u518D\u6765\u770B Element Plus \u6E90\u7801\u4E2D\u7684\u90E8\u5206</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">epValue</span> <span class="token operator">=</span> 
    <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>epPropKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token operator">|</span> NativePropType
    <span class="token operator">|</span> EpPropInput<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>
    
Props <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> epValue<span class="token operator">&gt;</span></span>
</code></pre></div><p><code>Props extends Record</code>\uFF0C\u8868\u793A Props \u5E94\u7B26\u5408\u540E\u9762 Record \u7684\u7EA6\u675F\uFF0C\u5373\uFF1A Props \u9700\u8981\u662F string \u7C7B\u578B\u7684 key\uFF0CepValue \u90A3\u4E09\u79CD\u7C7B\u578B\u7684 value</p><ul><li>{ [&#39;__epPropKey&#39;] : true }</li><li>NativePropType : \u539F\u751F prop \u7C7B\u578B</li><li>EpPropInput : Element Plus \u5B9A\u4E49\u7684 Prop \u8F93\u5165\u7C7B\u578B</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">EpPropInput</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    type<span class="token operator">?</span><span class="token operator">:</span> StringConstructor <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    required<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    values<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    validator<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><p>\u901A\u8FC7\u5BF9\u6CDB\u578B Props \u7684\u7EA6\u675F\uFF0C\u7ED3\u5408\u53C2\u6570 props: Props\uFF0C\u8868\u793A\u51FA\uFF1A\u8BE5\u51FD\u6570\u7684\u5165\u53C2\uFF0C\u5FC5\u987B\u6EE1\u8DB3 props \u7684 key \u662F string \u7C7B\u578B\uFF0Cvalue \u662F\u4E0A\u8FF0\u7684 epValue \u7684\u4E09\u79CD\u8054\u5408\u7C7B\u578B\u4E4B\u4E00\u3002</p><h2 id="buildprops-\u8FD4\u56DE\u503C" tabindex="-1"><a class="header-anchor" href="#buildprops-\u8FD4\u56DE\u503C" aria-hidden="true">#</a> buildProps \u8FD4\u56DE\u503C</h2><p>\u901A\u8FC7\u82B1\u62EC\u53F7 {}\uFF0C\u5224\u65AD\u8FD4\u56DE\u503C\u5E94\u8BE5\u662F\u4E00\u4E2A object</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Props<span class="token punctuation">]</span><span class="token operator">:</span> IfEpProp<span class="token operator">&lt;</span>
    Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    IfNativePropType<span class="token operator">&lt;</span>Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EpPropConvert<span class="token operator">&lt;</span>Props<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>
  <span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5176 key \u662F [K in keyof Props]\uFF0Cvalue \u901A\u8FC7 IfEpProp \u7684\u8FD4\u56DE\u3002</p><p>IfEpProp</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">IfEpProp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>epPropKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">Y</span> <span class="token operator">:</span> <span class="token constant">N</span>
</code></pre></div><p>IfNativePropType</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * \u539F\u751F prop \`\u7C7B\u578B\uFF0CBooleanConstructor\`\u3001\`StringConstructor\`\u3001\`null\`\u3001\`undefined\` \u7B49
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">NativePropType</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">)</span>
  <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span>
  <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">IfNativePropType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>NativePropType<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">Y</span> <span class="token operator">:</span> <span class="token constant">N</span>
</code></pre></div><p>EpPropConvert</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * \u5C06\u8F93\u5165\u8F6C\u6362\u4E3A\u8F93\u51FA
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">EpPropConvert<span class="token operator">&lt;</span>Input<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Input <span class="token keyword">extends</span> <span class="token class-name">EpPropInput<span class="token operator">&lt;</span>
  <span class="token keyword">infer</span> Type<span class="token punctuation">,</span>
  <span class="token keyword">infer</span> Value<span class="token punctuation">,</span>
  <span class="token keyword">infer</span> Validator<span class="token punctuation">,</span>
  <span class="token builtin">any</span><span class="token punctuation">,</span>
  <span class="token keyword">infer</span> Required
<span class="token operator">&gt;</span></span>
  <span class="token operator">?</span> EpPropFinalized<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> Value<span class="token punctuation">,</span> Validator<span class="token punctuation">,</span> Input<span class="token punctuation">[</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Required<span class="token operator">&gt;</span>
  <span class="token operator">:</span> <span class="token builtin">never</span>
</code></pre></div><h3 id="k-in-keyof-props" tabindex="-1"><a class="header-anchor" href="#k-in-keyof-props" aria-hidden="true">#</a> [K in keyof Props]</h3><p>\u4E00\u4E2A\u4F8B\u5B50</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// error</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6211\u4EEC\u4F1A\u5F97\u5230\u4E00\u6BB5\u62A5\u9519\uFF0C\u8FD9\u662F\u65B0\u624B TypeScript \u5F00\u53D1\u8005\u5E38\u5E38\u72AF\u7684\u9519\u8BEF\uFF0C\u7F16\u8BD1\u5668\u544A\u8BC9\u6211\u4EEC\uFF0C\u53C2\u6570 obj \u5B9E\u9645\u4E0A\u662F {},\u56E0\u6B64\u540E\u9762\u7684 key \u662F\u65E0\u6CD5\u5728\u4E0A\u9762\u53D6\u5230\u4EFB\u4F55\u503C\u7684\u3002</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getValue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// error</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u8FD9\u4F9D\u7136\u89E3\u51B3\u4E0D\u4E86\u95EE\u9898\u3002\u56E0\u4E3A\u6211\u4EEC\u7B2C\u4E8C\u4E2A\u53C2\u6570 key \u662F\u4E0D\u662F\u5B58\u5728\u4E8E obj \u4E0A\u662F\u65E0\u6CD5\u786E\u5B9A\u7684\uFF0C\u56E0\u6B64\u6211\u4EEC\u9700\u8981\u5BF9\u8FD9\u4E2A key \u4E5F\u8FDB\u884C\u7EA6\u675F\uFF0C\u6211\u4EEC\u628A\u5B83\u7EA6\u675F\u4E3A\u53EA\u5B58\u5728\u4E8E obj \u5C5E\u6027\u7684\u7C7B\u578B\uFF0C\u8FD9\u4E2A\u65F6\u5019\u9700\u8981\u501F\u52A9\u5230\u7D22\u5F15\u7C7B\u578B\u8FDB\u884C\u5B9E\u73B0 <code>&lt;U extends keyof T&gt;</code></p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getValue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// ok</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u503C\u5224\u65AD" tabindex="-1"><a class="header-anchor" href="#\u503C\u5224\u65AD" aria-hidden="true">#</a> \u503C\u5224\u65AD</h3><p>\u6E90\u7801\u4E2D\u901A\u8FC7 IfEpProp, IfNativePropType, EpPropConvert \u4E09\u90E8\u5206\uFF0C\u5BF9 <code>Props[K]</code> \u505A\u4E86\u5224\u65AD\u3001\u8F6C\u6362\u3002</p><ul><li>IfEpProp: \u5982\u679C\u662F EpProp \u7C7B\u578B\uFF0C\u5219\u76F4\u63A5\u8F93\u51FA</li><li>IfNativePropType: \u5982\u679C\u662F\u539F\u751FProp\u7C7B\u578B\uFF0C\u5219\u76F4\u63A5\u8F93\u51FA</li><li>EpPropConvert: \u8F6C\u6362\u6210 EpPropFinalized \u8F93\u51FA</li></ul><h2 id="buildprops-\u51FD\u6570\u5B9E\u9645\u5185\u5BB9" tabindex="-1"><a class="header-anchor" href="#buildprops-\u51FD\u6570\u5B9E\u9645\u5185\u5BB9" aria-hidden="true">#</a> buildProps \u51FD\u6570\u5B9E\u9645\u5185\u5BB9</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token function">fromPairs</span><span class="token punctuation">(</span>
    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> option<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      key<span class="token punctuation">,</span>
      <span class="token function">buildProp</span><span class="token punctuation">(</span>option <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span>
</code></pre></div><p>\u5927\u81F4\u6D41\u7A0B\u5982\u4E0B:</p><ul><li>Object.entries \u5C06 props \u8F6C\u6362\u4E3A\u4E8C\u7EF4\u6570\u7EC4</li><li>\u5C06\u4E8C\u7EF4\u6570\u7EC4\u4EE5 key option \u7684\u5F62\u5F0F\u53D6\u51FA\uFF0C\u5B9E\u9645\u4E0A\u5C31\u662F\u62FF\u5230\u4E86 props \u4E2D\u7684\u53C2\u6570\u7684 key \u548C value</li><li>\u5C06 value \u901A\u8FC7 buildProp \u51FD\u6570\u5904\u7406\u4E00\u4E0B</li><li>fromPairs \u53C8\u5C06\u4E8C\u7EF4\u6570\u7EC4\u8F6C\u6362\u6210 object</li></ul><p>\u901A\u8FC7\u6E90\u7801\u4E2D\u6CE8\u91CA\u53EF\u4EE5\u77E5\u9053\uFF0CbuildProp \u662F\u4E3A\u4E86 \u201C\u751F\u6210 prop\uFF0C\u80FD\u66F4\u597D\u5730\u4F18\u5316\u7C7B\u578B\u201D\u3002\u6240\u4EE5\u6700\u7EC8\u7ED3\u8BBA\uFF0C\u5C31\u662F\u5BF9 props \u4E2D\u7684\u6240\u6709 value \u8FDB\u884C\u7C7B\u578B\u4F18\u5316\u3002</p><p>\u8FD9\u4E48\u8BF4\u6709\u70B9\u751F\u786C\u4E86\uFF0C\u4E3E\u4E2A\u4F8B\u5B50\uFF1A</p><p>\u6211\u4EEC\u7684 Props \u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;sun&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> Number<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u7ECF\u8FC7 Object.entries \u540E\uFF0C\u8F6C\u6362\u4E3A</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>
 <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token operator">:</span>String<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">&#39;sun&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token operator">:</span>Number<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>\u901A\u8FC7 map \u904D\u5386\uFF0Ckey \u662F &#39;name&#39;, option \u662F {type:String, defalut: &#39;sun&#39;} \uFF0C\u518D\u901A\u8FC7 buildProp \u51FD\u6570\u5C06\u5176\u8F6C\u5316\u4E3A EpPropFinalized \u7C7B\u578B</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token number">0</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&quot;sun&quot;</span><span class="token punctuation">,</span>
    required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span> String<span class="token punctuation">,</span>
    validator<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    __epPropKey<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u904D\u5386\u7ED3\u675F\u540E\uFF0C\u901A\u8FC7 fromPairs \u8F6C\u56DE object\uFF0C\u6700\u7EC8\u8FD4\u56DE\u7ED3\u679C\u3002</p><h2 id="\u5C0F\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u5C0F\u7ED3" aria-hidden="true">#</a> \u5C0F\u7ED3</h2><p>Element Plus \u7684 buildProps \u65B9\u6CD5\uFF0C\u8BF4\u767D\u4E86\u5C31\u662F\u5BF9 element \u7EC4\u4EF6\u5F00\u53D1\u8FC7\u7A0B\u4E2D\uFF0C\u5927\u5BB6\u7F16\u7801\u65F6\u7684 Props \u7684\u8BBE\u7F6E\uFF0C\u8FDB\u884C\u4E86\u7EDF\u4E00\u683C\u5F0F\u5316\uFF0C\u6216\u8005\u8BF4\u4F18\u5316\u7C7B\u578B\u3002</p><blockquote><p><a href="https://juejin.cn/post/7138061136112386079" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7138061136112386079`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></p></blockquote><!--]-->`);
}
const _sfc_setup$H = _sfc_main$H.setup;
_sfc_main$H.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/utils/buildProps.html.vue");
  return _sfc_setup$H ? _sfc_setup$H(props, ctx) : void 0;
};
var buildProps_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["ssrRender", _sfc_ssrRender$t]]);
var buildProps_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": buildProps_html$1
});
const _sfc_main$G = {};
function _sfc_ssrRender$s(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="render-function" tabindex="-1"><a class="header-anchor" href="#render-function" aria-hidden="true">#</a> Render function</h1><p>Render function in Vue 2:</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    attrs<span class="token operator">:</span> <span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    on<span class="token operator">:</span> <span class="token punctuation">{</span>
      click<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClick
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Render function in Vue 3:</p><ul><li>Flat props structure</li><li>Globally imported <code>h</code> helper</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
    onClick<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$G = _sfc_main$G.setup;
_sfc_main$G.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/DeepDive/Render-function.html.vue");
  return _sfc_setup$G ? _sfc_setup$G(props, ctx) : void 0;
};
var RenderFunction_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["ssrRender", _sfc_ssrRender$s]]);
var RenderFunction_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": RenderFunction_html$1
});
const _sfc_main$F = {};
function _sfc_ssrRender$r(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="creating-a-mini-vue" tabindex="-1"><a class="header-anchor" href="#creating-a-mini-vue" aria-hidden="true">#</a> creating a mini vue</h1><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// *** VDOM ***</span>
  <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      tag<span class="token punctuation">,</span>
      props<span class="token punctuation">,</span>
      children<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// props</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> eventName <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// children</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> vnode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// n1 represents the old virtual DOM, or what is currently on the screen.</span>
  <span class="token comment">// n2 represents what we want the screen to update to.</span>
  <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1<span class="token punctuation">.</span>tag <span class="token operator">===</span> n2<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// carry the real DOM node over and over into future snapshots.</span>
      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>el <span class="token operator">=</span> n1<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// props</span>
      <span class="token keyword">const</span> oldProps <span class="token operator">=</span> n1<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> newProps <span class="token operator">=</span> n2<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> oldValue <span class="token operator">=</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> newValue <span class="token operator">=</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!==</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// children</span>
      <span class="token keyword">const</span> oldChildren <span class="token operator">=</span> n1<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
      <span class="token keyword">const</span> newChildren <span class="token operator">=</span> n2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChildren <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren <span class="token operator">!==</span> oldChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
          newChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> commonLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commonLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren <span class="token operator">&lt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// replace</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// *** Reactivity ***</span>

  <span class="token keyword">let</span> activeEffect<span class="token punctuation">;</span>

  <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>
    subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> effect<span class="token punctuation">;</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">getDep</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> depsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dep<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> reactiveHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token function">getDep</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token function">getDep</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">raw</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> reactiveHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// *** App ***</span>

  <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>
        <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">mountApp</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isMounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> prevVdom<span class="token punctuation">;</span>
    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prevVdom <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mount</span><span class="token punctuation">(</span>prevVdom<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newVdom <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>prevVdom<span class="token punctuation">,</span> newVdom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        prevVdom <span class="token operator">=</span> newVdom<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">mountApp</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$F = _sfc_main$F.setup;
_sfc_main$F.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/DeepDive/creating-a-mini-vue.html.vue");
  return _sfc_setup$F ? _sfc_setup$F(props, ctx) : void 0;
};
var creatingAMiniVue_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["ssrRender", _sfc_ssrRender$r]]);
var creatingAMiniVue_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": creatingAMiniVue_html$1
});
const _sfc_main$E = {};
function _sfc_ssrRender$q(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="mini-vue" tabindex="-1"><a class="header-anchor" href="#mini-vue" aria-hidden="true">#</a> mini vue</h1><p>\u5C24\u96E8\u6EAA</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// v-dom</span>
  <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      tag<span class="token punctuation">,</span>
      props<span class="token punctuation">,</span>
      children<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// props \u89E3\u6790props \u4E3Ael\u8BBE\u7F6Eattribute</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// children</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> vnode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5143\u7D20\u6302\u8F7D\u5728container\u4E0A</span>
    container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>el <span class="token operator">=</span> n1<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1<span class="token punctuation">.</span>tag <span class="token operator">===</span> n2<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//props</span>
      <span class="token keyword">const</span> oldProps <span class="token operator">=</span> n1<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> newProps <span class="token operator">=</span> n2<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> oldValue <span class="token operator">=</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> newValue <span class="token operator">=</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">!==</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// \u5220\u9664props \u5220\u9664\u65E7vnode\u4E0A\u9762\u7684attrbute</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// children</span>
      <span class="token keyword">const</span> oldChildren <span class="token operator">=</span> n1<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
      <span class="token keyword">const</span> newChildren <span class="token operator">=</span> n2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChildren <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// newChild \u4E3A\u5B57\u7B26\u4E32</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren <span class="token operator">!==</span> oldChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// newChild \u4E3A\u6570\u7EC4</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// newChildren\u4E3A\u6570\u7EC4 oldChild\u4E3A\u5B57\u7B26\u4E32</span>
          el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
          newChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// newChildren oldChildren\u90FD\u4E3A\u6570\u7EC4</span>

          <span class="token comment">// \u516C\u5171\u90E8\u5206\u957F\u5EA6</span>
          <span class="token keyword">const</span> commonLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commonLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>commonLength<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            oldChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>commonLength<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//reactivity</span>
  <span class="token keyword">let</span> activeEffect<span class="token punctuation">;</span>

  <span class="token comment">// \u4F9D\u8D56\u6536\u96C6\u5668</span>
  <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>
    subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> effect<span class="token punctuation">;</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u8BE5\u51FD\u6570\u7684\u529F\u80FD\u662F\u8FD4\u56DEtarget[key]\u7684\u4F9D\u8D56\u6536\u96C6\u5668</span>
  <span class="token keyword">function</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// depsMap\u4E3AMap\u7C7B\u578B \u91CC\u9762\u5B58\u50A8\u8981\u54CD\u5E94\u7684\u5BF9\u8C61\u7684Map</span>
    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span>
     *  [target]: Map()
     *<span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> depsMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u4E3A\u6BCF\u4E00\u4E2Akey\u8BBE\u7F6EDep\u76D1\u542C\u7C7B</span>
    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dep<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> reactiveHandler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token function">getTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u6536\u96C6\u4F9D\u8D56</span>
      dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token function">getTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">raw</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> reactiveHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>
        <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">mountApp</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isMounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> prevVdom<span class="token punctuation">;</span>

    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prevVdom <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mount</span><span class="token punctuation">(</span>prevVdom<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> newVdom <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>prevVdom<span class="token punctuation">,</span> newVdom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        prevVdom <span class="token operator">=</span> newVdom<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">mountApp</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$E = _sfc_main$E.setup;
_sfc_main$E.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/DeepDive/miniVue.html.vue");
  return _sfc_setup$E ? _sfc_setup$E(props, ctx) : void 0;
};
var miniVue_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["ssrRender", _sfc_ssrRender$q]]);
var miniVue_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": miniVue_html$1
});
const _sfc_main$D = {};
function _sfc_ssrRender$p(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="usefetch" tabindex="-1"><a class="header-anchor" href="#usefetch" aria-hidden="true">#</a> useFetch</h1><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token operator">=</span> Vue<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token parameter">getUrl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> isPending <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Re-fetch when \`props.id\` has changed.</span>
  <span class="token comment">// \`getUrl()\` is called inside the\`watchEffect()\`, when it gets called,</span>
  <span class="token comment">// it access the \`props.id\`, and that registers the dependency for this</span>
  <span class="token comment">// \`fetch\` effect.</span>

  <span class="token comment">// This \`watchEffect()\` is automatically associated with the \`Post\` component.</span>
  <span class="token comment">// When the \`Post\` component is destroyed, this \`watchEffect()\` will stop by itself.</span>
  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    isPending<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    error<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">.</span>value <span class="token operator">=</span> _data<span class="token punctuation">;</span>
        isPending<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        error<span class="token punctuation">.</span>value <span class="token operator">=</span> err<span class="token punctuation">;</span>
        isPending<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">,</span>
    error<span class="token punctuation">,</span>
    isPending<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Post <span class="token operator">=</span> <span class="token punctuation">{</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;div v-if=&quot;isPending&quot;&gt;loading...&lt;/div&gt;
      &lt;div v-else-if=&quot;data&quot;&gt;{{ data }}&lt;/div&gt;
      &lt;div v-else-if=&quot;error&quot;&gt;Something went wrong: {{ error.message }}&lt;/div&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> isPending <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://jsonplaceholder.typicode.com/todos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>props<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> isPending <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>
  components<span class="token operator">:</span> <span class="token punctuation">{</span> Post <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      &lt;button @click=&quot;id++&quot;&gt;change ID&lt;/button&gt;
      &lt;Post :id=&quot;id&quot; /&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$D = _sfc_main$D.setup;
_sfc_main$D.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/DeepDive/useFetch.html.vue");
  return _sfc_setup$D ? _sfc_setup$D(props, ctx) : void 0;
};
var useFetch_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["ssrRender", _sfc_ssrRender$p]]);
var useFetch_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": useFetch_html$1
});
const _sfc_main$C = {};
function _sfc_ssrRender$o(_ctx, _push, _parent, _attrs) {
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> Setup</h1><h2 id="\u521B\u5EFA\u548C\u8BBE\u7F6E\u7EC4\u4EF6\u5B9E\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u521B\u5EFA\u548C\u8BBE\u7F6E\u7EC4\u4EF6\u5B9E\u4F8B" aria-hidden="true">#</a> \u521B\u5EFA\u548C\u8BBE\u7F6E\u7EC4\u4EF6\u5B9E\u4F8B</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mountComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token parameter">initialVNode<span class="token punctuation">,</span>
  container<span class="token punctuation">,</span>
  anchor<span class="token punctuation">,</span>
  parentComponent<span class="token punctuation">,</span>
  parentSuspense<span class="token punctuation">,</span>
  isSVG<span class="token punctuation">,</span>
  optimized</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u521B\u5EFA\u7EC4\u4EF6\u5B9E\u4F8B</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span>initialVNode<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>
    initialVNode<span class="token punctuation">,</span>
    parentComponent<span class="token punctuation">,</span>
    parentSuspense
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u8BBE\u7F6E\u7EC4\u4EF6\u5B9E\u4F8B</span>
  <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u8BBE\u7F6E\u5E76\u8FD0\u884C\u5E26\u526F\u4F5C\u7528\u7684\u6E32\u67D3\u51FD\u6570</span>
  <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> optimized<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u7EC4\u4EF6\u5B9E\u4F8B\u7684\u8BBE\u7F6E\u6D41\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u4EF6\u5B9E\u4F8B\u7684\u8BBE\u7F6E\u6D41\u7A0B" aria-hidden="true">#</a> \u7EC4\u4EF6\u5B9E\u4F8B\u7684\u8BBE\u7F6E\u6D41\u7A0B</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> isSSR <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">;</span>
  <span class="token comment">// \u5224\u65AD\u662F\u5426\u662F\u4E00\u4E2A\u6709\u72B6\u6001\u7684\u7EC4\u4EF6</span>
  <span class="token keyword">const</span> isStateful <span class="token operator">=</span> shapeFlag <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token comment">// \u521D\u59CB\u5316 props</span>
  <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> props<span class="token punctuation">,</span> isStateful<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u521D\u59CB\u5316 \u63D2\u69FD</span>
  <span class="token function">initSlots</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u8BBE\u7F6E\u6709\u72B6\u6001\u7684\u7EC4\u4EF6\u5B9E\u4F8B</span>
  <span class="token keyword">const</span> setupResult <span class="token operator">=</span> isStateful <span class="token operator">?</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> setupResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6211\u4EEC\u4ECE\u7EC4\u4EF6 vnode \u4E2D\u83B7\u53D6\u4E86 props\u3001children\u3001shapeFlag \u7B49\u5C5E\u6027\uFF0C\u7136\u540E\u5206\u522B\u5BF9 props \u548C\u63D2\u69FD\u8FDB\u884C\u521D\u59CB\u5316\u3002</p><h2 id="setupstatefulcomponent" tabindex="-1"><a class="header-anchor" href="#setupstatefulcomponent" aria-hidden="true">#</a> setupStatefulComponent</h2><p>\u5B83\u4E3B\u8981\u505A\u4E86\u4E09\u4EF6\u4E8B\uFF1A\u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406\u3001\u5224\u65AD\u5904\u7406 setup \u51FD\u6570\u548C\u5B8C\u6210\u7EC4\u4EF6\u5B9E\u4F8B\u8BBE\u7F6E\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> isSSR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> Component <span class="token operator">=</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
  <span class="token comment">// \u521B\u5EFA\u6E32\u67D3\u4EE3\u7406\u7684\u5C5E\u6027\u8BBF\u95EE\u7F13\u5B58</span>
  instance<span class="token punctuation">.</span>accessCache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// \u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406</span>
  instance<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> PublicInstanceProxyHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5224\u65AD\u5904\u7406 setup \u51FD\u6570</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token operator">=</span> Component<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>setup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C setup \u51FD\u6570\u5E26\u53C2\u6570\uFF0C\u5219\u521B\u5EFA\u4E00\u4E2A setupContext</span>
    <span class="token keyword">const</span> setupContext <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>setupContext <span class="token operator">=</span>
      setup<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">createSetupContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u6267\u884C setup \u51FD\u6570\uFF0C\u83B7\u53D6\u7ED3\u679C</span>
    <span class="token keyword">const</span> setupResult <span class="token operator">=</span> <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>setup<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment">/* SETUP_FUNCTION */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
      instance<span class="token punctuation">.</span>props<span class="token punctuation">,</span>
      setupContext<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5904\u7406 setup \u6267\u884C\u7ED3\u679C</span>
    <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5B8C\u6210\u7EC4\u4EF6\u5B9E\u4F8B\u8BBE\u7F6E</span>
    <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406" tabindex="-1"><a class="header-anchor" href="#\u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406" aria-hidden="true">#</a> \u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406</h2><p>\u5230\u4E86 Vue.js 3.0\uFF0C\u4E3A\u4E86\u65B9\u4FBF\u7EF4\u62A4\uFF0C\u6211\u4EEC\u628A\u7EC4\u4EF6\u4E2D\u4E0D\u540C\u72B6\u6001\u7684\u6570\u636E\u5B58\u50A8\u5230\u4E0D\u540C\u7684\u5C5E\u6027\u4E2D\uFF0C\u6BD4\u5982\u5B58\u50A8\u5230 setupState\u3001ctx\u3001data\u3001props \u4E2D\u3002\u6211\u4EEC\u5728\u6267\u884C\u7EC4\u4EF6\u6E32\u67D3\u51FD\u6570\u7684\u65F6\u5019\uFF0C\u4E3A\u4E86\u65B9\u4FBF\u7528\u6237\u4F7F\u7528\uFF0C\u4F1A\u76F4\u63A5\u8BBF\u95EE\u6E32\u67D3\u4E0A\u4E0B\u6587 instance.ctx \u4E2D\u7684\u5C5E\u6027\uFF0C\u6240\u4EE5\u6211\u4EEC\u4E5F\u8981\u505A\u4E00\u5C42 proxy\uFF0C\u5BF9\u6E32\u67D3\u4E0A\u4E0B\u6587 instance.ctx \u5C5E\u6027\u7684\u8BBF\u95EE\u548C\u4FEE\u6539\uFF0C\u4EE3\u7406\u5230\u5BF9 setupState\u3001ctx\u3001data\u3001props \u4E2D\u7684\u6570\u636E\u7684\u8BBF\u95EE\u548C\u4FEE\u6539\u3002</p><ul><li>setupState \u5C31\u662F setup \u51FD\u6570\u8FD4\u56DE\u7684\u6570\u636E\uFF0C\u7A0D\u540E\u6211\u4EEC\u4F1A\u8BE6\u7EC6\u8BF4\uFF1B</li><li>ctx \u5305\u62EC\u4E86\u8BA1\u7B97\u5C5E\u6027\u3001\u7EC4\u4EF6\u65B9\u6CD5\u548C\u7528\u6237\u81EA\u5B9A\u4E49\u7684\u4E00\u4E9B\u6570\u636E\uFF1B</li></ul><h2 id="setup-\u8FD4\u56DE\u503C" tabindex="-1"><a class="header-anchor" href="#setup-\u8FD4\u56DE\u503C" aria-hidden="true">#</a> setup \u8FD4\u56DE\u503C</h2><p>setup \u4E0D\u4EC5\u4EC5\u652F\u6301\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u4E5F\u53EF\u4EE5\u8FD4\u56DE\u4E00\u4E2A\u51FD\u6570\u4F5C\u4E3A\u7EC4\u4EF6\u7684\u6E32\u67D3\u51FD\u6570\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    msg<span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> emit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;toggle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> onClick<span class="token operator">:</span> onClick <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Toggle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="vue3-\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528-setup" tabindex="-1"><a class="header-anchor" href="#vue3-\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528-setup" aria-hidden="true">#</a> vue3 \u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528 setup</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/68477600" target="_blank" rel="noopener noreferrer">Vue Function-based API RFC`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a></li></ul><h2 id="\u8BBE\u8BA1\u52A8\u673A" tabindex="-1"><a class="header-anchor" href="#\u8BBE\u8BA1\u52A8\u673A" aria-hidden="true">#</a> \u8BBE\u8BA1\u52A8\u673A</h2><h3 id="\u903B\u8F91\u7EC4\u5408\u4E0E\u590D\u7528" tabindex="-1"><a class="header-anchor" href="#\u903B\u8F91\u7EC4\u5408\u4E0E\u590D\u7528" aria-hidden="true">#</a> \u903B\u8F91\u7EC4\u5408\u4E0E\u590D\u7528</h3><p><strong>\u7EC4\u4EF6 API \u8BBE\u8BA1\u6240\u9762\u5BF9\u7684\u6838\u5FC3\u95EE\u9898\u4E4B\u4E00\u5C31\u662F\u5982\u4F55\u7EC4\u7EC7\u903B\u8F91\uFF0C\u4EE5\u53CA\u5982\u4F55\u5728\u591A\u4E2A\u7EC4\u4EF6\u4E4B\u95F4\u62BD\u53D6\u548C\u590D\u7528\u903B\u8F91</strong></p><!--]-->`);
}
const _sfc_setup$C = _sfc_main$C.setup;
_sfc_main$C.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/component/setup.html.vue");
  return _sfc_setup$C ? _sfc_setup$C(props, ctx) : void 0;
};
var setup_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["ssrRender", _sfc_ssrRender$o]]);
var setup_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": setup_html$1
});
const _sfc_main$B = {};
function _sfc_ssrRender$n(_ctx, _push, _parent, _attrs) {
}
const _sfc_setup$B = _sfc_main$B.setup;
_sfc_main$B.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/parser/index.html.vue");
  return _sfc_setup$B ? _sfc_setup$B(props, ctx) : void 0;
};
var index_html$g = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["ssrRender", _sfc_ssrRender$n]]);
var index_html$h = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$g
});
const _sfc_main$A = {};
function _sfc_ssrRender$m(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> computed</h1><nav class="table-of-contents"><ul></ul></nav><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getterOrOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// getter \u51FD\u6570</span>
  <span class="token keyword">let</span> getter<span class="token punctuation">;</span>
  <span class="token comment">// setter \u51FD\u6570</span>
  <span class="token keyword">let</span> setter<span class="token punctuation">;</span>
  <span class="token comment">// \u6807\u51C6\u5316\u53C2\u6570</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>getterOrOptions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8868\u9762\u4F20\u5165\u7684\u662F getter \u51FD\u6570\uFF0C\u4E0D\u80FD\u4FEE\u6539\u8BA1\u7B97\u5C5E\u6027\u7684\u503C</span>
    getter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">;</span>
    setter <span class="token operator">=</span>
      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span>
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Write operation failed: computed value is readonly&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token operator">:</span> <span class="token constant">NOOP</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    getter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span>get<span class="token punctuation">;</span>
    setter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span>set<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u6570\u636E\u662F\u5426\u810F\u7684</span>
  <span class="token keyword">let</span> dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">// \u8BA1\u7B97\u7ED3\u679C</span>
  <span class="token keyword">let</span> value<span class="token punctuation">;</span>
  <span class="token keyword">let</span> computed<span class="token punctuation">;</span>
  <span class="token comment">// \u521B\u5EFA\u526F\u4F5C\u7528\u51FD\u6570</span>
  <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5EF6\u65F6\u6267\u884C</span>
    lazy<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// \u6807\u8BB0\u8FD9\u662F\u4E00\u4E2A computed effect \u7528\u4E8E\u5728 trigger \u9636\u6BB5\u7684\u4F18\u5148\u7EA7\u6392\u5E8F</span>
    computed<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// \u8C03\u5EA6\u6267\u884C\u7684\u5B9E\u73B0</span>
    <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// \u6D3E\u53D1\u901A\u77E5\uFF0C\u901A\u77E5\u8FD0\u884C\u8BBF\u95EE\u8BE5\u8BA1\u7B97\u5C5E\u6027\u7684 activeEffect</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>computed<span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u521B\u5EFA computed \u5BF9\u8C61</span>
  computed <span class="token operator">=</span> <span class="token punctuation">{</span>
    __v_isRef<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// \u66B4\u9732 effect \u5BF9\u8C61\u4EE5\u4FBF\u8BA1\u7B97\u5C5E\u6027\u53EF\u4EE5\u505C\u6B62\u8BA1\u7B97</span>
    effect<span class="token operator">:</span> runner<span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8BA1\u7B97\u5C5E\u6027\u7684 getter</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u53EA\u6709\u6570\u636E\u4E3A\u810F\u7684\u65F6\u5019\u624D\u4F1A\u91CD\u65B0\u8BA1\u7B97</span>
        value <span class="token operator">=</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u4F9D\u8D56\u6536\u96C6\uFF0C\u6536\u96C6\u8FD0\u884C\u8BBF\u95EE\u8BE5\u8BA1\u7B97\u5C5E\u6027\u7684 activeEffect</span>
      <span class="token function">track</span><span class="token punctuation">(</span>computed<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8BA1\u7B97\u5C5E\u6027\u7684 setter</span>
      <span class="token function">setter</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> computed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>computed \u8BA1\u7B97\u5C5E\u6027\u6709\u4E24\u4E2A\u7279\u70B9\uFF1A</p><ul><li>\u5EF6\u65F6\u8BA1\u7B97\uFF0C\u53EA\u6709\u5F53\u6211\u4EEC\u8BBF\u95EE\u8BA1\u7B97\u5C5E\u6027\u7684\u65F6\u5019\uFF0C\u5B83\u624D\u4F1A\u771F\u6B63\u8FD0\u884C computed getter \u51FD\u6570\u8BA1\u7B97\uFF1B</li><li>\u7F13\u5B58\uFF0C\u5B83\u7684\u5185\u90E8\u4F1A\u7F13\u5B58\u4E0A\u6B21\u7684\u8BA1\u7B97\u7ED3\u679C value\uFF0C\u800C\u4E14\u53EA\u6709 dirty \u4E3A true \u65F6\u624D\u4F1A\u91CD\u65B0\u8BA1\u7B97\u3002\u5982\u679C\u8BBF\u95EE\u8BA1\u7B97\u5C5E\u6027\u65F6 dirty \u4E3A false\uFF0C\u90A3\u4E48\u76F4\u63A5\u8FD4\u56DE\u8FD9\u4E2A value\u3002</li></ul><p>\u8BA1\u7B97\u5C5E\u6027\u7684\u4F18\u52BF\u662F\uFF1A\u53EA\u8981\u4F9D\u8D56\u4E0D\u53D8\u5316\uFF0C\u5C31\u53EF\u4EE5\u4F7F\u7528\u7F13\u5B58\u7684 value \u800C\u4E0D\u7528\u6BCF\u6B21\u5728\u6E32\u67D3\u7EC4\u4EF6\u7684\u65F6\u5019\u90FD\u6267\u884C\u51FD\u6570\u53BB\u8BA1\u7B97\uFF0C\u8FD9\u662F\u5178\u578B\u7684\u7A7A\u95F4\u6362\u65F6\u95F4\u7684\u4F18\u5316\u601D\u60F3\u3002</p><!--]-->`);
}
const _sfc_setup$A = _sfc_main$A.setup;
_sfc_main$A.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/reactivity/computed.html.vue");
  return _sfc_setup$A ? _sfc_setup$A(props, ctx) : void 0;
};
var computed_html$4 = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["ssrRender", _sfc_ssrRender$m]]);
var computed_html$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": computed_html$4
});
const _sfc_main$z = {};
function _sfc_ssrRender$l(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="reactivity-\u6E90\u7801" tabindex="-1"><a class="header-anchor" href="#reactivity-\u6E90\u7801" aria-hidden="true">#</a> reactivity \u6E90\u7801</h1><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">&#39;__esModule&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Make a map and return a function for checking if a key</span>
<span class="token comment">// is in that map.</span>
<span class="token comment">//</span>
<span class="token comment">// IMPORTANT: all calls of this function must be prefixed with /*#__PURE__*/</span>
<span class="token comment">// So that rollup can tree-shake them if necessary.</span>
<span class="token keyword">function</span> <span class="token function">makeMap</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> expectsLowerCase</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> list <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    map<span class="token punctuation">[</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> expectsLowerCase <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span>map<span class="token punctuation">[</span>val<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span>map<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">EMPTY_OBJ</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">extend</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hasOwnProperty <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">hasOwn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isArray <span class="token operator">=</span> Array<span class="token punctuation">.</span>isArray<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isSymbol</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> objectToString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">toTypeString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">objectToString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">toRawType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">toTypeString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">cacheStringFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> hit <span class="token operator">=</span> cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hit <span class="token operator">||</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> capitalize <span class="token operator">=</span> <span class="token function">cacheStringFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// compare whether a value has changed, accounting for NaN.</span>
<span class="token keyword">const</span> <span class="token function-variable function">hasChanged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  value <span class="token operator">!==</span> oldValue <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> value <span class="token operator">||</span> oldValue <span class="token operator">===</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> effectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> activeEffect<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">ITERATE_KEY</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;iterate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">isEffect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> fn <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fn<span class="token punctuation">.</span>_isEffect <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fn <span class="token operator">=</span> fn<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token function">createReactiveEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> effect<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onStop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    effect<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createReactiveEffect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">reactiveEffect</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  effect<span class="token punctuation">.</span>_isEffect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  effect<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  effect<span class="token punctuation">.</span>raw <span class="token operator">=</span> fn<span class="token punctuation">;</span>
  effect<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  effect<span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>
  <span class="token keyword">return</span> effect<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effect<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effectStack<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">enableTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
      activeEffect <span class="token operator">=</span> effect<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> deps <span class="token punctuation">}</span> <span class="token operator">=</span> effect<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    deps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> trackStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">pauseTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  trackStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shouldTrack<span class="token punctuation">)</span><span class="token punctuation">;</span>
  shouldTrack <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">enableTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  trackStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shouldTrack<span class="token punctuation">)</span><span class="token punctuation">;</span>
  shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> last <span class="token operator">=</span> trackStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  shouldTrack <span class="token operator">=</span> last <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> last<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrack <span class="token operator">||</span> activeEffect <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>depsMap <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      activeEffect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        effect<span class="token operator">:</span> activeEffect<span class="token punctuation">,</span>
        target<span class="token punctuation">,</span>
        type<span class="token punctuation">,</span>
        key<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> oldTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>depsMap <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// never been tracked</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> computedRunners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;clear&#39;</span> <span class="token comment">/* CLEAR */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// collection being cleared</span>
    <span class="token comment">// trigger all effects for target</span>
    depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dep</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">addRunners</span><span class="token punctuation">(</span>effects<span class="token punctuation">,</span> computedRunners<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dep<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">||</span> key <span class="token operator">&gt;=</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addRunners</span><span class="token punctuation">(</span>effects<span class="token punctuation">,</span> computedRunners<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// schedule runs for SET | ADD | DELETE</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">addRunners</span><span class="token punctuation">(</span>effects<span class="token punctuation">,</span> computedRunners<span class="token punctuation">,</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// also run for iteration key on ADD | DELETE | Map.SET</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      type <span class="token operator">===</span> <span class="token string">&#39;add&#39;</span> <span class="token comment">/* ADD */</span> <span class="token operator">||</span>
      type <span class="token operator">===</span> <span class="token string">&#39;delete&#39;</span> <span class="token comment">/* DELETE */</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;set&#39;</span> <span class="token comment">/* SET */</span> <span class="token operator">&amp;&amp;</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> iterationKey <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">:</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">;</span>
      <span class="token function">addRunners</span><span class="token punctuation">(</span>effects<span class="token punctuation">,</span> computedRunners<span class="token punctuation">,</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>iterationKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">scheduleRun</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      newValue<span class="token punctuation">,</span>
      oldValue<span class="token punctuation">,</span>
      oldTarget<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// Important: computed effects must be run first so that computed getters</span>
  <span class="token comment">// can be invalidated before any normal effects that depend on them are run.</span>
  computedRunners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
  effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">addRunners</span><span class="token punctuation">(</span><span class="token parameter">effects<span class="token punctuation">,</span> computedRunners<span class="token punctuation">,</span> effectsToAdd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>effectsToAdd <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    effectsToAdd<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          computedRunners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">scheduleRun</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> extraInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token punctuation">{</span>
      effect<span class="token punctuation">,</span>
      target<span class="token punctuation">,</span>
      key<span class="token punctuation">,</span>
      type<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrigger</span><span class="token punctuation">(</span>extraInfo <span class="token operator">?</span> <span class="token function">extend</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> extraInfo<span class="token punctuation">)</span> <span class="token operator">:</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scheduler <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// global immutability lock</span>
<span class="token keyword">let</span> <span class="token constant">LOCKED</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">LOCKED</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">LOCKED</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> builtInSymbols <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>
  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Symbol<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isSymbol<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shallowReactiveGet <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readonlyGet <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shallowReadonlyGet <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arrayInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token string">&#39;includes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;indexOf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lastIndexOf&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arrayInstrumentations<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toRaw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token parameter">isReadonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSymbol</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> builtInSymbols<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// TODO strict mode that returns a shallow-readonly version of the value</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ref unwrapping, only for Objects, not for Arrays.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token operator">?</span> isReadonly
        <span class="token operator">?</span> <span class="token comment">// need to lazy access readonly and reactive here to avoid</span>
          <span class="token comment">// circular dependency</span>
          <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token operator">:</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shallowReactiveSet <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readonlySet <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shallowReadonlySet <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token parameter">isReadonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isReadonly <span class="token operator">&amp;&amp;</span> <span class="token constant">LOCKED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Set operation on key &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; failed: target is readonly.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRef</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        oldValue<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// don&#39;t trigger if target is something up in the prototype chain of original</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;add&#39;</span> <span class="token comment">/* ADD */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasChanged</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;delete&#39;</span> <span class="token comment">/* DELETE */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;has&#39;</span> <span class="token comment">/* HAS */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;iterate&#39;</span> <span class="token comment">/* ITERATE */</span><span class="token punctuation">,</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> mutableHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
  get<span class="token punctuation">,</span>
  set<span class="token punctuation">,</span>
  deleteProperty<span class="token punctuation">,</span>
  has<span class="token punctuation">,</span>
  ownKeys<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readonlyHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
  get<span class="token operator">:</span> readonlyGet<span class="token punctuation">,</span>
  set<span class="token operator">:</span> readonlySet<span class="token punctuation">,</span>
  has<span class="token punctuation">,</span>
  ownKeys<span class="token punctuation">,</span>
  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LOCKED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Delete operation on key &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; failed: target is readonly.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
          target
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shallowReactiveHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>mutableHandlers<span class="token punctuation">,</span>
  get<span class="token operator">:</span> shallowReactiveGet<span class="token punctuation">,</span>
  set<span class="token operator">:</span> shallowReactiveSet<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Props handlers are special in the sense that it should not unwrap top-level</span>
<span class="token comment">// refs (in order to allow refs to be explicitly passed down), but should</span>
<span class="token comment">// retain the reactivity of the normal readonly object.</span>
<span class="token keyword">const</span> shallowReadonlyHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>readonlyHandlers<span class="token punctuation">,</span>
  get<span class="token operator">:</span> shallowReadonlyGet<span class="token punctuation">,</span>
  set<span class="token operator">:</span> shallowReadonlySet<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">toReactive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">toReadonly</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">readonly</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">getProto</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token keyword">get</span><span class="token function">$1</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> wrap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  key <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">has$1</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  key <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;has&#39;</span> <span class="token comment">/* HAS */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;iterate&#39;</span> <span class="token comment">/* ITERATE */</span><span class="token punctuation">,</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;size&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> hadKey <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;add&#39;</span> <span class="token comment">/* ADD */</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token keyword">set</span><span class="token function">$1</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  key <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> hadKey <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> oldValue <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;add&#39;</span> <span class="token comment">/* ADD */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasChanged</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">deleteEntry</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  key <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> hadKey <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> oldValue <span class="token operator">=</span> proto<span class="token punctuation">.</span>get <span class="token operator">?</span> proto<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token comment">// forward the operation before queueing reactions</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;delete&#39;</span> <span class="token comment">/* DELETE */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> hadItems <span class="token operator">=</span> target<span class="token punctuation">.</span>size <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> oldTarget <span class="token operator">=</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Map</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// forward the operation before queueing reactions</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hadItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;clear&#39;</span> <span class="token comment">/* CLEAR */</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> oldTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createForEach</span><span class="token punctuation">(</span><span class="token parameter">isReadonly</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> wrap <span class="token operator">=</span> isReadonly <span class="token operator">?</span> toReadonly <span class="token operator">:</span> toReactive<span class="token punctuation">;</span>
    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;iterate&#39;</span> <span class="token comment">/* ITERATE */</span><span class="token punctuation">,</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// important: create sure the callback is</span>
    <span class="token comment">// 1. invoked with the reactive map as \`this\` and 3rd arg</span>
    <span class="token comment">// 2. the value received should be a corresponding reactive/readonly.</span>
    <span class="token keyword">function</span> <span class="token function">wrappedCallback</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>observed<span class="token punctuation">,</span> <span class="token function">wrap</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">wrap</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> observed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> wrappedCallback<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createIterableMethod</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> isReadonly</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> isPair <span class="token operator">=</span> method <span class="token operator">===</span> <span class="token string">&#39;entries&#39;</span> <span class="token operator">||</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> Symbol<span class="token punctuation">.</span>iterator <span class="token operator">&amp;&amp;</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> innerIterator <span class="token operator">=</span> <span class="token function">getProto</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> wrap <span class="token operator">=</span> isReadonly <span class="token operator">?</span> toReadonly <span class="token operator">:</span> toReactive<span class="token punctuation">;</span>
    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;iterate&#39;</span> <span class="token comment">/* ITERATE */</span><span class="token punctuation">,</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// return a wrapped iterator which returns observed versions of the</span>
    <span class="token comment">// values emitted from the real iterator</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// iterator protocol</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> innerIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> done
          <span class="token operator">?</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span>
          <span class="token operator">:</span> <span class="token punctuation">{</span>
              value<span class="token operator">:</span> isPair <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">wrap</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">wrap</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">wrap</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
              done<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// iterable protocol</span>
      <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createReadonlyMethod</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LOCKED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">const</span> key <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">on key &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">capitalize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> operation </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">failed: target is readonly.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
          <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> type <span class="token operator">===</span> <span class="token string">&#39;delete&#39;</span> <span class="token comment">/* DELETE */</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> mutableInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">get</span><span class="token function">$1</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> toReactive<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  has<span class="token operator">:</span> has$<span class="token number">1</span><span class="token punctuation">,</span>
  add<span class="token punctuation">,</span>
  set<span class="token operator">:</span> <span class="token keyword">set</span>$<span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token keyword">delete</span><span class="token operator">:</span> deleteEntry<span class="token punctuation">,</span>
  clear<span class="token punctuation">,</span>
  forEach<span class="token operator">:</span> <span class="token function">createForEach</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readonlyInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">get</span><span class="token function">$1</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> toReadonly<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  has<span class="token operator">:</span> has$<span class="token number">1</span><span class="token punctuation">,</span>
  add<span class="token operator">:</span> <span class="token function">createReadonlyMethod</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token string">&#39;add&#39;</span> <span class="token comment">/* ADD */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  set<span class="token operator">:</span> <span class="token function">createReadonlyMethod</span><span class="token punctuation">(</span><span class="token keyword">set</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span> <span class="token comment">/* SET */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token function">createReadonlyMethod</span><span class="token punctuation">(</span>deleteEntry<span class="token punctuation">,</span> <span class="token string">&#39;delete&#39;</span> <span class="token comment">/* DELETE */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  clear<span class="token operator">:</span> <span class="token function">createReadonlyMethod</span><span class="token punctuation">(</span>clear<span class="token punctuation">,</span> <span class="token string">&#39;clear&#39;</span> <span class="token comment">/* CLEAR */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  forEach<span class="token operator">:</span> <span class="token function">createForEach</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iteratorMethods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;keys&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;values&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;entries&#39;</span><span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">;</span>
iteratorMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  mutableInstrumentations<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createIterableMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  readonlyInstrumentations<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createIterableMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createInstrumentationGetter</span><span class="token punctuation">(</span><span class="token parameter">instrumentations</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
      <span class="token function">hasOwn</span><span class="token punctuation">(</span>instrumentations<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> target <span class="token operator">?</span> instrumentations <span class="token operator">:</span> target<span class="token punctuation">,</span>
      key<span class="token punctuation">,</span>
      receiver
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> mutableCollectionHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
  get<span class="token operator">:</span> <span class="token function">createInstrumentationGetter</span><span class="token punctuation">(</span>mutableInstrumentations<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readonlyCollectionHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
  get<span class="token operator">:</span> <span class="token function">createInstrumentationGetter</span><span class="token punctuation">(</span>readonlyInstrumentations<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// WeakMaps that store {raw &lt;-&gt; observed} pairs.</span>
<span class="token keyword">const</span> rawToReactive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> reactiveToRaw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rawToReadonly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readonlyToRaw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// WeakSets for values that are marked readonly or non-reactive during</span>
<span class="token comment">// observable creation.</span>
<span class="token keyword">const</span> readonlyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nonReactiveValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> collectionTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Set<span class="token punctuation">,</span> Map<span class="token punctuation">,</span> WeakMap<span class="token punctuation">,</span> WeakSet<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isObservableType <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">makeMap</span><span class="token punctuation">(</span><span class="token string">&#39;Object,Array,Map,Set,WeakMap,WeakSet&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">canObserve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">!</span>value<span class="token punctuation">.</span>_isVue <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>value<span class="token punctuation">.</span>_isVNode <span class="token operator">&amp;&amp;</span>
    <span class="token function">isObservableType</span><span class="token punctuation">(</span><span class="token function">toRawType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>nonReactiveValues<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// if trying to observe a readonly proxy, return the readonly version.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>readonlyToRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// target is explicitly marked as readonly by user</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>readonlyValues<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">readonly</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>
    target<span class="token punctuation">,</span>
    rawToReactive<span class="token punctuation">,</span>
    reactiveToRaw<span class="token punctuation">,</span>
    mutableHandlers<span class="token punctuation">,</span>
    mutableCollectionHandlers
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// value is a mutable observable, retrieve its original and return</span>
  <span class="token comment">// a readonly version.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>reactiveToRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target <span class="token operator">=</span> reactiveToRaw<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>
    target<span class="token punctuation">,</span>
    rawToReadonly<span class="token punctuation">,</span>
    readonlyToRaw<span class="token punctuation">,</span>
    readonlyHandlers<span class="token punctuation">,</span>
    readonlyCollectionHandlers
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Return a reactive-copy of the original object, where only the root level</span>
<span class="token comment">// properties are readonly, and does NOT unwrap refs nor recursively convert</span>
<span class="token comment">// returned properties.</span>
<span class="token comment">// This is used for creating the props proxy object for stateful components.</span>
<span class="token keyword">function</span> <span class="token function">shallowReadonly</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>
    target<span class="token punctuation">,</span>
    rawToReadonly<span class="token punctuation">,</span>
    readonlyToRaw<span class="token punctuation">,</span>
    shallowReadonlyHandlers<span class="token punctuation">,</span>
    readonlyCollectionHandlers
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Return a reactive-copy of the original object, where only the root level</span>
<span class="token comment">// properties are reactive, and does NOT unwrap refs nor recursively convert</span>
<span class="token comment">// returned properties.</span>
<span class="token keyword">function</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>
    target<span class="token punctuation">,</span>
    rawToReactive<span class="token punctuation">,</span>
    reactiveToRaw<span class="token punctuation">,</span>
    shallowReactiveHandlers<span class="token punctuation">,</span>
    mutableCollectionHandlers
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> toProxy<span class="token punctuation">,</span> toRaw<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">,</span> collectionHandlers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value cannot be made reactive: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// target already has corresponding Proxy</span>
  <span class="token keyword">let</span> observed <span class="token operator">=</span> toProxy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>observed <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> observed<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// target is already a Proxy</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>toRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// only a whitelist of value types can be observed.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canObserve</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> handlers <span class="token operator">=</span> collectionTypes<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token operator">?</span> collectionHandlers <span class="token operator">:</span> baseHandlers<span class="token punctuation">;</span>
  observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  toProxy<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> observed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  toRaw<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>observed<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> observed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isReactive</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> reactiveToRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> readonlyToRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isReadonly</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> readonlyToRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token parameter">observed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> reactiveToRaw<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span> <span class="token operator">||</span> readonlyToRaw<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span> <span class="token operator">||</span> observed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">markReadonly</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  readonlyValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">markNonReactive</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  nonReactiveValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">convert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">isRef</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> r <span class="token operator">?</span> r<span class="token punctuation">.</span>_isRef <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createRef</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createRef</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">{</span>
    _isRef<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> shallow <span class="token operator">?</span> newVal <span class="token operator">:</span> <span class="token function">convert</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> newValue<span class="token operator">:</span> newVal <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">unref</span><span class="token punctuation">(</span><span class="token parameter">ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">isRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>value <span class="token operator">:</span> ref<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">toRefs</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isReactive</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">toRefs() expects a reactive object but received a plain one.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toProxyRef</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">toProxyRef</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    _isRef<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      object<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getterOrOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> getter<span class="token punctuation">;</span>
  <span class="token keyword">let</span> setter<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>getterOrOptions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    getter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">;</span>
    <span class="token function-variable function">setter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Write operation failed: computed value is readonly&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    getter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span>get<span class="token punctuation">;</span>
    setter <span class="token operator">=</span> getterOrOptions<span class="token punctuation">.</span>set<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> value<span class="token punctuation">;</span>
  <span class="token keyword">let</span> computed<span class="token punctuation">;</span>
  <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    lazy<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// mark effect as computed so that it gets priority during trigger</span>
    computed<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>computed<span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  computed <span class="token operator">=</span> <span class="token punctuation">{</span>
    _isRef<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// expose effect so computed can be stopped</span>
    effect<span class="token operator">:</span> runner<span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">track</span><span class="token punctuation">(</span>computed<span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setter</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> computed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span><span class="token constant">ITERATE_KEY</span> <span class="token operator">=</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>computed <span class="token operator">=</span> computed<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>effect <span class="token operator">=</span> effect<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>enableTracking <span class="token operator">=</span> enableTracking<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>isReactive <span class="token operator">=</span> isReactive<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>isReadonly <span class="token operator">=</span> isReadonly<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>isRef <span class="token operator">=</span> isRef<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>markNonReactive <span class="token operator">=</span> markNonReactive<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>markReadonly <span class="token operator">=</span> markReadonly<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>pauseTracking <span class="token operator">=</span> pauseTracking<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>reactive <span class="token operator">=</span> reactive<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>readonly <span class="token operator">=</span> readonly<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>ref <span class="token operator">=</span> ref<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>resetTracking <span class="token operator">=</span> resetTracking<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>shallowReactive <span class="token operator">=</span> shallowReactive<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>shallowReadonly <span class="token operator">=</span> shallowReadonly<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>shallowRef <span class="token operator">=</span> shallowRef<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>stop <span class="token operator">=</span> stop<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>toRaw <span class="token operator">=</span> toRaw<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>toRefs <span class="token operator">=</span> toRefs<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>track <span class="token operator">=</span> track<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>trigger <span class="token operator">=</span> trigger<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>unlock <span class="token operator">=</span> unlock<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>unref <span class="token operator">=</span> unref<span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$z = _sfc_main$z.setup;
_sfc_main$z.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/reactivity/reactivity.cjs.html.vue");
  return _sfc_setup$z ? _sfc_setup$z(props, ctx) : void 0;
};
var reactivity_cjs_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["ssrRender", _sfc_ssrRender$l]]);
var reactivity_cjs_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": reactivity_cjs_html$1
});
var _imports_0 = "/assets/reactivity001.9a79781c.png";
const _sfc_main$y = {};
function _sfc_ssrRender$k(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  _push(`<!--[--><h1 id="\u624B\u5199reactivity" tabindex="-1"><a class="header-anchor" href="#\u624B\u5199reactivity" aria-hidden="true">#</a> \u624B\u5199reactivity</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#basic" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`basic`);
      } else {
        return [
          vue.createTextVNode("basic")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#depsmap" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`depsMap`);
      } else {
        return [
          vue.createTextVNode("depsMap")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#targetmap" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`targetMap`);
      } else {
        return [
          vue.createTextVNode("targetMap")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#proxy-and-reflect" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`Proxy and Reflect`);
      } else {
        return [
          vue.createTextVNode("Proxy and Reflect")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#activeeffect" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`activeEffect`);
      } else {
        return [
          vue.createTextVNode("activeEffect")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#ref" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`ref`);
      } else {
        return [
          vue.createTextVNode("ref")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#computed" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`computed`);
      } else {
        return [
          vue.createTextVNode("computed")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></nav><p>\u7B80\u5355\u7248 reactivity</p><h2 id="basic" tabindex="-1"><a class="header-anchor" href="#basic" aria-hidden="true">#</a> basic</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> price <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> quantity <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> price <span class="token operator">*</span> quantity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="depsmap" tabindex="-1"><a class="header-anchor" href="#depsmap" aria-hidden="true">#</a> depsMap</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Make sure this effect is being tracked.</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// There is no dep (effects) on this key yet</span>
    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new Set</span>
  <span class="token punctuation">}</span>

  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add effect to dep</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the dep (effects) associated with this key</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If they exist</span>
    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// run them all</span>
      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">{</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">track</span><span class="token punctuation">(</span><span class="token string">&#39;quantity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(total)</span>

product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>
<span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;quantity&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// console.log(total)</span>
</code></pre></div><h2 id="targetmap" tabindex="-1"><a class="header-anchor" href="#targetmap" aria-hidden="true">#</a> targetMap</h2><p><img${serverRenderer.ssrRenderAttr("src", _imports_0)} alt="reactivity001"></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it&#39;s updated</span>
<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// We need to make sure this effect is being tracked.</span>
  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current depsMap for this target</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// There is no map.</span>
    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create one</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// There is no dependencies (effects)</span>
    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new Set</span>
  <span class="token punctuation">}</span>
  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add effect to dependency map</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// run them all</span>
      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token punctuation">{</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">track</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">&#39;quantity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>


product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span>
<span class="token function">trigger</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> <span class="token string">&#39;quantity&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre></div><h2 id="proxy-and-reflect" tabindex="-1"><a class="header-anchor" href="#proxy-and-reflect" aria-hidden="true">#</a> Proxy and Reflect</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it&#39;s updated</span>
<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// We need to make sure this effect is being tracked.</span>
  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current depsMap for this target</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// There is no map.</span>
    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create one</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// There is no dependencies (effects)</span>
    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new Set</span>
  <span class="token punctuation">}</span>
  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add effect to dependency map</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// run them all</span>
      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before updated quantity total = &#39;</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after updated quantity total = &#39;</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Updated quantity to = &#39;</span> <span class="token operator">+</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="activeeffect" tabindex="-1"><a class="header-anchor" href="#activeeffect" aria-hidden="true">#</a> activeEffect</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it&#39;s updated</span>
<span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// The active effect running</span>

<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// &lt;------ Check to see if we have an activeEffect</span>
    <span class="token comment">// We need to make sure this effect is being tracked.</span>
    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current depsMap for this target</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// There is no map.</span>
      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create one</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// There is no dependencies (effects)</span>
      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new Set</span>
    <span class="token punctuation">}</span>
    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add effect to dependency map</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// run them all</span>
      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  activeEffect <span class="token operator">=</span> eff<span class="token punctuation">;</span>
  <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> salePrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  salePrice <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Before updated quantity total (should be 10) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">After updated quantity total (should be 15) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">After updated price total (should be 30) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u4E0A\u9762\u7684\u4F8B\u5B50\u5982\u679C\u505A\u4E00\u4E0B\u66F4\u6539</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> salePrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> salePrice <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  salePrice <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u7B2C\u4E00\u4E2A effect \u7684 salePrice \u4F9D\u8D56\u7B2C\u4E8C\u4E2A effect \u7684 salePrice \u65F6\uFF0C\u7531\u4E8E salePrice \u4E0D\u662F\u54CD\u5E94\u5F0F\u7684\uFF0C\u6240\u4EE5\u4E0D\u8D77\u4F5C\u7528\u3002\u53EF\u4EE5\u4F7F\u7528 ref \u5C06 salePrice \u505A\u6210\u54CD\u5E94\u5F0F\u7684\u3002</p><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it&#39;s updated</span>
<span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// The active effect running</span>

<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// &lt;------ Check to see if we have an activeEffect</span>
    <span class="token comment">// We need to make sure this effect is being tracked.</span>
    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current depsMap for this target</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// There is no map.</span>
      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create one</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// There is no dependencies (effects)</span>
      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new Set</span>
    <span class="token punctuation">}</span>
    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add effect to dependency map</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// run them all</span>
      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">raw</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> raw<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      raw <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// function ref(intialValue) {</span>
<span class="token comment">//   return reactive({ value: initialValue })</span>
<span class="token comment">// }</span>

<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  activeEffect <span class="token operator">=</span> eff<span class="token punctuation">;</span>
  <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> salePrice <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  salePrice<span class="token punctuation">.</span>value <span class="token operator">=</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  total <span class="token operator">=</span> salePrice<span class="token punctuation">.</span>value <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Before updated quantity total (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">After updated quantity total (should be 13.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">After updated price total (should be 27) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> computed</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// targetMap stores the effects that each object should re-run when it&#39;s updated</span>
<span class="token keyword">let</span> activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// The active effect running</span>

<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// &lt;------ Check to see if we have an activeEffect</span>
    <span class="token comment">// We need to make sure this effect is being tracked.</span>
    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current depsMap for this target</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// There is no map.</span>
      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create one</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get the current dependencies (effects) that need to be run when this is set</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// There is no dependencies (effects)</span>
      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Create a new Set</span>
    <span class="token punctuation">}</span>
    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add effect to dependency map</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Does this object have any properties that have dependencies (effects)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If there are dependencies (effects) associated with this</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// run them all</span>
      <span class="token function">eff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) is GET inside then track the effect to rerun on SET</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> oldValue <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// If this reactive property (target) has effects to rerun on SET, trigger them.</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">raw</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> raw<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      raw <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">eff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  activeEffect <span class="token operator">=</span> eff<span class="token punctuation">;</span>
  <span class="token function">activeEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  activeEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">getter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> price<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> quantity<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> salePrice <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> product<span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> salePrice<span class="token punctuation">.</span>value <span class="token operator">*</span> product<span class="token punctuation">.</span>quantity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Before updated quantity total (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">After updated quantity total (should be 13.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 4.5) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
product<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">After updated price total (should be 27) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>total<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> salePrice (should be 9) = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>salePrice<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Plus let&#39;s verify we can add additional objects to the reactive object</span>

product<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Shoes&#39;</span><span class="token punctuation">;</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Product name is now </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>product<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

product<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Socks&#39;</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$y = _sfc_main$y.setup;
_sfc_main$y.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/reactivity/reactivity.html.vue");
  return _sfc_setup$y ? _sfc_setup$y(props, ctx) : void 0;
};
var reactivity_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["ssrRender", _sfc_ssrRender$k]]);
var reactivity_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": reactivity_html$1
});
const _sfc_main$x = {};
function _sfc_ssrRender$j(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h1><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>
  source<span class="token operator">:</span> WatchSource <span class="token operator">|</span> WatchSource<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> WatchEffect <span class="token operator">|</span> object<span class="token punctuation">,</span>
  cb<span class="token operator">:</span> WatchCallback <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> immediate<span class="token punctuation">,</span> deep<span class="token punctuation">,</span> flush<span class="token punctuation">,</span> onTrack<span class="token punctuation">,</span> onTrigger <span class="token punctuation">}</span><span class="token operator">:</span> WatchOptions <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>
  instance <span class="token operator">=</span> currentInstance
<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> forceTrigger <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> isMultiSource <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token comment">// \u5BF9\u4E0D\u540C\u7684\u60C5\u51B5\u505Agetter\u8D4B\u503C</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ref\u901A\u8FC7.value\u83B7\u53D6</span>
    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>source <span class="token keyword">as</span> Ref<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    forceTrigger <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>source <span class="token keyword">as</span> Ref<span class="token punctuation">)</span><span class="token punctuation">.</span>_shallow<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// reactive\u76F4\u63A5\u83B7\u53D6</span>
    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> source<span class="token punctuation">;</span>
    deep <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u662F\u6570\u7EC4\uFF0C\u505A\u904D\u5386\u5904\u7406</span>
    isMultiSource <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    forceTrigger <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isReactive<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      source<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> s<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">WATCH_GETTER</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            instance <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          __DEV__ <span class="token operator">&amp;&amp;</span> <span class="token function">warnInvalidSource</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u662F\u51FD\u6570\u7684\u60C5\u51B5</span>
    <span class="token comment">// \u6709cb\u5219\u4E3Awatch\uFF0C\u6CA1\u6709\u5219\u4E3AwatchEffect</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// getter with cb</span>
      <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">WATCH_GETTER</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
          instance <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// no cb -&gt; simple effect</span>
      <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>isUnmounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cleanup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">callWithAsyncErrorHandling</span><span class="token punctuation">(</span>
          source<span class="token punctuation">,</span>
          instance<span class="token punctuation">,</span>
          ErrorCodes<span class="token punctuation">.</span><span class="token constant">WATCH_CALLBACK</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span>onInvalidate<span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5F02\u5E38\u60C5\u51B5</span>
    getter <span class="token operator">=</span> <span class="token constant">NOOP</span><span class="token punctuation">;</span>
    <span class="token comment">// \u629B\u51FA\u5F02\u5E38</span>
    __DEV__ <span class="token operator">&amp;&amp;</span> <span class="token function">warnInvalidSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u6DF1\u5EA6\u76D1\u542C\u903B\u8F91\u5904\u7406</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">&amp;&amp;</span> deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> baseGetter <span class="token operator">=</span> getter<span class="token punctuation">;</span>
    <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token function">baseGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> <span class="token function-variable function">cleanup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> onInvalidate<span class="token operator">:</span> <span class="token function-variable function">InvalidateCbRegistrator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cleanup <span class="token operator">=</span> runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function-variable function">onStop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">WATCH_CLEANUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// \u8BB0\u5F55oldValue\uFF0C\u5E76\u901A\u8FC7runner\u83B7\u53D6newValue</span>
  <span class="token comment">// callback\u7684\u5C01\u88C5\u5904\u7406\u4E3Ajob</span>
  <span class="token keyword">let</span> oldValue <span class="token operator">=</span> isMultiSource <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">INITIAL_WATCHER_VALUE</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> job<span class="token operator">:</span> <span class="token function-variable function">SchedulerJob</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>runner<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// watch(source, cb)</span>
      <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        deep <span class="token operator">||</span>
        forceTrigger <span class="token operator">||</span>
        <span class="token punctuation">(</span>isMultiSource
          <span class="token operator">?</span> <span class="token punctuation">(</span>newValue <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
              <span class="token function">hasChanged</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">(</span>oldValue <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
          <span class="token operator">:</span> <span class="token function">hasChanged</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span>
          <span class="token function">isArray</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token function">isCompatEnabled</span><span class="token punctuation">(</span>DeprecationTypes<span class="token punctuation">.</span><span class="token constant">WATCH_ARRAY</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// cleanup before running cb again</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cleanup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">callWithAsyncErrorHandling</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">WATCH_CALLBACK</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
          newValue<span class="token punctuation">,</span>
          <span class="token comment">// pass undefined as the old value when it&#39;s changed for the first time</span>
          oldValue <span class="token operator">===</span> <span class="token constant">INITIAL_WATCHER_VALUE</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> oldValue<span class="token punctuation">,</span>
          onInvalidate<span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oldValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// watchEffect</span>
      <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// important: mark the job as a watcher callback so that scheduler knows</span>
  <span class="token comment">// it is allowed to self-trigger (#1727)</span>
  job<span class="token punctuation">.</span>allowRecurse <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>cb<span class="token punctuation">;</span>

  <span class="token comment">// \u901A\u8FC7\u8BFB\u53D6\u914D\u7F6E\uFF0C\u5904\u7406job\u7684\u89E6\u53D1\u65F6\u673A</span>
  <span class="token comment">// \u5E76\u518D\u6B21\u5C06job\u7684\u6267\u884C\u5C01\u88C5\u5230scheduler\u4E2D</span>
  <span class="token keyword">let</span> scheduler<span class="token operator">:</span> ReactiveEffectOptions<span class="token punctuation">[</span><span class="token string">&#39;scheduler&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>flush <span class="token operator">===</span> <span class="token string">&#39;sync&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u540C\u6B65\u6267\u884C</span>
    scheduler <span class="token operator">=</span> job<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u66F4\u65B0\u540E\u6267\u884C</span>
    <span class="token function-variable function">scheduler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> instance <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>suspense<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// default: &#39;pre&#39;</span>
    <span class="token comment">// \u66F4\u65B0\u524D\u6267\u884C</span>
    <span class="token function-variable function">scheduler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance <span class="token operator">||</span> instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">queuePreFlushCb</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// with &#39;pre&#39; option, the first call must happen before</span>
        <span class="token comment">// the component is mounted so it is called synchronously.</span>
        <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u4F7F\u7528effect\u526F\u4F5C\u7528\u5904\u7406\u4F9D\u8D56\u6536\u96C6\uFF0C\u5728\u4F9D\u8D56\u66F4\u65B0\u540E\u8C03\u7528scheduler\uFF08\u5176\u4E2D\u5C01\u88C5\u4E86callback\u7684\u6267\u884C\uFF09</span>
  <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    lazy<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    onTrack<span class="token punctuation">,</span>
    onTrigger<span class="token punctuation">,</span>
    scheduler<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u6536\u96C6\u4F9D\u8D56</span>
  <span class="token function">recordInstanceBoundEffect</span><span class="token punctuation">(</span>runner<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u8BFB\u53D6\u914D\u7F6E\uFF0C\u8FDB\u884Cwatch\u521D\u59CB\u5316</span>
  <span class="token comment">// \u662F\u5426\u6709cb</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u662F\u5426\u7ACB\u523B\u6267\u884C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      oldValue <span class="token operator">=</span> <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u662F\u5426\u66F4\u65B0\u540E\u6267\u884C</span>
    <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>runner<span class="token punctuation">,</span> instance <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>suspense<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u8FD4\u56DE\u624B\u52A8\u505C\u6B62\u51FD\u6570</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">stop</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">remove</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>effects<span class="token operator">!</span><span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$x = _sfc_main$x.setup;
_sfc_main$x.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/reactivity/watch.html.vue");
  return _sfc_setup$x ? _sfc_setup$x(props, ctx) : void 0;
};
var watch_html$4 = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["ssrRender", _sfc_ssrRender$j]]);
var watch_html$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": watch_html$4
});
const _sfc_main$w = {};
function _sfc_ssrRender$i(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  _push(`<!--[--><h1 id="\u7EC4\u4EF6\u6E32\u67D3" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u4EF6\u6E32\u67D3" aria-hidden="true">#</a> \u7EC4\u4EF6\u6E32\u67D3</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u666E\u901A\u5143\u7D20\u8282\u70B9" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u666E\u901A\u5143\u7D20\u8282\u70B9`);
      } else {
        return [
          vue.createTextVNode("\u666E\u901A\u5143\u7D20\u8282\u70B9")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u7EC4\u4EF6\u8282\u70B9" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u7EC4\u4EF6\u8282\u70B9`);
      } else {
        return [
          vue.createTextVNode("\u7EC4\u4EF6\u8282\u70B9")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u90A3\u4E48-vnode-\u6709\u4EC0\u4E48\u4F18\u52BF" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u90A3\u4E48 vnode \u6709\u4EC0\u4E48\u4F18\u52BF`);
      } else {
        return [
          vue.createTextVNode("\u90A3\u4E48 vnode \u6709\u4EC0\u4E48\u4F18\u52BF")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u521B\u5EFA-vnode" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u521B\u5EFA vnode`);
      } else {
        return [
          vue.createTextVNode("\u521B\u5EFA vnode")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u6E32\u67D3-vnode" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u6E32\u67D3 vnode`);
      } else {
        return [
          vue.createTextVNode("\u6E32\u67D3 vnode")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#patch-\u51FD\u6570" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`patch \u51FD\u6570`);
      } else {
        return [
          vue.createTextVNode("patch \u51FD\u6570")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D`);
      } else {
        return [
          vue.createTextVNode("\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></nav><p>vnode \u548C\u7EC4\u4EF6\u7684\u5173\u7CFB</p><p>vnode \u672C\u8D28\u4E0A\u662F\u7528\u6765\u63CF\u8FF0 DOM \u7684 JavaScript \u5BF9\u8C61\uFF0C\u5B83\u5728 Vue.js \u4E2D\u53EF\u4EE5\u63CF\u8FF0\u4E0D\u540C\u7C7B\u578B\u7684\u8282\u70B9\uFF0C\u6BD4\u5982\u666E\u901A\u5143\u7D20\u8282\u70B9\u3001\u7EC4\u4EF6\u8282\u70B9\u7B49\u3002</p><h2 id="\u666E\u901A\u5143\u7D20\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u666E\u901A\u5143\u7D20\u8282\u70B9" aria-hidden="true">#</a> \u666E\u901A\u5143\u7D20\u8282\u70B9</h2><p>\u7528 vnode \u8868\u793A\u4E00\u4E2A <code>&lt;button&gt;</code> \u6807\u7B7E\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;btn&#39;</span><span class="token punctuation">,</span>
    style<span class="token operator">:</span> <span class="token punctuation">{</span>
      width<span class="token operator">:</span> <span class="token string">&#39;100px&#39;</span><span class="token punctuation">,</span>
      height<span class="token operator">:</span> <span class="token string">&#39;50px&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  children<span class="token operator">:</span> <span class="token string">&#39;click me&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u7EC4\u4EF6\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u4EF6\u8282\u70B9" aria-hidden="true">#</a> \u7EC4\u4EF6\u8282\u70B9</h2><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-component</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-component</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> CustomComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;CustomComponent&#39;</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    msg<span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      tag<span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
      props<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token string">&#39;click me&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> CustomComponent<span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    msg<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u4ECE\u4E0A\u9762\u7684\u4EE3\u7801\u53EF\u4EE5\u770B\u51FA\u7EC4\u4EF6\u548C vnode \u7684\u533A\u522B\u3002</p><h2 id="\u90A3\u4E48-vnode-\u6709\u4EC0\u4E48\u4F18\u52BF" tabindex="-1"><a class="header-anchor" href="#\u90A3\u4E48-vnode-\u6709\u4EC0\u4E48\u4F18\u52BF" aria-hidden="true">#</a> \u90A3\u4E48 vnode \u6709\u4EC0\u4E48\u4F18\u52BF</h2><ul><li>\u62BD\u8C61\uFF0C\u5F15\u5165 vnode\uFF0C\u53EF\u4EE5\u628A\u6E32\u67D3\u8FC7\u7A0B\u62BD\u8C61\u5316</li><li>\u8DE8\u5E73\u53F0</li></ul><h2 id="\u521B\u5EFA-vnode" tabindex="-1"><a class="header-anchor" href="#\u521B\u5EFA-vnode" aria-hidden="true">#</a> \u521B\u5EFA vnode</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">,</span> rootProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>createVNode</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5904\u7406 props \u76F8\u5173\u903B\u8F91\uFF0C\u6807\u51C6\u5316 class \u548C style</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5BF9 vnode \u7C7B\u578B\u4FE1\u606F\u7F16\u7801</span>
  <span class="token keyword">const</span> shapeFlag <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token number">1</span> <span class="token comment">/* ELEMENT */</span>
    <span class="token operator">:</span> <span class="token function">isSuspense</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token number">128</span> <span class="token comment">/* SUSPENSE */</span>
    <span class="token operator">:</span> <span class="token function">isTeleport</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token number">64</span> <span class="token comment">/* TELEPORT */</span>
    <span class="token operator">:</span> <span class="token function">isObject</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token number">4</span> <span class="token comment">/* STATEFUL_COMPONENT */</span>
    <span class="token operator">:</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token number">2</span> <span class="token comment">/* FUNCTIONAL_COMPONENT */</span>
    <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">,</span>
    props<span class="token punctuation">,</span>
    shapeFlag<span class="token punctuation">,</span>
    <span class="token comment">// \u4E00\u4E9B\u5176\u4ED6\u5C5E\u6027</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6807\u51C6\u5316\u5B50\u8282\u70B9\uFF0C\u628A\u4E0D\u540C\u6570\u636E\u7C7B\u578B\u7684 children \u8F6C\u6210\u6570\u7EC4\u6216\u8005\u6587\u672C\u7C7B\u578B</span>
  <span class="token function">normalizeChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> vnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>createVNode \u505A\u7684\u4E8B\u60C5\u5F88\u7B80\u5355\uFF0C\u5C31\u662F\uFF1A\u5BF9 props \u505A\u6807\u51C6\u5316\u5904\u7406\u3001\u5BF9 vnode \u7684\u7C7B\u578B\u4FE1\u606F\u7F16\u7801\u3001\u521B\u5EFA vnode \u5BF9\u8C61\uFF0C\u6807\u51C6\u5316\u5B50\u8282\u70B9 children\u3002</p><h2 id="\u6E32\u67D3-vnode" tabindex="-1"><a class="header-anchor" href="#\u6E32\u67D3-vnode" aria-hidden="true">#</a> \u6E32\u67D3 vnode</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u9500\u6BC1\u7EC4\u4EF6</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u521B\u5EFA\u6216\u8005\u66F4\u65B0\u7EC4\u4EF6</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u7F13\u5B58 vnode \u8282\u70B9\uFF0C\u8868\u793A\u5DF2\u7ECF\u6E32\u67D3</span>
  container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u6E32\u67D3\u51FD\u6570 render \u7684\u5B9E\u73B0\u5F88\u7B80\u5355\uFF0C\u5982\u679C\u5B83\u7684\u7B2C\u4E00\u4E2A\u53C2\u6570 vnode \u4E3A\u7A7A\uFF0C\u5219\u6267\u884C\u9500\u6BC1\u7EC4\u4EF6\u7684\u903B\u8F91\uFF0C\u5426\u5219\u6267\u884C\u521B\u5EFA\u6216\u8005\u66F4\u65B0\u7EC4\u4EF6\u7684\u903B\u8F91\u3002</p><h2 id="patch-\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#patch-\u51FD\u6570" aria-hidden="true">#</a> patch \u51FD\u6570</h2><p>patch \u672C\u610F\u662F\u6253\u8865\u4E01\u7684\u610F\u601D\uFF0C\u8FD9\u4E2A\u51FD\u6570\u6709\u4E24\u4E2A\u529F\u80FD\uFF0C\u4E00\u4E2A\u662F\u6839\u636E vnode \u6302\u8F7D DOM\uFF0C\u4E00\u4E2A\u662F\u6839\u636E\u65B0\u65E7 vnode \u66F4\u65B0 DOM\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token parameter">n1<span class="token punctuation">,</span>
  n2<span class="token punctuation">,</span>
  container<span class="token punctuation">,</span>
  anchor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  parentComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  parentSuspense <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  isSVG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  optimized <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5982\u679C\u5B58\u5728\u65B0\u65E7\u8282\u70B9, \u4E14\u65B0\u65E7\u8282\u70B9\u7C7B\u578B\u4E0D\u540C\uFF0C\u5219\u9500\u6BC1\u65E7\u8282\u70B9</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    anchor <span class="token operator">=</span> <span class="token function">getNextHostNode</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> n2<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> Text<span class="token operator">:</span>
      <span class="token comment">// \u5904\u7406\u6587\u672C\u8282\u70B9</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> Comment<span class="token operator">:</span>
      <span class="token comment">// \u5904\u7406\u6CE8\u91CA\u8282\u70B9</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> Static<span class="token operator">:</span>
      <span class="token comment">// \u5904\u7406\u9759\u6001\u8282\u70B9</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> Fragment<span class="token operator">:</span>
      <span class="token comment">// \u5904\u7406 Fragment \u5143\u7D20</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token comment">/* ELEMENT */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5904\u7406\u666E\u901A DOM \u5143\u7D20</span>
        <span class="token function">processElement</span><span class="token punctuation">(</span>
          n1<span class="token punctuation">,</span>
          n2<span class="token punctuation">,</span>
          container<span class="token punctuation">,</span>
          anchor<span class="token punctuation">,</span>
          parentComponent<span class="token punctuation">,</span>
          parentSuspense<span class="token punctuation">,</span>
          isSVG<span class="token punctuation">,</span>
          optimized
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> <span class="token number">6</span> <span class="token comment">/* COMPONENT */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5904\u7406\u7EC4\u4EF6</span>
        <span class="token function">processComponent</span><span class="token punctuation">(</span>
          n1<span class="token punctuation">,</span>
          n2<span class="token punctuation">,</span>
          container<span class="token punctuation">,</span>
          anchor<span class="token punctuation">,</span>
          parentComponent<span class="token punctuation">,</span>
          parentSuspense<span class="token punctuation">,</span>
          isSVG<span class="token punctuation">,</span>
          optimized
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> <span class="token number">64</span> <span class="token comment">/* TELEPORT */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5904\u7406 TELEPORT</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> <span class="token number">128</span> <span class="token comment">/* SUSPENSE */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5904\u7406 SUSPENSE</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>\u7B2C\u4E00\u4E2A\u53C2\u6570 n1 \u8868\u793A\u65E7\u7684 vnode\uFF0C\u5F53 n1 \u4E3A null \u7684\u65F6\u5019\uFF0C\u8868\u793A\u662F\u4E00\u6B21\u6302\u8F7D\u7684\u8FC7\u7A0B\uFF1B</li><li>\u7B2C\u4E8C\u4E2A\u53C2\u6570 n2 \u8868\u793A\u65B0\u7684 vnode \u8282\u70B9\uFF0C\u540E\u7EED\u4F1A\u6839\u636E\u8FD9\u4E2A vnode \u7C7B\u578B\u6267\u884C\u4E0D\u540C\u7684\u5904\u7406\u903B\u8F91\uFF1B</li><li>\u7B2C\u4E09\u4E2A\u53C2\u6570 container \u8868\u793A DOM \u5BB9\u5668\uFF0C\u4E5F\u5C31\u662F vnode \u6E32\u67D3\u751F\u6210 DOM \u540E\uFF0C\u4F1A\u6302\u8F7D\u5230 container \u4E0B\u9762\u3002</li></ul><h2 id="\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D" tabindex="-1"><a class="header-anchor" href="#\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D" aria-hidden="true">#</a> \u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D</h2><p>\u5C06 Vue \u7EC4\u4EF6\u5C01\u88C5\u5728 promise \u4E2D\uFF1A\u5982 <code>message</code> \u7EC4\u4EF6\uFF0C<code>dialog</code> \u7EC4\u4EF6\u3002vue2 \u53EF\u4EE5\u501F\u52A9 <code>extend</code> Api\uFF0CVue3 \u53EF\u4EE5\u7528\u4E0B\u9762\u7684\u65B9\u6CD5\u3002</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> createVNode<span class="token punctuation">,</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * \u6E32\u67D3\u7EC4\u4EF6\u5B9E\u4F8B
 * <span class="token keyword">@param</span> <span class="token parameter">Constructor</span> \u7EC4\u4EF6
 * <span class="token keyword">@param</span> <span class="token parameter">props</span> \u7EC4\u4EF6\u53C2\u6570
 * <span class="token keyword">@returns</span> \u7EC4\u4EF6\u5B9E\u4F8B
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">renderInstance</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  Constructor<span class="token operator">:</span> Component<span class="token punctuation">,</span>
  props<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  props<span class="token punctuation">.</span><span class="token function-variable function">vanish</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u9500\u6BC1</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// \u521B\u5EFAvnode</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Constructor<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6E32\u67D3</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u6DFB\u52A0\u5B50\u5143\u7D20(\u7EC4\u4EF6)\u81F3\u7236\u5143\u7D20</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * \u6A21\u6001\u6846\u8C03\u7528\u65B9\u6CD5
 * <span class="token keyword">@param</span> <span class="token parameter">props</span>
 * <span class="token keyword">@returns</span> <span class="token punctuation">{</span>Promise<span class="token punctuation">}</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Modal</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">renderInstance</span><span class="token punctuation">(</span>Index<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>props<span class="token punctuation">,</span>
      resolve<span class="token punctuation">,</span>
      reject<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>\u53C2\u8003 element-plus message \u7EC4\u4EF6\u7684\u5B9E\u73B0\u65B9\u5F0F\u3002</p><!--]-->`);
}
const _sfc_setup$w = _sfc_main$w.setup;
_sfc_main$w.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/renderer/componentRender.html.vue");
  return _sfc_setup$w ? _sfc_setup$w(props, ctx) : void 0;
};
var componentRender_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["ssrRender", _sfc_ssrRender$i]]);
var componentRender_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": componentRender_html$1
});
const _sfc_main$v = {};
function _sfc_ssrRender$h(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="createappapi" tabindex="-1"><a class="header-anchor" href="#createappapi" aria-hidden="true">#</a> createAppAPI</h1><p>\u4E0B\u9762\u662F\u9879\u76EE\u542F\u52A8\u7684\u4E00\u4E2A\u7B80\u5355\u4F8B\u5B50\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>import \u4E2D\u7684 createApp</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span>createApp <span class="token operator">=</span> createApp<span class="token punctuation">;</span>
</code></pre></div><p>createApp</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span>
    <span class="token function">injectNativeTagCheck</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">injectCompilerOptionsCheck</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token operator">=</span> app<span class="token punctuation">;</span>
  app<span class="token punctuation">.</span><span class="token function-variable function">mount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">containerOrSelector</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token function">normalizeContainer</span><span class="token punctuation">(</span>containerOrSelector<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> component <span class="token operator">=</span> app<span class="token punctuation">.</span>_component<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>component<span class="token punctuation">.</span>render <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>component<span class="token punctuation">.</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// __UNSAFE__</span>
      <span class="token comment">// Reason: potential execution of JS expressions in in-DOM template.</span>
      <span class="token comment">// The user must make sure the in-DOM template is trusted. If it&#39;s</span>
      <span class="token comment">// rendered by the server, the template should not contain any user data.</span>
      component<span class="token punctuation">.</span>template <span class="token operator">=</span> container<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// clear content before mounting</span>
    container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> container <span class="token keyword">instanceof</span> <span class="token class-name">SVGElement</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>container <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      container<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;v-cloak&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      container<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-v-app&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> app<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> renderer <span class="token operator">||</span> <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> createApp <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  patchProp<span class="token punctuation">,</span>
  <span class="token operator">...</span>nodeOps<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">baseCreateRenderer</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">baseCreateRenderer</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> createHydrationFns</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> isSVG</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>
        container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        vnode<span class="token punctuation">,</span>
        container<span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
        isSVG
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">flushPostFlushCbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    render<span class="token punctuation">,</span>
    hydrate<span class="token punctuation">,</span>
    createApp<span class="token operator">:</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> uid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span><span class="token parameter">render<span class="token punctuation">,</span> hydrate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token parameter">rootComponent<span class="token punctuation">,</span> rootProps <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootProps <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>rootProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn$1</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">root props passed to app.mount() must be an object.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      rootProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createAppContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> installedPlugins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> isMounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token punctuation">{</span>
      _uid<span class="token operator">:</span> uid<span class="token operator">++</span><span class="token punctuation">,</span>
      _component<span class="token operator">:</span> rootComponent<span class="token punctuation">,</span>
      _props<span class="token operator">:</span> rootProps<span class="token punctuation">,</span>
      _container<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      _context<span class="token operator">:</span> context<span class="token punctuation">,</span>
      _instance<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      version<span class="token punctuation">,</span>
      <span class="token keyword">get</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> context<span class="token punctuation">.</span>config<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token keyword">set</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          <span class="token function">warn$1</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">app.config cannot be replaced. Modify individual options instead.</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">plugin<span class="token punctuation">,</span> <span class="token operator">...</span>options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn$1</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Plugin has already been applied to target app.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>install<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          installedPlugins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
          plugin<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          installedPlugins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">plugin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">warn$1</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">A plugin must either be a function or an object with an &quot;install&quot; </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">function.</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> app<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">mixin</span><span class="token punctuation">(</span><span class="token parameter">mixin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>mixins<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>mixin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>mixins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mixin<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">warn$1</span><span class="token punctuation">(</span>
              <span class="token string">&#39;Mixin has already been applied to target app&#39;</span> <span class="token operator">+</span>
                <span class="token punctuation">(</span>mixin<span class="token punctuation">.</span>name <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mixin<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> app<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">component</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          <span class="token function">validateComponentName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> context<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> context<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn$1</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Component &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; has already been registered in target app.</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        context<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> component<span class="token punctuation">;</span>
        <span class="token keyword">return</span> app<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">directive</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> directive</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
          <span class="token function">validateDirectiveName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>directive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> context<span class="token punctuation">.</span>directives<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>directives<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn$1</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Directive &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; has already been registered in target app.</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        context<span class="token punctuation">.</span>directives<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> directive<span class="token punctuation">;</span>
        <span class="token keyword">return</span> app<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">rootContainer<span class="token punctuation">,</span> isHydrate<span class="token punctuation">,</span> isSVG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">,</span> rootProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// store app context on the root VNode.</span>
          <span class="token comment">// this will be set on the root instance on initial mount.</span>
          vnode<span class="token punctuation">.</span>appContext <span class="token operator">=</span> context<span class="token punctuation">;</span>
          <span class="token comment">// HMR root reload</span>
          <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function-variable function">reload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">render</span><span class="token punctuation">(</span><span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">,</span> rootContainer<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>isHydrate <span class="token operator">&amp;&amp;</span> hydrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">hydrate</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          app<span class="token punctuation">.</span>_container <span class="token operator">=</span> rootContainer<span class="token punctuation">;</span>
          rootContainer<span class="token punctuation">.</span>__vue_app__ <span class="token operator">=</span> app<span class="token punctuation">;</span>
          <span class="token punctuation">{</span>
            app<span class="token punctuation">.</span>_instance <span class="token operator">=</span> vnode<span class="token punctuation">.</span>component<span class="token punctuation">;</span>
            <span class="token function">devtoolsInitApp</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token function">getExposeProxy</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token operator">||</span> vnode<span class="token punctuation">.</span>component<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">warn$1</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">App has already been mounted.\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">If you want to remount the same app, move your app creation logic </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">into a factory function and create fresh app instances for each </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mount - e.g. \\\`const createMyApp = () =&gt; createApp(App)\\\`</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>_container<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">{</span>
            app<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token function">devtoolsUnmountApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">delete</span> app<span class="token punctuation">.</span>_container<span class="token punctuation">.</span>__vue_app__<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">warn$1</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Cannot unmount an app that is not mounted.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">provide</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> context<span class="token punctuation">.</span>provides<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">warn$1</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">App already provides property with key &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">It will be overwritten with the new value.</span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// TypeScript doesn&#39;t allow symbols as index type</span>
        <span class="token comment">// https://github.com/Microsoft/TypeScript/issues/24587</span>
        context<span class="token punctuation">.</span>provides<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> app<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> app<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createAppContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    app<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    config<span class="token operator">:</span> <span class="token punctuation">{</span>
      isNativeTag<span class="token operator">:</span> <span class="token constant">NO</span><span class="token punctuation">,</span>
      performance<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      globalProperties<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      optionMergeStrategies<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      errorHandler<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      warnHandler<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      compilerOptions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    mixins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    directives<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    provides<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    optionsCache<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    propsCache<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    emitsCache<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$v = _sfc_main$v.setup;
_sfc_main$v.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/renderer/createAppAPI.html.vue");
  return _sfc_setup$v ? _sfc_setup$v(props, ctx) : void 0;
};
var createAppAPI_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["ssrRender", _sfc_ssrRender$h]]);
var createAppAPI_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": createAppAPI_html$1
});
const _sfc_main$u = {};
function _sfc_ssrRender$g(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="\u6E32\u67D3\u5668\u4E0E\u54CD\u5E94\u5F0F\u7CFB\u7EDF\u7684\u7ED3\u5408" tabindex="-1"><a class="header-anchor" href="#\u6E32\u67D3\u5668\u4E0E\u54CD\u5E94\u5F0F\u7CFB\u7EDF\u7684\u7ED3\u5408" aria-hidden="true">#</a> \u6E32\u67D3\u5668\u4E0E\u54CD\u5E94\u5F0F\u7CFB\u7EDF\u7684\u7ED3\u5408</h1><p>\u5B9E\u73B0\u539F\u7406\uFF0C\u5C06 renderer \u5728\u526F\u4F5C\u7528\u4E2D\u6267\u884C\uFF0C\u624D\u4F1A\u88AB\u4F9D\u8D56\u6536\u96C6\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> effect<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token operator">=</span> VueReactivity<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">renderer</span><span class="token punctuation">(</span><span class="token parameter">domString<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> domString<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">renderer</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre></div><p>vue \u4E2D\u4F7F\u7528\u65F6\uFF0Ceffect \u4E3B\u8981\u7531 createApp \u63D0\u4F9B\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>createApp \u7531 createRenderer \u63D0\u4F9B</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    createApp<span class="token operator">:</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>createAppAPI</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span><span class="token parameter">render</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token parameter">rootComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>
      _component<span class="token operator">:</span> rootComponent<span class="token punctuation">,</span>
      <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">rootContainer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> app<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>patch</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span>
  <span class="token parameter">n1<span class="token punctuation">,</span>
  n2<span class="token punctuation">,</span>
  container <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  anchor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  parentComponent <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5904\u7406 component</span>
  <span class="token function">processComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">processComponent</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mountComponent</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">updateComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. \u5148\u521B\u5EFA\u4E00\u4E2A component instance</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span>initialVNode<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>
    initialVNode<span class="token punctuation">,</span>
    parentComponent
  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8C03\u7528 render</span>
  <span class="token comment">// \u5E94\u8BE5\u4F20\u5165 ctx \u4E5F\u5C31\u662F proxy</span>
  <span class="token comment">// ctx \u53EF\u4EE5\u9009\u62E9\u66B4\u9732\u7ED9\u7528\u6237\u7684 api</span>
  <span class="token comment">// \u6E90\u4EE3\u7801\u91CC\u9762\u662F\u8C03\u7528\u7684 renderComponentRoot \u51FD\u6570</span>
  <span class="token comment">// \u8FD9\u91CC\u4E3A\u4E86\u7B80\u5316\u76F4\u63A5\u8C03\u7528 render</span>

  <span class="token comment">// \u4ECE\u54EA\u91CC\u505A\u4E00\u4E9B\u4E8B</span>
  <span class="token comment">// \u6536\u96C6\u6570\u636E\u6539\u53D8\u4E4B\u540E\u8981\u505A\u7684\u4E8B (\u51FD\u6570)</span>
  <span class="token comment">// \u4F9D\u8D56\u6536\u96C6   effect \u51FD\u6570</span>
  <span class="token comment">// \u89E6\u53D1\u4F9D\u8D56</span>
  <span class="token keyword">function</span> <span class="token function">componentUpdateFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u7EC4\u4EF6\u521D\u59CB\u5316\u7684\u65F6\u5019\u4F1A\u6267\u884C\u8FD9\u91CC</span>
      <span class="token comment">// \u4E3A\u4EC0\u4E48\u8981\u5728\u8FD9\u91CC\u8C03\u7528 render \u51FD\u6570\u5462</span>
      <span class="token comment">// \u662F\u56E0\u4E3A\u5728 effect \u5185\u8C03\u7528 render \u624D\u80FD\u89E6\u53D1\u4F9D\u8D56\u6536\u96C6</span>
      <span class="token comment">// \u7B49\u5230\u540E\u9762\u54CD\u5E94\u5F0F\u7684\u503C\u53D8\u66F4\u540E\u4F1A\u518D\u6B21\u89E6\u53D1\u8FD9\u4E2A\u51FD\u6570</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:\u8C03\u7528 render,\u83B7\u53D6 subTree</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> proxyToUse <span class="token operator">=</span> instance<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span>
      <span class="token comment">// \u53EF\u5728 render \u51FD\u6570\u4E2D\u901A\u8FC7 this \u6765\u4F7F\u7528 proxy</span>
      <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>
        instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>proxyToUse<span class="token punctuation">,</span> proxyToUse<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// \u8FD9\u91CC\u57FA\u4E8E subTree \u518D\u6B21\u8C03\u7528 patch</span>
      <span class="token comment">// \u57FA\u4E8E render \u8FD4\u56DE\u7684 vnode \uFF0C\u518D\u6B21\u8FDB\u884C\u6E32\u67D3</span>
      <span class="token comment">// \u8FD9\u91CC\u6211\u628A\u8FD9\u4E2A\u884C\u4E3A\u9690\u55BB\u6210\u5F00\u7BB1</span>
      <span class="token comment">// \u4E00\u4E2A\u7EC4\u4EF6\u5C31\u662F\u4E00\u4E2A\u7BB1\u5B50</span>
      <span class="token comment">// \u91CC\u9762\u6709\u53EF\u80FD\u662F element \uFF08\u4E5F\u5C31\u662F\u53EF\u4EE5\u76F4\u63A5\u6E32\u67D3\u7684\uFF09</span>
      <span class="token comment">// \u4E5F\u6709\u53EF\u80FD\u8FD8\u662F component</span>
      <span class="token comment">// \u8FD9\u91CC\u5C31\u662F\u9012\u5F52\u7684\u5F00\u7BB1</span>
      <span class="token comment">// \u800C subTree \u5C31\u662F\u5F53\u524D\u7684\u8FD9\u4E2A\u7BB1\u5B50\uFF08\u7EC4\u4EF6\uFF09\u88C5\u7684\u4E1C\u897F</span>
      <span class="token comment">// \u7BB1\u5B50\uFF08\u7EC4\u4EF6\uFF09\u53EA\u662F\u4E2A\u6982\u5FF5\uFF0C\u5B83\u5B9E\u9645\u662F\u4E0D\u9700\u8981\u6E32\u67D3\u7684</span>
      <span class="token comment">// \u8981\u6E32\u67D3\u7684\u662F\u7BB1\u5B50\u91CC\u9762\u7684 subTree</span>
      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u628A root element \u8D4B\u503C\u7ED9 \u7EC4\u4EF6\u7684vnode.el \uFF0C\u4E3A\u540E\u7EED\u8C03\u7528 $el \u7684\u65F6\u5019\u83B7\u53D6\u503C</span>
      initialVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> subTree<span class="token punctuation">.</span>el<span class="token punctuation">;</span>

      instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u54CD\u5E94\u5F0F\u7684\u503C\u53D8\u66F4\u540E\u4F1A\u4ECE\u8FD9\u91CC\u6267\u884C\u903B\u8F91</span>
      <span class="token comment">// \u4E3B\u8981\u5C31\u662F\u62FF\u5230\u65B0\u7684 vnode \uFF0C\u7136\u540E\u548C\u4E4B\u524D\u7684 vnode \u8FDB\u884C\u5BF9\u6BD4</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:\u8C03\u7528\u66F4\u65B0\u903B\u8F91</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u62FF\u5230\u6700\u65B0\u7684 subTree</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> next<span class="token punctuation">,</span> vnode <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">;</span>

      <span class="token comment">// \u5982\u679C\u6709 next \u7684\u8BDD\uFF0C \u8BF4\u660E\u9700\u8981\u66F4\u65B0\u7EC4\u4EF6\u7684\u6570\u636E\uFF08props\uFF0Cslots \u7B49\uFF09</span>
      <span class="token comment">// \u5148\u66F4\u65B0\u7EC4\u4EF6\u7684\u6570\u636E\uFF0C\u7136\u540E\u66F4\u65B0\u5B8C\u6210\u540E\uFF0C\u5728\u7EE7\u7EED\u5BF9\u6BD4\u5F53\u524D\u7EC4\u4EF6\u7684\u5B50\u5143\u7D20</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u95EE\u9898\u662F next \u548C vnode \u7684\u533A\u522B\u662F\u4EC0\u4E48</span>
        next<span class="token punctuation">.</span>el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">;</span>
        <span class="token function">updateComponentPreRender</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">const</span> proxyToUse <span class="token operator">=</span> instance<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span>
      <span class="token keyword">const</span> nextTree <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>
        instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>proxyToUse<span class="token punctuation">,</span> proxyToUse<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u66FF\u6362\u4E4B\u524D\u7684 subTree</span>
      <span class="token keyword">const</span> prevTree <span class="token operator">=</span> instance<span class="token punctuation">.</span>subTree<span class="token punctuation">;</span>
      instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> nextTree<span class="token punctuation">;</span>

      <span class="token comment">// \u7528\u65E7\u7684 vnode \u548C\u65B0\u7684 vnode \u4EA4\u7ED9 patch \u6765\u5904\u7406</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>prevTree<span class="token punctuation">,</span> nextTree<span class="token punctuation">,</span> prevTree<span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u5728 vue3.2 \u7248\u672C\u91CC\u9762\u662F\u4F7F\u7528\u7684 new ReactiveEffect</span>
  <span class="token comment">// \u81F3\u4E8E\u4E3A\u4EC0\u4E48\u4E0D\u76F4\u63A5\u7528 effect \uFF0C\u662F\u56E0\u4E3A\u9700\u8981\u4E00\u4E2A scope  \u53C2\u6570\u6765\u6536\u96C6\u6240\u6709\u7684 effect</span>
  <span class="token comment">// \u800C effect \u8FD9\u4E2A\u51FD\u6570\u662F\u5BF9\u5916\u7684 api \uFF0C\u662F\u4E0D\u53EF\u4EE5\u8F7B\u6613\u6539\u53D8\u53C2\u6570\u7684\uFF0C\u6240\u4EE5\u4F1A\u4F7F\u7528  new ReactiveEffect</span>
  <span class="token comment">// \u56E0\u4E3A ReactiveEffect \u662F\u5185\u90E8\u5BF9\u8C61\uFF0C\u52A0\u4E00\u4E2A\u53C2\u6570\u662F\u65E0\u6240\u8C13\u7684</span>

  instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>componentUpdateFn<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u628A effect \u63A8\u5230\u5FAE\u4EFB\u52A1\u7684\u65F6\u5019\u5728\u6267\u884C</span>
      <span class="token comment">// queueJob(effect);</span>
      <span class="token function">queueJob</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$u = _sfc_main$u.setup;
_sfc_main$u.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/sourceCode/renderer/index.html.vue");
  return _sfc_setup$u ? _sfc_setup$u(props, ctx) : void 0;
};
var index_html$e = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["ssrRender", _sfc_ssrRender$g]]);
var index_html$f = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$e
});
const _sfc_main$t = {};
function _sfc_ssrRender$f(_ctx, _push, _parent, _attrs) {
  const _component_RouterLink = vue.resolveComponent("RouterLink");
  const _component_OutboundLink = vue.resolveComponent("OutboundLink");
  _push(`<!--[--><h1 id="createserver" tabindex="-1"><a class="header-anchor" href="#createserver" aria-hidden="true">#</a> createServer</h1><nav class="table-of-contents"><ul><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#createserver-1" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`createServer`);
      } else {
        return [
          vue.createTextVNode("createServer")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#vitedevserver" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`ViteDevServer`);
      } else {
        return [
          vue.createTextVNode("ViteDevServer")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li><li>`);
  _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: "#\u4E00\u4E2A\u4F8B\u5B50" }, {
    default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
      if (_push2) {
        _push2(`\u4E00\u4E2A\u4F8B\u5B50`);
      } else {
        return [
          vue.createTextVNode("\u4E00\u4E2A\u4F8B\u5B50")
        ];
      }
    }),
    _: 1
  }, _parent));
  _push(`</li></ul></nav><h2 id="createserver-1" tabindex="-1"><a class="header-anchor" href="#createserver-1" aria-hidden="true">#</a> createServer</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span>
  <span class="token parameter">inlineConfig<span class="token operator">:</span> InlineConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span>inlineConfig<span class="token punctuation">,</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// \u9879\u76EE\u6839\u76EE\u5F55\uFF08index.html \u6587\u4EF6\u6240\u5728\u7684\u4F4D\u7F6E\uFF09\u3002\u53EF\u4EE5\u662F\u4E00\u4E2A\u7EDD\u5BF9\u8DEF\u5F84\uFF0C\u6216\u8005\u4E00\u4E2A\u76F8\u5BF9\u4E8E\u8BE5\u914D\u7F6E\u6587\u4EF6\u672C\u8EAB\u7684\u8DEF\u5F84\u3002</span>
  <span class="token keyword">const</span> root <span class="token operator">=</span> config<span class="token punctuation">.</span>root
  <span class="token keyword">const</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span>server
  <span class="token keyword">const</span> httpsOptions <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveHttpsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> middlewareMode <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig
  <span class="token keyword">if</span> <span class="token punctuation">(</span>middlewareMode <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    middlewareMode <span class="token operator">=</span> <span class="token string">&#39;ssr&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> middlewares <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Connect<span class="token punctuation">.</span>Server
  <span class="token keyword">const</span> httpServer <span class="token operator">=</span> middlewareMode
    <span class="token operator">?</span> <span class="token keyword">null</span>
    <span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">resolveHttpServer</span><span class="token punctuation">(</span>serverConfig<span class="token punctuation">,</span> middlewares<span class="token punctuation">,</span> httpsOptions<span class="token punctuation">)</span>
  <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token function">createWebSocketServer</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> config<span class="token punctuation">,</span> httpsOptions<span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> ignored <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>watchOptions <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig<span class="token punctuation">.</span>watch <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// \u4F7F\u7528chokidar\u76D1\u63A7root\u76EE\u5F55\uFF0C\u5FFD\u7565node_modules\u3001.git</span>
  <span class="token keyword">const</span> watcher <span class="token operator">=</span> chokidar<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    ignored<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&#39;**/node_modules/**&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;**/.git/**&#39;</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>ignored<span class="token punctuation">)</span> <span class="token operator">?</span> ignored <span class="token operator">:</span> <span class="token punctuation">[</span>ignored<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    ignoreInitial<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    ignorePermissionErrors<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    disableGlobbing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>watchOptions
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> FSWatcher

  <span class="token keyword">const</span> plugins <span class="token operator">=</span> config<span class="token punctuation">.</span>plugins
  <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createPluginContainer</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> watcher<span class="token punctuation">)</span>
  <span class="token keyword">const</span> moduleGraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleGraph</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
  <span class="token keyword">const</span> closeHttpServer <span class="token operator">=</span> <span class="token function">createServerCloseFn</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">)</span>

  <span class="token comment">// eslint-disable-next-line prefer-const</span>
  <span class="token keyword">let</span> <span class="token function-variable function">exitProcess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

  <span class="token keyword">const</span> server<span class="token operator">:</span> ViteDevServer <span class="token operator">=</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">,</span>
    middlewares<span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      config<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ViteDevServer.app is deprecated. Use ViteDevServer.middlewares instead.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
      <span class="token keyword">return</span> middlewares
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    httpServer<span class="token punctuation">,</span>
    watcher<span class="token punctuation">,</span>
    pluginContainer<span class="token operator">:</span> container<span class="token punctuation">,</span>
    ws<span class="token punctuation">,</span>
    moduleGraph<span class="token punctuation">,</span>
    transformWithEsbuild<span class="token punctuation">,</span>
    <span class="token function">transformRequest</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> server<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    transformIndexHtml<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// to be immediately set</span>
    <span class="token function">ssrLoadModule</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>server<span class="token punctuation">.</span>_ssrExternals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        server<span class="token punctuation">.</span>_ssrExternals <span class="token operator">=</span> <span class="token function">resolveSSRExternal</span><span class="token punctuation">(</span>
          config<span class="token punctuation">,</span>
          server<span class="token punctuation">.</span>_optimizeDepsMetadata
            <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>_optimizeDepsMetadata<span class="token punctuation">.</span>optimized<span class="token punctuation">)</span>
            <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token function">ssrLoadModule</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> server<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">ssrFixStacktrace</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> stacktrace <span class="token operator">=</span> <span class="token function">ssrRewriteStacktrace</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">,</span> moduleGraph<span class="token punctuation">)</span>
        <span class="token function">rebindErrorStacktrace</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> stacktrace<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">port<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span> isRestart<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">startServer</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> port<span class="token punctuation">,</span> isRestart<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      process<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;SIGTERM&#39;</span><span class="token punctuation">,</span> exitProcess<span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span> <span class="token operator">!==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> exitProcess<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        watcher<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        container<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">closeHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">printUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>httpServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printHttpServerUrls</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> config<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;cannot print server URLs in middleware mode.&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    _optimizeDepsMetadata<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    _ssrExternals<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    _globImporters<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    _isRunningOptimizer<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    _registerMissingImport<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    _pendingReload<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    _pendingRequests<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  server<span class="token punctuation">.</span>transformIndexHtml <span class="token operator">=</span> <span class="token function">createDevHtmlTransformFn</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>

  <span class="token function-variable function">exitProcess</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  process<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;SIGTERM&#39;</span><span class="token punctuation">,</span> exitProcess<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span> <span class="token operator">!==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> exitProcess<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    file <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token comment">// invalidate module graph cache on file change</span>
    moduleGraph<span class="token punctuation">.</span><span class="token function">onFileChange</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>serverConfig<span class="token punctuation">.</span>hmr <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">handleHMRUpdate</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> server<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          type<span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
          err<span class="token operator">:</span> <span class="token function">prepareError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;unlink&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">handleFileAddUnlink</span><span class="token punctuation">(</span><span class="token function">normalizePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> httpServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    httpServer<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;listening&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// update actual port since this may be different from initial value</span>
      serverConfig<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token punctuation">(</span>httpServer<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> AddressInfo<span class="token punctuation">)</span><span class="token punctuation">.</span>port
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// apply server configuration hooks from plugins</span>
  <span class="token keyword">const</span> postHooks<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>configureServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      postHooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> plugin<span class="token punctuation">.</span><span class="token function">configureServer</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Internal middlewares ------------------------------------------------------</span>

  <span class="token comment">// request timer</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">timeMiddleware</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// cors (enabled by default)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> cors <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cors <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">corsMiddleware</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> cors <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> cors<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// proxy</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> proxy <span class="token punctuation">}</span> <span class="token operator">=</span> serverConfig
  <span class="token keyword">if</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4E3A\u5F00\u53D1\u670D\u52A1\u5668\u914D\u7F6E\u4EE3\u7406\u81EA\u5B9A\u4E49\u4EE3\u7406\u89C4\u5219</span>
    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">proxyMiddleware</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// base</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>base <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">baseMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// open in editor support</span>
  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/__open-in-editor&#39;</span><span class="token punctuation">,</span> <span class="token function">launchEditorMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// hmr reconnect ping</span>
  <span class="token comment">// Keep the named function. The name is visible in debug logs via \`DEBUG=connect:dispatcher ...\`</span>
  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/__vite_ping&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">viteHMRPingMiddleware</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// serve static files under /public</span>
  <span class="token comment">// this applies before the transform middleware so that these files are served</span>
  <span class="token comment">// as-is without transforms.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>publicDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">servePublicMiddleware</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>publicDir<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// main transform middleware</span>
  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">transformMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// serve static files</span>
  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serveRawFsMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>
  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serveStaticMiddleware</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// spa fallback</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">||</span> middlewareMode <span class="token operator">===</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">spaFallbackMiddleware</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// run post config hooks</span>
  <span class="token comment">// This is applied before the html middleware so that user middleware can</span>
  <span class="token comment">// serve custom content instead of index.html.</span>
  postHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">||</span> middlewareMode <span class="token operator">===</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// transform index.html</span>
    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">indexHtmlMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// handle 404s</span>
    <span class="token comment">// Keep the named function. The name is visible in debug logs via \`DEBUG=connect:dispatcher ...\`</span>
    middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">vite404Middleware</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// error handler</span>
  middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">errorMiddleware</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span>middlewareMode<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">runOptimize</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>cacheDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      server<span class="token punctuation">.</span>_isRunningOptimizer <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        server<span class="token punctuation">.</span>_optimizeDepsMetadata <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">optimizeDeps</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        server<span class="token punctuation">.</span>_isRunningOptimizer <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
      server<span class="token punctuation">.</span>_registerMissingImport <span class="token operator">=</span> <span class="token function">createMissingImporterRegisterFn</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>middlewareMode <span class="token operator">&amp;&amp;</span> httpServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isOptimized <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token comment">// overwrite listen to run optimizer before server start</span>
    <span class="token keyword">const</span> listen <span class="token operator">=</span> httpServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>httpServer<span class="token punctuation">)</span>
    httpServer<span class="token punctuation">.</span>listen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">port<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isOptimized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">await</span> <span class="token function">runOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          isOptimized <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          httpServer<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">runOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> server
<span class="token punctuation">}</span>
</code></pre></div><ul><li>connect :\u9488\u5BF9 http \u670D\u52A1\u7684\u4E2D\u95F4\u4EF6\u6A21\u578B\uFF0C\u7C7B\u4F3C koa</li><li>chokidar:\u7CBE\u7B80\u7684\u8DE8\u7AEF\u6587\u4EF6\u76D1\u63A7\u5E93</li><li><a href="https://github.com/acornjs/acorn" target="_blank" rel="noopener noreferrer">acorn`);
  _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
  _push(`</a>: js \u8BED\u6CD5\u89E3\u6790\u5668</li><li>magic-string: js \u6E90\u7801 string \u64CD\u4F5C pkg</li></ul><p>\u8FD4\u56DE\u4E00\u4E2A server\uFF0C\u5177\u4F53\u89E3\u91CA\u5728 ViteDevServer \u63A5\u53E3\u4E2D\u3002</p><h2 id="vitedevserver" tabindex="-1"><a class="header-anchor" href="#vitedevserver" aria-hidden="true">#</a> ViteDevServer</h2><p>vite \u5F00\u53D1\u670D\u52A1\u5668</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ViteDevServer</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * \u88AB\u89E3\u6790\u7684 vite \u914D\u7F6E\u5BF9\u8C61
   */</span>
  config<span class="token operator">:</span> ResolvedConfig<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * \u4E00\u4E2A connect \u5E94\u7528\u5B9E\u4F8B
   * - \u53EF\u4EE5\u7528\u4E8E\u5C06\u81EA\u5B9A\u4E49\u4E2D\u95F4\u4EF6\u9644\u52A0\u5230\u5F00\u53D1\u670D\u52A1\u5668\u3002
   * - \u8FD8\u53EF\u4EE5\u7528\u4F5C\u81EA\u5B9A\u4E49http\u670D\u52A1\u5668\u7684\u5904\u7406\u51FD\u6570
      \u6216\u4F5C\u4E3A\u4E2D\u95F4\u4EF6\u7528\u4E8E\u4EFB\u4F55 connect \u98CE\u683C\u7684 Node.js \u6846\u67B6
   *
   * https://github.com/senchalabs/connect#use-middleware
   */</span>
  middlewares<span class="token operator">:</span> Connect<span class="token punctuation">.</span>Server<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * \u672C\u673A node http \u670D\u52A1\u5668\u5B9E\u4F8B
   */</span>
  httpServer<span class="token operator">:</span> http<span class="token punctuation">.</span>Server <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * chokidar \u76D1\u542C\u5668\u5B9E\u4F8B
   * https://github.com/paulmillr/chokidar#api
   */</span>
  watcher<span class="token operator">:</span> FSWatcher<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * web socket \u670D\u52A1\u5668\uFF0C\u5E26\u6709 \`send(payload)\` \u65B9\u6CD5
   */</span>
  ws<span class="token operator">:</span> WebSocketServer<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Rollup \u63D2\u4EF6\u5BB9\u5668\uFF0C\u53EF\u4EE5\u9488\u5BF9\u7ED9\u5B9A\u6587\u4EF6\u8FD0\u884C\u63D2\u4EF6\u94A9\u5B50
   */</span>
  pluginContainer<span class="token operator">:</span> PluginContainer<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * \u8DDF\u8E2A\u5BFC\u5165\u5173\u7CFB\u3001url \u5230\u6587\u4EF6\u6620\u5C04\u548C hmr \u72B6\u6001\u7684\u6A21\u5757\u56FE\u3002
   */</span>
  moduleGraph<span class="token operator">:</span> ModuleGraph<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * \u4EE5\u4EE3\u7801\u65B9\u5F0F\u89E3\u6790\u3001\u52A0\u8F7D\u548C\u8F6C\u6362 url \u5E76\u83B7\u53D6\u7ED3\u679C
   * \u800C\u4E0D\u9700\u8981\u901A\u8FC7 http \u8BF7\u6C42\u7BA1\u9053\u3002
   */</span>
  <span class="token function">transformRequest</span><span class="token punctuation">(</span>
    url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    options<span class="token operator">?</span><span class="token operator">:</span> TransformOptions
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TransformResult <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * \u542F\u52A8\u670D\u52A1\u5668
   */</span>
  <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> isRestart<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * \u505C\u6B62\u670D\u52A1\u5668
   */</span>
  <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u4E00\u4E2A\u4F8B\u5B50" tabindex="-1"><a class="header-anchor" href="#\u4E00\u4E2A\u4F8B\u5B50" aria-hidden="true">#</a> \u4E00\u4E2A\u4F8B\u5B50</h2><p>\u4E0B\u9762\u662F\u4E00\u4E2A createServer \u7684\u4F8B\u5B50\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> createServer<span class="token operator">:</span> createViteServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u4EE5\u4E2D\u95F4\u4EF6\u6A21\u5F0F\u521B\u5EFA vite \u5E94\u7528\uFF0C\u8FD9\u5C06\u7981\u7528 Vite \u81EA\u8EAB\u7684 HTML \u670D\u52A1\u903B\u8F91</span>
  <span class="token comment">// \u5E76\u8BA9\u4E0A\u7EA7\u670D\u52A1\u5668\u63A5\u7BA1\u63A7\u5236</span>
  <span class="token keyword">const</span> vite <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createViteServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    server<span class="token operator">:</span> <span class="token punctuation">{</span> middlewareMode<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u4F7F\u7528 vite \u7684 Connect \u5B9E\u4F8B\u4F5C\u4E3A\u4E2D\u95F4\u4EF6</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vite<span class="token punctuation">.</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">;</span>

  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u670D\u52A1 index.html - \u4E0B\u9762\u6211\u4EEC\u6765\u5904\u7406\u8FD9\u4E2A\u95EE\u9898</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$t = _sfc_main$t.setup;
_sfc_main$t.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vite/sourceCode/createServer.html.vue");
  return _sfc_setup$t ? _sfc_setup$t(props, ctx) : void 0;
};
var createServer_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["ssrRender", _sfc_ssrRender$f]]);
var createServer_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": createServer_html$1
});
const _sfc_main$s = {};
function _sfc_ssrRender$e(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> http</h1><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolveHttpServer</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token punctuation">{</span> proxy <span class="token punctuation">}</span><span class="token operator">:</span> ServerOptions<span class="token punctuation">,</span>
  app<span class="token operator">:</span> Connect<span class="token punctuation">.</span>Server<span class="token punctuation">,</span>
  httpsOptions<span class="token operator">?</span><span class="token operator">:</span> HttpsServerOptions</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>HttpServer<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>httpsOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// #484 fallback to http1 when proxy is needed.</span>
    <span class="token comment">// \u5982\u679C\u4E0E Proxy/Https \u4E00\u8D77\u4F7F\u7528\uFF0C\u8BF7\u5C06 ViteJS \u66F4\u6539\u4E3A\u81EA\u52A8\u56DE\u9000\u5230 http1.1</span>
    <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>httpsOptions<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSecureServer</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        <span class="token operator">...</span>httpsOptions<span class="token punctuation">,</span>
        allowHTTP1<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      app
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>require(&#39;http&#39;).createServer(app)</code>\u4E3A\u4EC0\u4E48\u5728 import \u7684\u8BED\u6CD5\u80FD\u8FD9\u6837\u4F7F\u7528</p><!--]-->`);
}
const _sfc_setup$s = _sfc_main$s.setup;
_sfc_main$s.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vite/sourceCode/http.html.vue");
  return _sfc_setup$s ? _sfc_setup$s(props, ctx) : void 0;
};
var http_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["ssrRender", _sfc_ssrRender$e]]);
var http_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": http_html$1
});
const _sfc_main$r = {};
function _sfc_ssrRender$d(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="indexhtmlmiddleware" tabindex="-1"><a class="header-anchor" href="#indexhtmlmiddleware" aria-hidden="true">#</a> indexHtmlMiddleware</h1><h2 id="indexhtml" tabindex="-1"><a class="header-anchor" href="#indexhtml" aria-hidden="true">#</a> indexHtml</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">indexHtmlMiddleware</span><span class="token punctuation">(</span>
  <span class="token parameter">server<span class="token operator">:</span> ViteDevServer</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Connect<span class="token punctuation">.</span>NextHandleFunction <span class="token punctuation">{</span>
  <span class="token comment">// Keep the named function. The name is visible in debug logs via \`DEBUG=connect:dispatcher ...\`</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">viteIndexHtmlMiddleware</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url <span class="token operator">&amp;&amp;</span> <span class="token function">cleanUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// spa-fallback always redirects to /index.html</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token operator">?.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;sec-fetch-dest&#39;</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token function">getHtmlFilename</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        html <span class="token operator">=</span> <span class="token keyword">await</span> server<span class="token punctuation">.</span><span class="token function">transformIndexHtml</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> html<span class="token punctuation">,</span> req<span class="token punctuation">.</span>originalUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> html<span class="token punctuation">,</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>Vite \u5C06 <code>index.html</code> \u89C6\u4E3A\u6E90\u7801\u548C\u6A21\u5757\u56FE\u7684\u4E00\u90E8\u5206\u3002Vite \u89E3\u6790 <code>&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt;</code> \uFF0C\u8FD9\u4E2A\u6807\u7B7E\u6307\u5411\u4F60\u7684 JavaScript \u6E90\u7801\u3002\u751A\u81F3\u5185\u8054\u5F15\u5165 JavaScript \u7684 <code>&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt;</code> \u548C\u5F15\u7528 CSS \u7684 <code>&lt;link href&gt;</code> \u4E5F\u80FD\u5229\u7528 Vite \u7279\u6709\u7684\u529F\u80FD\u88AB\u89E3\u6790\u3002\u53E6\u5916\uFF0C<code>index.html</code> \u4E2D\u7684 URL \u5C06\u88AB\u81EA\u52A8\u8F6C\u6362\uFF0C\u56E0\u6B64\u4E0D\u518D\u9700\u8981 <code>%PUBLIC_URL%</code> \u5360\u4F4D\u7B26\u4E86\u3002</p></blockquote><p>\u5176\u4E2D\u7684 <code>server.transformIndexHtml</code> \u5C31\u662F <code>createDevHtmlTransformFn</code></p><h2 id="createdevhtmltransformfn" tabindex="-1"><a class="header-anchor" href="#createdevhtmltransformfn" aria-hidden="true">#</a> createDevHtmlTransformFn</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createDevHtmlTransformFn</span><span class="token punctuation">(</span>
  <span class="token parameter">server<span class="token operator">:</span> ViteDevServer</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token operator">:</span> string<span class="token punctuation">,</span> html<span class="token operator">:</span> string<span class="token punctuation">,</span> originalUrl<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>preHooks<span class="token punctuation">,</span> postHooks<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">resolveHtmlTransforms</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span>config<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> string<span class="token punctuation">,</span> html<span class="token operator">:</span> string<span class="token punctuation">,</span> originalUrl<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">applyHtmlTransforms</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>preHooks<span class="token punctuation">,</span> devHtmlHook<span class="token punctuation">,</span> <span class="token operator">...</span>postHooks<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      path<span class="token operator">:</span> url<span class="token punctuation">,</span>
      filename<span class="token operator">:</span> <span class="token function">getHtmlFilename</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">,</span>
      server<span class="token punctuation">,</span>
      originalUrl<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$r = _sfc_main$r.setup;
_sfc_main$r.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vite/sourceCode/indexHtmlMiddleware.html.vue");
  return _sfc_setup$r ? _sfc_setup$r(props, ctx) : void 0;
};
var indexHtmlMiddleware_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["ssrRender", _sfc_ssrRender$d]]);
var indexHtmlMiddleware_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": indexHtmlMiddleware_html$1
});
const _sfc_main$q = {};
function _sfc_ssrRender$c(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="\u4E3A\u4EC0\u4E48-vuex-store-\u4E2D\u7684\u503C\u9700\u8981\u653E\u5230-computed-\u4E2D" tabindex="-1"><a class="header-anchor" href="#\u4E3A\u4EC0\u4E48-vuex-store-\u4E2D\u7684\u503C\u9700\u8981\u653E\u5230-computed-\u4E2D" aria-hidden="true">#</a> \u4E3A\u4EC0\u4E48 vuex store \u4E2D\u7684\u503C\u9700\u8981\u653E\u5230 computed \u4E2D</h1><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    Clicked: {{ count }} times, count is {{ evenOrOdd }}.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decrement<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>incrementIfOdd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Increment if odd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>incrementAsync<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Increment async<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      count<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span>
      evenOrOdd<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>evenOrOdd<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;decrement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">incrementIfOdd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;incrementIfOdd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">incrementAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;incrementAsync&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>\u5982\u679C\u5C06 count \u76F4\u63A5\u5199\u6210 store.state.count\uFF0C\u70B9\u51FB\u9875\u9762\u65F6\u9875\u9762\u4E0D\u4F1A\u6709\u53D8\u5316</p><!--]-->`);
}
const _sfc_setup$q = _sfc_main$q.setup;
_sfc_main$q.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/QA/computed.html.vue");
  return _sfc_setup$q ? _sfc_setup$q(props, ctx) : void 0;
};
var computed_html$2 = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["ssrRender", _sfc_ssrRender$c]]);
var computed_html$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": computed_html$2
});
const _sfc_main$p = {};
function _sfc_ssrRender$b(_ctx, _push, _parent, _attrs) {
  _push(`<h1${serverRenderer.ssrRenderAttrs(vue.mergeProps({
    id: "proxy",
    tabindex: "-1"
  }, _attrs))}><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> Proxy</h1>`);
}
const _sfc_setup$p = _sfc_main$p.setup;
_sfc_main$p.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/QA/proxy.html.vue");
  return _sfc_setup$p ? _sfc_setup$p(props, ctx) : void 0;
};
var proxy_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["ssrRender", _sfc_ssrRender$b]]);
var proxy_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": proxy_html$1
});
const _sfc_main$o = {};
function _sfc_ssrRender$a(_ctx, _push, _parent, _attrs) {
}
const _sfc_setup$o = _sfc_main$o.setup;
_sfc_main$o.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/vue3Basic/QA/watch.html.vue");
  return _sfc_setup$o ? _sfc_setup$o(props, ctx) : void 0;
};
var watch_html$2 = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["ssrRender", _sfc_ssrRender$a]]);
var watch_html$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": watch_html$2
});
const _sfc_main$n = {};
function _sfc_ssrRender$9(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="card" tabindex="-1"><a class="header-anchor" href="#card" aria-hidden="true">#</a> card</h1><p>card.vue</p><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[ns.b(), ns.is(\`\${shadow}-shadow\`)]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$slots.header || header<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ns.e(<span class="token punctuation">&#39;</span>header<span class="token punctuation">&#39;</span>)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ header }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ns.e(<span class="token punctuation">&#39;</span>body<span class="token punctuation">&#39;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bodyStyle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useNamespace <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/hooks&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> cardProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./card&#39;</span>

<span class="token function">defineOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;ElCard&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">defineProps</span><span class="token punctuation">(</span>cardProps<span class="token punctuation">)</span>

<span class="token keyword">const</span> ns <span class="token operator">=</span> <span class="token function">useNamespace</span><span class="token punctuation">(</span><span class="token string">&#39;card&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>card.ts</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> buildProps<span class="token punctuation">,</span> definePropType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ExtractPropTypes<span class="token punctuation">,</span> StyleValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> cardProps <span class="token operator">=</span> <span class="token function">buildProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span> title of the card. Also accepts a DOM passed by \`slot#header\`
   */</span>
  header<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span> CSS style of card body
   */</span>
  bodyStyle<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token generic-function"><span class="token function">definePropType</span><span class="token generic class-name"><span class="token operator">&lt;</span>StyleValue<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> <span class="token builtin">Array</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@description</span> when to show card shadows
   */</span>
  shadow<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> String<span class="token punctuation">,</span>
    values<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hover&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CardProps</span> <span class="token operator">=</span> ExtractPropTypes<span class="token operator">&lt;</span><span class="token keyword">typeof</span> cardProps<span class="token operator">&gt;</span>
</code></pre></div><p>instance.ts</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token class-name">Card</span> <span class="token keyword">from</span> <span class="token string">&#39;./card.vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">CardInstance</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Card<span class="token operator">&gt;</span>
</code></pre></div><p>index.ts</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> withInstall <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils&#39;</span>

<span class="token keyword">import</span> Card <span class="token keyword">from</span> <span class="token string">&#39;./src/card.vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> ElCard <span class="token operator">=</span> <span class="token function">withInstall</span><span class="token punctuation">(</span>Card<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> ElCard

<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./src/card&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> CardInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./src/instance&#39;</span>

</code></pre></div><!--]-->`);
}
const _sfc_setup$n = _sfc_main$n.setup;
_sfc_main$n.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/card/index.html.vue");
  return _sfc_setup$n ? _sfc_setup$n(props, ctx) : void 0;
};
var index_html$c = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["ssrRender", _sfc_ssrRender$9]]);
var index_html$d = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": index_html$c
});
const _sfc_main$m = {};
function _sfc_ssrRender$8(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="async-validator" tabindex="-1"><a class="header-anchor" href="#async-validator" aria-hidden="true">#</a> async-validator</h1><p>antd \u548C ElementUI \u7EC4\u4EF6\u5E93\u4E2D\u8868\u5355\u6821\u9A8C\u9ED8\u8BA4\u4F7F\u7528\u7684 async-validator</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> Schema <span class="token keyword">from</span> <span class="token string">&#39;async-validator&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> descriptor <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>
    required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">===</span> <span class="token string">&#39;muji&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">asyncValidator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;too young&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reject with error message</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;muji&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">errors<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// validation failed, errors is an array of all errors</span>
    <span class="token comment">// fields is an object keyed by field name with an array of</span>
    <span class="token comment">// errors per field</span>
    <span class="token keyword">return</span> <span class="token function">handleErrors</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// validation passed</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// PROMISE USAGE</span>
validator
  <span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;muji&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// validation passed or without error message</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> errors<span class="token punctuation">,</span> fields <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">handleErrors</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$m = _sfc_main$m.setup;
_sfc_main$m.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/form/async-validator.html.vue");
  return _sfc_setup$m ? _sfc_setup$m(props, ctx) : void 0;
};
var asyncValidator_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["ssrRender", _sfc_ssrRender$8]]);
var asyncValidator_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": asyncValidator_html$1
});
const _sfc_main$l = {};
function _sfc_ssrRender$7(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="form-item" tabindex="-1"><a class="header-anchor" href="#form-item" aria-hidden="true">#</a> form-item</h1><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>formItemRef<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-form-item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>formItemClass<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LabelWrap</span>
      <span class="token attr-name">:is-auto-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>labelStyle.width === <span class="token punctuation">&#39;</span>auto<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:update-all</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elForm.labelWidth === <span class="token punctuation">&#39;</span>auto<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span>
        <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>label || $slots.label<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>labelFor<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-form-item__label<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>labelStyle<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>label<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>currentLabel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
          {{ currentLabel }}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LabelWrap</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-form-item__content<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contentStyle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-zoom-in-top<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shouldShowError<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:error</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>validateMessage<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-form-item__error<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{
              <span class="token punctuation">&#39;</span>el-form-item__error--inline<span class="token punctuation">&#39;</span>:
                typeof inlineMessage === <span class="token punctuation">&#39;</span>boolean<span class="token punctuation">&#39;</span>
                  ? inlineMessage
                  : elForm.inlineMessage || false,
            }<span class="token punctuation">&quot;</span></span>
          <span class="token punctuation">&gt;</span></span>
            {{ validateMessage }}
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  computed<span class="token punctuation">,</span>
  defineComponent<span class="token punctuation">,</span>
  getCurrentInstance<span class="token punctuation">,</span>
  inject<span class="token punctuation">,</span>
  onBeforeUnmount<span class="token punctuation">,</span>
  onMounted<span class="token punctuation">,</span>
  provide<span class="token punctuation">,</span>
  reactive<span class="token punctuation">,</span>
  ref<span class="token punctuation">,</span>
  toRefs<span class="token punctuation">,</span>
  watch<span class="token punctuation">,</span>
  nextTick<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">NOOP</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/shared&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> AsyncValidator <span class="token keyword">from</span> <span class="token string">&#39;async-validator&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> addUnit<span class="token punctuation">,</span> getPropByPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/util&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isValidComponentSize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/validators&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> elFormItemKey<span class="token punctuation">,</span> elFormKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/tokens&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useSize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/hooks&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> LabelWrap <span class="token keyword">from</span> <span class="token string">&#39;./label-wrap&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> type <span class="token punctuation">{</span> PropType<span class="token punctuation">,</span> CSSProperties <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> type <span class="token punctuation">{</span> ComponentSize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/types&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> type <span class="token punctuation">{</span>
  ElFormContext<span class="token punctuation">,</span>
  ValidateFieldCallback<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/tokens&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> type <span class="token punctuation">{</span> FormItemRule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./form.type&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;ElFormItem&#39;</span><span class="token punctuation">,</span>
  componentName<span class="token operator">:</span> <span class="token string">&#39;ElFormItem&#39;</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">{</span>
    LabelWrap<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    label<span class="token operator">:</span> String<span class="token punctuation">,</span>
    labelWidth<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    prop<span class="token operator">:</span> String<span class="token punctuation">,</span>
    required<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    rules<span class="token operator">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">,</span> Array<span class="token punctuation">]</span> <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>FormItemRule <span class="token operator">|</span> FormItemRule<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    error<span class="token operator">:</span> String<span class="token punctuation">,</span>
    validateStatus<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token keyword">for</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    inlineMessage<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Boolean<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    showMessage<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    size<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>ComponentSize<span class="token operator">&gt;</span><span class="token punctuation">,</span>
      validator<span class="token operator">:</span> isValidComponentSize<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> elForm <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>elFormKey<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> ElFormContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> validateState <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> validateMessage <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> isValidationEnabled <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> computedLabelWidth <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> formItemRef <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> isNested <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> parent <span class="token operator">=</span> vm<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>type<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&#39;ElForm&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>type<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;ElFormItem&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> initialValue <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

    <span class="token comment">// \u8868\u5355\u57DF\u9A8C\u8BC1\u9519\u8BEF\u4FE1\u606F, \u8BBE\u7F6E\u8BE5\u503C\u4F1A\u4F7F\u8868\u5355\u9A8C\u8BC1\u72B6\u6001\u53D8\u4E3A error\uFF0C\u5E76\u663E\u793A\u8BE5\u9519\u8BEF\u4FE1\u606F</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>error<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        validateMessage<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>
        validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">?</span> <span class="token string">&#39;error&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>validateStatus<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> labelFor <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>for <span class="token operator">||</span> props<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> labelStyle <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ret<span class="token operator">:</span> CSSProperties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>elForm<span class="token punctuation">.</span>labelPosition <span class="token operator">===</span> <span class="token string">&#39;top&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
      <span class="token keyword">const</span> labelWidth <span class="token operator">=</span> <span class="token function">addUnit</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>labelWidth <span class="token operator">||</span> elForm<span class="token punctuation">.</span>labelWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>labelWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret<span class="token punctuation">.</span>width <span class="token operator">=</span> labelWidth<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> contentStyle <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ret<span class="token operator">:</span> CSSProperties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>elForm<span class="token punctuation">.</span>labelPosition <span class="token operator">===</span> <span class="token string">&#39;top&#39;</span> <span class="token operator">||</span> elForm<span class="token punctuation">.</span>inline<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>label <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>props<span class="token punctuation">.</span>labelWidth <span class="token operator">&amp;&amp;</span> isNested<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> labelWidth <span class="token operator">=</span> <span class="token function">addUnit</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>labelWidth <span class="token operator">||</span> elForm<span class="token punctuation">.</span>labelWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>label <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>slots<span class="token punctuation">.</span>label<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret<span class="token punctuation">.</span>marginLeft <span class="token operator">=</span> labelWidth<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> fieldValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> model <span class="token operator">=</span> elForm<span class="token punctuation">.</span>model<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>model <span class="token operator">||</span> <span class="token operator">!</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">let</span> path <span class="token operator">=</span> props<span class="token punctuation">.</span>prop<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> isRequired <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">&amp;&amp;</span> rules<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rules<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>rule<span class="token punctuation">.</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> required<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> sizeClass <span class="token operator">=</span> <span class="token function">useSize</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> formItem<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">validate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
      <span class="token parameter">trigger<span class="token operator">:</span> string<span class="token punctuation">,</span>
      callback<span class="token operator">:</span> ValidateFieldCallback <span class="token operator">=</span> <span class="token constant">NOOP</span></span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValidationEnabled<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token function">getFilteredRule</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>rules <span class="token operator">||</span> rules<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>required <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;validating&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> descriptor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">&amp;&amp;</span> rules<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">delete</span> rule<span class="token punctuation">.</span>trigger<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      descriptor<span class="token punctuation">[</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> rules<span class="token punctuation">;</span>
      <span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncValidator</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      model<span class="token punctuation">[</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> fieldValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token punctuation">{</span> firstFields<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">errors<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>errors <span class="token operator">?</span> <span class="token string">&#39;success&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">;</span>
        validateMessage<span class="token punctuation">.</span>value <span class="token operator">=</span> errors
          <span class="token operator">?</span> errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>props<span class="token punctuation">.</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is required</span><span class="token template-punctuation string">\`</span></span>
          <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
        <span class="token comment">// fix: #3860 after version 3.5.2, async-validator also return fields if validation fails</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>validateMessage<span class="token punctuation">.</span>value<span class="token punctuation">,</span> errors <span class="token operator">?</span> fields <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elForm<span class="token punctuation">.</span>emit<span class="token operator">?.</span><span class="token punctuation">(</span>
          <span class="token string">&#39;validate&#39;</span><span class="token punctuation">,</span>
          props<span class="token punctuation">.</span>prop<span class="token punctuation">,</span>
          <span class="token operator">!</span>errors<span class="token punctuation">,</span>
          validateMessage<span class="token punctuation">.</span>value <span class="token operator">||</span> <span class="token keyword">null</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">clearValidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      validateState<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      validateMessage<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">resetField</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> model <span class="token operator">=</span> elForm<span class="token punctuation">.</span>model<span class="token punctuation">;</span>
      <span class="token keyword">const</span> value <span class="token operator">=</span> fieldValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">let</span> path <span class="token operator">=</span> props<span class="token punctuation">.</span>prop<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> prop <span class="token operator">=</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prop<span class="token punctuation">.</span>o<span class="token punctuation">[</span>prop<span class="token punctuation">.</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        prop<span class="token punctuation">.</span>o<span class="token punctuation">[</span>prop<span class="token punctuation">.</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">clearValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">getRules</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> formRules <span class="token operator">=</span> elForm<span class="token punctuation">.</span>rules<span class="token punctuation">;</span>
      <span class="token keyword">const</span> selfRules <span class="token operator">=</span> props<span class="token punctuation">.</span>rules<span class="token punctuation">;</span>
      <span class="token keyword">const</span> requiredRule <span class="token operator">=</span>
        props<span class="token punctuation">.</span>required <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>props<span class="token punctuation">.</span>required <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> prop <span class="token operator">=</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>formRules<span class="token punctuation">,</span> props<span class="token punctuation">.</span>prop <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> normalizedRule <span class="token operator">=</span> formRules
        <span class="token operator">?</span> prop<span class="token punctuation">.</span>o<span class="token punctuation">[</span>props<span class="token punctuation">.</span>prop <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> prop<span class="token punctuation">.</span>v
        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>selfRules <span class="token operator">||</span> normalizedRule <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>requiredRule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getFilteredRule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">trigger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> rules
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rule<span class="token punctuation">.</span>trigger <span class="token operator">||</span> trigger <span class="token operator">===</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span>trigger<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> rule<span class="token punctuation">.</span>trigger<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> rule<span class="token punctuation">.</span>trigger <span class="token operator">===</span> trigger<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>rule <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">evaluateValidationEnabled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      isValidationEnabled<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">updateComputedLabelWidth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">width<span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      computedLabelWidth<span class="token punctuation">.</span>value <span class="token operator">=</span> width <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> elFormItem <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>
      size<span class="token operator">:</span> sizeClass<span class="token punctuation">,</span>
      validateState<span class="token punctuation">,</span>
      $el<span class="token operator">:</span> formItemRef<span class="token punctuation">,</span>
      evaluateValidationEnabled<span class="token punctuation">,</span>
      resetField<span class="token punctuation">,</span>
      clearValidate<span class="token punctuation">,</span>
      validate<span class="token punctuation">,</span>
      updateComputedLabelWidth<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elForm<span class="token operator">?.</span><span class="token function">addField</span><span class="token punctuation">(</span>elFormItem<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> value <span class="token operator">=</span> fieldValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        initialValue <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>value<span class="token punctuation">]</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>

        <span class="token function">evaluateValidationEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      elForm<span class="token operator">?.</span><span class="token function">removeField</span><span class="token punctuation">(</span>elFormItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">provide</span><span class="token punctuation">(</span>elFormItemKey<span class="token punctuation">,</span> elFormItem<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> formItemClass <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string">&#39;el-form-item--feedback&#39;</span><span class="token operator">:</span> elForm<span class="token punctuation">.</span>statusIcon<span class="token punctuation">,</span>
        <span class="token string">&#39;is-error&#39;</span><span class="token operator">:</span> validateState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;is-validating&#39;</span><span class="token operator">:</span> validateState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;validating&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;is-success&#39;</span><span class="token operator">:</span> validateState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;is-required&#39;</span><span class="token operator">:</span> isRequired<span class="token punctuation">.</span>value <span class="token operator">||</span> props<span class="token punctuation">.</span>required<span class="token punctuation">,</span>
        <span class="token string">&#39;is-no-asterisk&#39;</span><span class="token operator">:</span> elForm<span class="token punctuation">.</span>hideRequiredAsterisk<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      sizeClass<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">el-form-item--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sizeClass<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> shouldShowError <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        validateState<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&#39;error&#39;</span> <span class="token operator">&amp;&amp;</span>
        props<span class="token punctuation">.</span>showMessage <span class="token operator">&amp;&amp;</span>
        elForm<span class="token punctuation">.</span>showMessage
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> currentLabel <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>label <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>elForm<span class="token punctuation">.</span>labelSuffix <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      formItemRef<span class="token punctuation">,</span>
      formItemClass<span class="token punctuation">,</span>
      shouldShowError<span class="token punctuation">,</span>
      elForm<span class="token punctuation">,</span>
      labelStyle<span class="token punctuation">,</span>
      contentStyle<span class="token punctuation">,</span>
      validateMessage<span class="token punctuation">,</span>
      labelFor<span class="token punctuation">,</span>
      resetField<span class="token punctuation">,</span>
      clearValidate<span class="token punctuation">,</span>
      currentLabel<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$l = _sfc_main$l.setup;
_sfc_main$l.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/form/form-item.html.vue");
  return _sfc_setup$l ? _sfc_setup$l(props, ctx) : void 0;
};
var formItem_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["ssrRender", _sfc_ssrRender$7]]);
var formItem_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": formItem_html$1
});
const _sfc_main$k = {};
function _sfc_ssrRender$6(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="validation" tabindex="-1"><a class="header-anchor" href="#validation" aria-hidden="true">#</a> validation</h1><p>\u5D4C\u5957\u7684\u719F\u6089\u4F7F\u7528<code>:</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// form-item.vue</span>
<span class="token keyword">const</span> fieldValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> model <span class="token operator">=</span> elForm<span class="token punctuation">.</span>model<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>model <span class="token operator">||</span> <span class="token operator">!</span>props<span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> path <span class="token operator">=</span> props<span class="token punctuation">.</span>prop<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$k = _sfc_main$k.setup;
_sfc_main$k.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/form/rules.html.vue");
  return _sfc_setup$k ? _sfc_setup$k(props, ctx) : void 0;
};
var rules_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["ssrRender", _sfc_ssrRender$6]]);
var rules_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": rules_html$1
});
const _sfc_main$j = {};
function _sfc_ssrRender$5(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="input-code" tabindex="-1"><a class="header-anchor" href="#input-code" aria-hidden="true">#</a> input code</h1><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
    <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>type !== <span class="token punctuation">&#39;</span>hidden<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[
      type === <span class="token punctuation">&#39;</span>textarea<span class="token punctuation">&#39;</span> ? <span class="token punctuation">&#39;</span>el-textarea<span class="token punctuation">&#39;</span> : <span class="token punctuation">&#39;</span>el-input<span class="token punctuation">&#39;</span>,
      inputSize ? <span class="token punctuation">&#39;</span>el-input--<span class="token punctuation">&#39;</span> + inputSize : <span class="token punctuation">&#39;</span><span class="token punctuation">&#39;</span>,
      {
        <span class="token punctuation">&#39;</span>is-disabled<span class="token punctuation">&#39;</span>: inputDisabled,
        <span class="token punctuation">&#39;</span>is-exceed<span class="token punctuation">&#39;</span>: inputExceed,
        <span class="token punctuation">&#39;</span>el-input-group<span class="token punctuation">&#39;</span>: $slots.prepend || $slots.append,
        <span class="token punctuation">&#39;</span>el-input-group--append<span class="token punctuation">&#39;</span>: $slots.append,
        <span class="token punctuation">&#39;</span>el-input-group--prepend<span class="token punctuation">&#39;</span>: $slots.prepend,
        <span class="token punctuation">&#39;</span>el-input--prefix<span class="token punctuation">&#39;</span>: $slots.prefix || prefixIcon,
        <span class="token punctuation">&#39;</span>el-input--suffix<span class="token punctuation">&#39;</span>:
          $slots.suffix || suffixIcon || clearable || showPassword,
        <span class="token punctuation">&#39;</span>el-input--suffix--password-clear<span class="token punctuation">&#39;</span>: clearable &amp;&amp; showPassword,
      },
      $attrs.class,
    ]<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>containerStyle<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@mouseenter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onMouseEnter<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@mouseleave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onMouseLeave<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- input --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>type !== <span class="token punctuation">&#39;</span>textarea<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- prepend slot --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$slots.prepend<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input-group__prepend<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prepend<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__inner<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>attrs<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showPassword ? (passwordVisible ? <span class="token punctuation">&#39;</span>text<span class="token punctuation">&#39;</span> : <span class="token punctuation">&#39;</span>password<span class="token punctuation">&#39;</span>) : type<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputDisabled<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>readonly<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>autocomplete<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tabindex<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>label<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>placeholder<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputStyle<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@compositionstart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCompositionStart<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@compositionupdate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCompositionUpdate<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@compositionend</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCompositionEnd<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleInput<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleFocus<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleBlur<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleChange<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@keydown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleKeydown<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span>

      <span class="token comment">&lt;!-- prefix slot --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$slots.prefix || prefixIcon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__prefix<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__prefix-inner<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefix<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefixIcon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefixIcon<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>

      <span class="token comment">&lt;!-- suffix slot --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffixVisible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__suffix<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__suffix-inner<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!showClear || !showPwdVisible || !isWordLimitVisible<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffix<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffixIcon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffixIcon<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span>
            <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showClear<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__icon el-input__clear<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">@mousedown.prevent</span>
            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clear<span class="token punctuation">&quot;</span></span>
          <span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle-close</span> <span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span>
            <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showPwdVisible<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__icon el-input__clear<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handlePasswordVisible<span class="token punctuation">&quot;</span></span>
          <span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon-view</span> <span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isWordLimitVisible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__count-inner<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
              {{ textLength }} / {{ attrs.maxlength }}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span>
          <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>validateState &amp;&amp; validateIcon<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__icon el-input__validateIcon<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>validateIcon<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>

      <span class="token comment">&lt;!-- append slot --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$slots.append<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input-group__append<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>append<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- textarea --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>
        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>textarea<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-textarea__inner<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>attrs<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tabindex<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputDisabled<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>readonly<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>autocomplete<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>computedTextareaStyle<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>label<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>placeholder<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@compositionstart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCompositionStart<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@compositionupdate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCompositionUpdate<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@compositionend</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleCompositionEnd<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleInput<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleFocus<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleBlur<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleChange<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">@keydown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleKeydown<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isWordLimitVisible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-input__count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        {{ textLength }} / {{ attrs.maxlength }}
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  defineComponent<span class="token punctuation">,</span>
  inject<span class="token punctuation">,</span>
  computed<span class="token punctuation">,</span>
  watch<span class="token punctuation">,</span>
  nextTick<span class="token punctuation">,</span>
  getCurrentInstance<span class="token punctuation">,</span>
  ref<span class="token punctuation">,</span>
  shallowRef<span class="token punctuation">,</span>
  onMounted<span class="token punctuation">,</span>
  onUpdated<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElIcon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/components/icon&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CircleClose<span class="token punctuation">,</span> View <span class="token keyword">as</span> IconView <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/icons&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ValidateComponentsMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/icon&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> elFormKey<span class="token punctuation">,</span> elFormItemKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/tokens&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useAttrs<span class="token punctuation">,</span> useFormItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/hooks&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">UPDATE_MODEL_EVENT</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/constants&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/util&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> isServer <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/isServer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> isKorean <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/isDef&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> calcTextareaHeight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./calc-textarea-height&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inputProps<span class="token punctuation">,</span> inputEmits <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./input&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> type <span class="token punctuation">{</span> StyleValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@element-plus/utils/types&#39;</span><span class="token punctuation">;</span>

type TargetElement <span class="token operator">=</span> HTMLInputElement <span class="token operator">|</span> HTMLTextAreaElement<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PENDANT_MAP</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  suffix<span class="token operator">:</span> <span class="token string">&#39;append&#39;</span><span class="token punctuation">,</span>
  prefix<span class="token operator">:</span> <span class="token string">&#39;prepend&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;ElInput&#39;</span><span class="token punctuation">,</span>

  components<span class="token operator">:</span> <span class="token punctuation">{</span> ElIcon<span class="token punctuation">,</span> CircleClose<span class="token punctuation">,</span> IconView <span class="token punctuation">}</span><span class="token punctuation">,</span>

  inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

  props<span class="token operator">:</span> inputProps<span class="token punctuation">,</span>
  emits<span class="token operator">:</span> inputEmits<span class="token punctuation">,</span>

  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots<span class="token punctuation">,</span> emit<span class="token punctuation">,</span> attrs<span class="token operator">:</span> rawAttrs <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token function">useAttrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> elForm <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>elFormKey<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> elFormItem <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>elFormItemKey<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> size<span class="token operator">:</span> inputSize<span class="token punctuation">,</span> disabled<span class="token operator">:</span> inputDisabled <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFormItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> input <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> textarea <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLTextAreaElement<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> focused <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> hovering <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> isComposing <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> passwordVisible <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> _textareaCalcStyle <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>inputStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> inputOrTextarea <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> input<span class="token punctuation">.</span>value <span class="token operator">||</span> textarea<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> needStatusIcon <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elForm<span class="token operator">?.</span>statusIcon <span class="token operator">??</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> validateState <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> elFormItem<span class="token operator">?.</span>validateState <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> validateIcon <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ValidateComponentsMap<span class="token punctuation">[</span>validateState<span class="token punctuation">.</span>value<span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> containerStyle <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> rawAttrs<span class="token punctuation">.</span>style <span class="token keyword">as</span> StyleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> computedTextareaStyle <span class="token operator">=</span> computed<span class="token operator">&lt;</span>StyleValue<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
      props<span class="token punctuation">.</span>inputStyle<span class="token punctuation">,</span>
      _textareaCalcStyle<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
      <span class="token punctuation">{</span> resize<span class="token operator">:</span> props<span class="token punctuation">.</span>resize <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> nativeInputValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      props<span class="token punctuation">.</span>modelValue <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> props<span class="token punctuation">.</span>modelValue <span class="token operator">===</span> <span class="token keyword">undefined</span>
        <span class="token operator">?</span> <span class="token string">&#39;&#39;</span>
        <span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>modelValue<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> showClear <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        props<span class="token punctuation">.</span>clearable <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>inputDisabled<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>props<span class="token punctuation">.</span>readonly <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span><span class="token operator">!</span>nativeInputValue<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>focused<span class="token punctuation">.</span>value <span class="token operator">||</span> hovering<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> showPwdVisible <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        props<span class="token punctuation">.</span>showPassword <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>inputDisabled<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>props<span class="token punctuation">.</span>readonly <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>nativeInputValue<span class="token punctuation">.</span>value <span class="token operator">||</span> focused<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> isWordLimitVisible <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        props<span class="token punctuation">.</span>showWordLimit <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span><span class="token operator">!</span>attrs<span class="token punctuation">.</span>value<span class="token punctuation">.</span>maxlength <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>props<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;text&#39;</span> <span class="token operator">||</span> props<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>inputDisabled<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>props<span class="token punctuation">.</span>readonly <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span>props<span class="token punctuation">.</span>showPassword
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> textLength <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>nativeInputValue<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>length
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> inputExceed <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token comment">// show exceed style if length of initial value greater then maxlength</span>
        <span class="token operator">!</span><span class="token operator">!</span>isWordLimitVisible<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span>
        textLength<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>attrs<span class="token punctuation">.</span>value<span class="token punctuation">.</span>maxlength<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">resizeTextarea</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> autosize <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>isServer <span class="token operator">||</span> type <span class="token operator">!==</span> <span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>autosize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> minRows <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>autosize<span class="token punctuation">)</span> <span class="token operator">?</span> autosize<span class="token punctuation">.</span>minRows <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> maxRows <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>autosize<span class="token punctuation">)</span> <span class="token operator">?</span> autosize<span class="token punctuation">.</span>maxRows <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        _textareaCalcStyle<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span><span class="token function">calcTextareaHeight</span><span class="token punctuation">(</span>textarea<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">,</span> minRows<span class="token punctuation">,</span> maxRows<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        _textareaCalcStyle<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
          minHeight<span class="token operator">:</span> <span class="token function">calcTextareaHeight</span><span class="token punctuation">(</span>textarea<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minHeight<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">setNativeInputValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> input <span class="token operator">=</span> inputOrTextarea<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input <span class="token operator">||</span> input<span class="token punctuation">.</span>value <span class="token operator">===</span> nativeInputValue<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      input<span class="token punctuation">.</span>value <span class="token operator">=</span> nativeInputValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> calcIconOffset <span class="token operator">=</span> <span class="token punctuation">(</span>place<span class="token operator">:</span> <span class="token string">&#39;prefix&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;suffix&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> el <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> elList<span class="token operator">:</span> HTMLSpanElement<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>
        el<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.el-input__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>place<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> target <span class="token operator">=</span> elList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>parentNode <span class="token operator">===</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> pendant <span class="token operator">=</span> <span class="token constant">PENDANT_MAP</span><span class="token punctuation">[</span>place<span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>slots<span class="token punctuation">[</span>pendant<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>place <span class="token operator">===</span> <span class="token string">&#39;suffix&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.el-input-group__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pendant<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>offsetWidth
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">updateIconOffset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">calcIconOffset</span><span class="token punctuation">(</span><span class="token string">&#39;prefix&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">calcIconOffset</span><span class="token punctuation">(</span><span class="token string">&#39;suffix&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> Event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token keyword">as</span> TargetElement<span class="token punctuation">;</span>

      <span class="token comment">// should not emit input during composition</span>
      <span class="token comment">// see: https://github.com/ElemeFE/element/issues/10516</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isComposing<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token comment">// hack for https://github.com/ElemeFE/element/issues/8548</span>
      <span class="token comment">// should remove the following line when we don&#39;t support IE</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> nativeInputValue<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token constant">UPDATE_MODEL_EVENT</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// ensure native input value is controlled</span>
      <span class="token comment">// see: https://github.com/ElemeFE/element/issues/12850</span>
      <span class="token function">nextTick</span><span class="token punctuation">(</span>setNativeInputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> Event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token keyword">as</span> TargetElement<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">focus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// see: https://github.com/ElemeFE/element/issues/18573</span>
      <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        inputOrTextarea<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">blur</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      inputOrTextarea<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleFocus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> FocusEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      focused<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleBlur</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> FocusEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      focused<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>validateEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elFormItem<span class="token operator">?.</span>validate<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token string">&#39;blur&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">select</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      inputOrTextarea<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleCompositionStart</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> CompositionEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;compositionstart&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
      isComposing<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleCompositionUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> CompositionEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;compositionupdate&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token operator">?.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">const</span> lastCharacter <span class="token operator">=</span> text<span class="token punctuation">[</span>text<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      isComposing<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">isKorean</span><span class="token punctuation">(</span>lastCharacter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleCompositionEnd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> CompositionEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;compositionend&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isComposing<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        isComposing<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token function">handleInput</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token constant">UPDATE_MODEL_EVENT</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;clear&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handlePasswordVisible</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      passwordVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>passwordVisible<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> suffixVisible <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token operator">!</span><span class="token operator">!</span>slots<span class="token punctuation">.</span>suffix <span class="token operator">||</span>
        <span class="token operator">!</span><span class="token operator">!</span>props<span class="token punctuation">.</span>suffixIcon <span class="token operator">||</span>
        showClear<span class="token punctuation">.</span>value <span class="token operator">||</span>
        props<span class="token punctuation">.</span>showPassword <span class="token operator">||</span>
        isWordLimitVisible<span class="token punctuation">.</span>value <span class="token operator">||</span>
        <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>validateState<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> needStatusIcon<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>modelValue<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">nextTick</span><span class="token punctuation">(</span>resizeTextarea<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>validateEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          elFormItem<span class="token operator">?.</span>validate<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// native input value is set explicitly</span>
    <span class="token comment">// do not use v-model / :value in template</span>
    <span class="token comment">// see: https://github.com/ElemeFE/element/issues/14521</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>nativeInputValue<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setNativeInputValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// when change between &lt;input&gt; and &lt;textarea&gt;,</span>
    <span class="token comment">// update DOM dependent value and styles</span>
    <span class="token comment">// https://github.com/ElemeFE/element/issues/14857</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setNativeInputValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">resizeTextarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">updateIconOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setNativeInputValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">updateIconOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">nextTick</span><span class="token punctuation">(</span>resizeTextarea<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">nextTick</span><span class="token punctuation">(</span>updateIconOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">onMouseLeave</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">evt<span class="token operator">:</span> MouseEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      hovering<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;mouseleave&#39;</span><span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">onMouseEnter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">evt<span class="token operator">:</span> MouseEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      hovering<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;mouseenter&#39;</span><span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleKeydown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">evt<span class="token operator">:</span> KeyboardEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      input<span class="token punctuation">,</span>
      textarea<span class="token punctuation">,</span>
      attrs<span class="token punctuation">,</span>
      inputSize<span class="token punctuation">,</span>
      validateState<span class="token punctuation">,</span>
      validateIcon<span class="token punctuation">,</span>
      containerStyle<span class="token punctuation">,</span>
      computedTextareaStyle<span class="token punctuation">,</span>
      inputDisabled<span class="token punctuation">,</span>
      showClear<span class="token punctuation">,</span>
      showPwdVisible<span class="token punctuation">,</span>
      isWordLimitVisible<span class="token punctuation">,</span>
      textLength<span class="token punctuation">,</span>
      hovering<span class="token punctuation">,</span>
      inputExceed<span class="token punctuation">,</span>
      passwordVisible<span class="token punctuation">,</span>
      inputOrTextarea<span class="token punctuation">,</span>
      suffixVisible<span class="token punctuation">,</span>

      resizeTextarea<span class="token punctuation">,</span>
      handleInput<span class="token punctuation">,</span>
      handleChange<span class="token punctuation">,</span>
      handleFocus<span class="token punctuation">,</span>
      handleBlur<span class="token punctuation">,</span>
      handleCompositionStart<span class="token punctuation">,</span>
      handleCompositionUpdate<span class="token punctuation">,</span>
      handleCompositionEnd<span class="token punctuation">,</span>
      handlePasswordVisible<span class="token punctuation">,</span>
      clear<span class="token punctuation">,</span>
      select<span class="token punctuation">,</span>
      focus<span class="token punctuation">,</span>
      blur<span class="token punctuation">,</span>
      onMouseLeave<span class="token punctuation">,</span>
      onMouseEnter<span class="token punctuation">,</span>
      handleKeydown<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$j = _sfc_main$j.setup;
_sfc_main$j.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/input/input-code.html.vue");
  return _sfc_setup$j ? _sfc_setup$j(props, ctx) : void 0;
};
var inputCode_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["ssrRender", _sfc_ssrRender$5]]);
var inputCode_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": inputCode_html$1
});
const _sfc_main$i = {};
function _sfc_ssrRender$4(_ctx, _push, _parent, _attrs) {
  _push(`<h1${serverRenderer.ssrRenderAttrs(vue.mergeProps({
    id: "input",
    tabindex: "-1"
  }, _attrs))}><a class="header-anchor" href="#input" aria-hidden="true">#</a> input</h1>`);
}
const _sfc_setup$i = _sfc_main$i.setup;
_sfc_main$i.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/input/input.html.vue");
  return _sfc_setup$i ? _sfc_setup$i(props, ctx) : void 0;
};
var input_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["ssrRender", _sfc_ssrRender$4]]);
var input_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": input_html$1
});
const _sfc_main$h = {};
function _sfc_ssrRender$3(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="table-column" tabindex="-1"><a class="header-anchor" href="#table-column" aria-hidden="true">#</a> table-column</h1><h2 id="showoverflowtooltip" tabindex="-1"><a class="header-anchor" href="#showoverflowtooltip" aria-hidden="true">#</a> showOverflowTooltip</h2><p>\u5F53\u5185\u5BB9\u8FC7\u957F\u88AB\u9690\u85CF\u65F6\u663E\u793A tooltip</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;ElTableColumn&#39;</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">{</span>
    ElCheckbox<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> defaultProps<span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> renderDefault <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        row<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        column<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        $index<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>renderDefault <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> childNode <span class="token keyword">of</span> renderDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>
            childNode<span class="token punctuation">.</span>type<span class="token operator">?.</span>name <span class="token operator">===</span> <span class="token string">&#39;ElTableColumn&#39;</span> <span class="token operator">||</span>
            childNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> <span class="token number">2</span>
          <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childNode<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
            childNode<span class="token punctuation">.</span>type <span class="token operator">===</span> Fragment <span class="token operator">&amp;&amp;</span>
            childNode<span class="token punctuation">.</span>children <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Array</span></span>
          <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>childNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
      children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> children<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="render-helper" tabindex="-1"><a class="header-anchor" href="#render-helper" aria-hidden="true">#</a> render-helper</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">getPropsData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>propsKey<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> propsKey<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cur<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        prev<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$h = _sfc_main$h.setup;
_sfc_main$h.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/table/table-column.html.vue");
  return _sfc_setup$h ? _sfc_setup$h(props, ctx) : void 0;
};
var tableColumn_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["ssrRender", _sfc_ssrRender$3]]);
var tableColumn_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": tableColumn_html$1
});
const _sfc_main$g = {};
function _sfc_ssrRender$2(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="table" tabindex="-1"><a class="header-anchor" href="#table" aria-hidden="true">#</a> table</h1><nav class="table-of-contents"><ul></ul></nav><!--]-->`);
}
const _sfc_setup$g = _sfc_main$g.setup;
_sfc_main$g.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/table/table.html.vue");
  return _sfc_setup$g ? _sfc_setup$g(props, ctx) : void 0;
};
var table_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["ssrRender", _sfc_ssrRender$2]]);
var table_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": table_html$1
});
const _sfc_main$f = {};
function _sfc_ssrRender$1(_ctx, _push, _parent, _attrs) {
  _push(`<!--[--><h1 id="util" tabindex="-1"><a class="header-anchor" href="#util" aria-hidden="true">#</a> util</h1><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>funcs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>funcs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arg<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>funcs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> funcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">a</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><!--]-->`);
}
const _sfc_setup$f = _sfc_main$f.setup;
_sfc_main$f.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/elementPlus/components/table/util.html.vue");
  return _sfc_setup$f ? _sfc_setup$f(props, ctx) : void 0;
};
var util_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["ssrRender", _sfc_ssrRender$1]]);
var util_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": util_html$1
});
const _sfc_main$e = {};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs) {
}
const _sfc_setup$e = _sfc_main$e.setup;
_sfc_main$e.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../pages/404.html.vue");
  return _sfc_setup$e ? _sfc_setup$e(props, ctx) : void 0;
};
var _404_html$1 = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["ssrRender", _sfc_ssrRender]]);
var _404_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _404_html$1
});
const data$15 = {
  "key": "v-8daa1a0e",
  "path": "/",
  "title": "Introduction",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "index.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$b = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$15
});
const data$14 = {
  "key": "v-00c059b2",
  "path": "/elementPlus/",
  "title": "Introduction",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/README.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$a = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$14
});
const data$13 = {
  "key": "v-39d4ce89",
  "path": "/elementPlus/tree.html",
  "title": "tree",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/tree.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var tree_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$13
});
const data$12 = {
  "key": "v-c15a97d6",
  "path": "/frontEndTool/rollup.html",
  "title": "rollup \u914D\u7F6E",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "rollup.config.js",
      "slug": "rollup-config-js",
      "children": []
    },
    {
      "level": 2,
      "title": "banner",
      "slug": "banner",
      "children": []
    },
    {
      "level": 2,
      "title": "format",
      "slug": "format",
      "children": []
    },
    {
      "level": 2,
      "title": "plugins",
      "slug": "plugins",
      "children": [
        {
          "level": 3,
          "title": "@rollup/plugin-buble",
          "slug": "rollup-plugin-buble",
          "children": []
        },
        {
          "level": 3,
          "title": "rollup-plugin-babel",
          "slug": "rollup-plugin-babel",
          "children": []
        },
        {
          "level": 3,
          "title": "rollup/plugin-node-resolve",
          "slug": "rollup-plugin-node-resolve",
          "children": []
        },
        {
          "level": 3,
          "title": "rollup-plugin-terser",
          "slug": "rollup-plugin-terser",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "Rollup \u7684\u4F18\u52BF\u548C\u4E0D\u8DB3",
      "slug": "rollup-\u7684\u4F18\u52BF\u548C\u4E0D\u8DB3",
      "children": []
    }
  ],
  "filePathRelative": "frontEndTool/rollup.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var rollup_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$12
});
const data$11 = {
  "key": "v-5dd4be94",
  "path": "/frontEndTool/skill.html",
  "title": "\u6E90\u7801\u9605\u8BFB\u6280\u5DE7",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "vuex",
      "slug": "vuex",
      "children": []
    }
  ],
  "filePathRelative": "frontEndTool/skill.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var skill_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$11
});
const data$10 = {
  "key": "v-151eacea",
  "path": "/pina/",
  "title": "",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "pina/README.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$9 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$10
});
const data$$ = {
  "key": "v-303438b4",
  "path": "/sourceCode/Diff.html",
  "title": "Diff \u7B97\u6CD5\u4F18\u5316",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/Diff.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var Diff_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$$
});
const data$_ = {
  "key": "v-2c1b37ee",
  "path": "/sourceCode/",
  "title": "Introduction",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/README.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$8 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$_
});
const data$Z = {
  "key": "v-1ab18016",
  "path": "/sourceCode/v-model.html",
  "title": "v-model",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/v-model.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var vModel_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$Z
});
const data$Y = {
  "key": "v-157350f2",
  "path": "/vite/",
  "title": "Introduction",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vite/README.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$7 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$Y
});
const data$X = {
  "key": "v-22bb3a7b",
  "path": "/vite/application.html",
  "title": "Vite",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "ES Module",
      "slug": "es-module",
      "children": []
    }
  ],
  "filePathRelative": "vite/application.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var application_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$X
});
const data$W = {
  "key": "v-0f6b9545",
  "path": "/vite/vue-dev-server.html",
  "title": "vue-dev-server",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "vue-dev-server",
      "slug": "vue-dev-server-1",
      "children": []
    },
    {
      "level": 2,
      "title": "vueMiddleware",
      "slug": "vuemiddleware",
      "children": []
    },
    {
      "level": 2,
      "title": "transformModuleImports.js",
      "slug": "transformmoduleimports-js",
      "children": []
    },
    {
      "level": 2,
      "title": "readSource.js",
      "slug": "readsource-js",
      "children": []
    },
    {
      "level": 2,
      "title": "loadPkg.js",
      "slug": "loadpkg-js",
      "children": []
    }
  ],
  "filePathRelative": "vite/vue-dev-server.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var vueDevServer_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$W
});
const data$V = {
  "key": "v-5db951d1",
  "path": "/vite/%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.html",
  "title": "\u5904\u7406\u9759\u6001\u8D44\u6E90",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u56FE\u7247\u52A0\u8F7D",
      "slug": "\u56FE\u7247\u52A0\u8F7D",
      "children": [
        {
          "level": 3,
          "title": "SVG \u7EC4\u4EF6\u65B9\u5F0F\u52A0\u8F7D",
          "slug": "svg-\u7EC4\u4EF6\u65B9\u5F0F\u52A0\u8F7D",
          "children": []
        }
      ]
    }
  ],
  "filePathRelative": "vite/\u5904\u7406\u9759\u6001\u8D44\u6E90.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var _______html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$V
});
const data$U = {
  "key": "v-d618035e",
  "path": "/vue3Basic/JSX.html",
  "title": "JSX",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u5728 render \u4E2D\u8FD4\u56DE",
      "slug": "\u5728-render-\u4E2D\u8FD4\u56DE",
      "children": []
    },
    {
      "level": 2,
      "title": "\u5728 setup \u4E2D\u8FD4\u56DE",
      "slug": "\u5728-setup-\u4E2D\u8FD4\u56DE",
      "children": []
    },
    {
      "level": 2,
      "title": "\u7528\u6CD5",
      "slug": "\u7528\u6CD5",
      "children": []
    },
    {
      "level": 2,
      "title": "\u9605\u8BFB\u53C2\u8003",
      "slug": "\u9605\u8BFB\u53C2\u8003",
      "children": []
    }
  ],
  "filePathRelative": "vue3Basic/JSX.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var JSX_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$U
});
const data$T = {
  "key": "v-29184f47",
  "path": "/vue3Basic/",
  "title": "Introduction",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vue3Basic/README.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$6 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$T
});
const data$S = {
  "key": "v-bbe7f31a",
  "path": "/vue3Basic/Vue3Api.html",
  "title": "Vue3 API",
  "lang": "en-US",
  "frontmatter": {
    "sidebarDepth": 1
  },
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "hooks",
      "slug": "hooks",
      "children": [
        {
          "level": 3,
          "title": "vue2 mixins",
          "slug": "vue2-mixins",
          "children": []
        },
        {
          "level": 3,
          "title": "Vue3 hooks",
          "slug": "vue3-hooks",
          "children": []
        },
        {
          "level": 3,
          "title": "react hooks",
          "slug": "react-hooks",
          "children": []
        }
      ]
    }
  ],
  "filePathRelative": "vue3Basic/Vue3Api.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var Vue3Api_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$S
});
const data$R = {
  "key": "v-508a9cca",
  "path": "/vue3Basic/auth.html",
  "title": "\u6743\u9650",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vue3Basic/auth.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var auth_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$R
});
const data$Q = {
  "key": "v-3c9456e8",
  "path": "/vue3Basic/reactivityAPI.html",
  "title": "\u54CD\u5E94\u5F0F\u7CFB\u7EDF API",
  "lang": "en-US",
  "frontmatter": {
    "sidebarDepth": 1
  },
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "reactive",
      "slug": "reactive",
      "children": []
    },
    {
      "level": 2,
      "title": "ref",
      "slug": "ref",
      "children": []
    },
    {
      "level": 2,
      "title": "computed",
      "slug": "computed",
      "children": [
        {
          "level": 3,
          "title": "\u7528\u6CD5",
          "slug": "\u7528\u6CD5",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "watch",
      "slug": "watch",
      "children": [
        {
          "level": 3,
          "title": "\u89C2\u5BDF props",
          "slug": "\u89C2\u5BDF-props",
          "children": []
        },
        {
          "level": 3,
          "title": "\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61",
          "slug": "\u89C2\u5BDF\u5305\u88C5\u5BF9\u8C61",
          "children": []
        },
        {
          "level": 3,
          "title": "\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90",
          "slug": "\u89C2\u5BDF\u591A\u4E2A\u6570\u636E\u6E90",
          "children": []
        },
        {
          "level": 3,
          "title": "\u505C\u6B62\u89C2\u5BDF",
          "slug": "\u505C\u6B62\u89C2\u5BDF",
          "children": []
        },
        {
          "level": 3,
          "title": "\u6E05\u7406\u526F\u4F5C\u7528",
          "slug": "\u6E05\u7406\u526F\u4F5C\u7528",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "watchEffect",
      "slug": "watcheffect",
      "children": [
        {
          "level": 3,
          "title": "watch \u548C watchEffect \u7684\u533A\u522B",
          "slug": "watch-\u548C-watcheffect-\u7684\u533A\u522B",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "effect",
      "slug": "effect",
      "children": [
        {
          "level": 3,
          "title": "\u8C03\u5EA6\u6267\u884C effect-scheduler",
          "slug": "\u8C03\u5EA6\u6267\u884C-effect-scheduler",
          "children": []
        },
        {
          "level": 3,
          "title": "watchEffect() \u4E0E effect() \u7684\u533A\u522B",
          "slug": "watcheffect-\u4E0E-effect-\u7684\u533A\u522B",
          "children": []
        }
      ]
    }
  ],
  "filePathRelative": "vue3Basic/reactivityAPI.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var reactivityAPI_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$Q
});
const data$P = {
  "key": "v-a42c4298",
  "path": "/vue3Basic/vue3Project.html",
  "title": "\u642D\u5EFA\u57FA\u4E8E vue3 \u7684\u524D\u7AEF\u67B6\u6784",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vue3Basic/vue3Project.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var vue3Project_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$P
});
const data$O = {
  "key": "v-7f6e4968",
  "path": "/vue3Basic/vue3optimize.html",
  "title": "Vue3 \u7684\u4F18\u5316",
  "lang": "en-US",
  "frontmatter": {
    "sidebarDepth": 2
  },
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u6027\u80FD\u4F18\u5316",
      "slug": "\u6027\u80FD\u4F18\u5316",
      "children": [
        {
          "level": 3,
          "title": "1. \u6E90\u7801\u4F53\u79EF\u4F18\u5316",
          "slug": "_1-\u6E90\u7801\u4F53\u79EF\u4F18\u5316",
          "children": []
        },
        {
          "level": 3,
          "title": "2. \u6570\u636E\u52AB\u6301\u4F18\u5316",
          "slug": "_2-\u6570\u636E\u52AB\u6301\u4F18\u5316",
          "children": []
        },
        {
          "level": 3,
          "title": "3. \u7F16\u8BD1\u4F18\u5316",
          "slug": "_3-\u7F16\u8BD1\u4F18\u5316",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "\u8BED\u6CD5 API \u4F18\u5316",
      "slug": "\u8BED\u6CD5-api-\u4F18\u5316",
      "children": [
        {
          "level": 3,
          "title": "1. \u4F18\u5316\u903B\u8F91\u7EC4\u7EC7",
          "slug": "_1-\u4F18\u5316\u903B\u8F91\u7EC4\u7EC7",
          "children": []
        },
        {
          "level": 3,
          "title": "2. \u4F18\u5316\u903B\u8F91\u590D\u7528",
          "slug": "_2-\u4F18\u5316\u903B\u8F91\u590D\u7528",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "\u7F16\u8BD1\u4F18\u5316",
      "slug": "\u7F16\u8BD1\u4F18\u5316",
      "children": [
        {
          "level": 3,
          "title": "PathFlag",
          "slug": "pathflag",
          "children": []
        },
        {
          "level": 3,
          "title": "HoistStatic",
          "slug": "hoiststatic",
          "children": []
        },
        {
          "level": 3,
          "title": "CacheHandler",
          "slug": "cachehandler",
          "children": []
        },
        {
          "level": 3,
          "title": "SSR",
          "slug": "ssr",
          "children": []
        },
        {
          "level": 3,
          "title": "tree-shaking",
          "slug": "tree-shaking",
          "children": []
        }
      ]
    }
  ],
  "filePathRelative": "vue3Basic/vue3optimize.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var vue3optimize_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$O
});
const data$N = {
  "key": "v-3db83299",
  "path": "/vuePress/",
  "title": "Introduction",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vuePress/README.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$5 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$N
});
const data$M = {
  "key": "v-2dedee22",
  "path": "/vuePress/application.html",
  "title": "VuePress \u7B14\u8BB0",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vuePress/application.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var application_html$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$M
});
const data$L = {
  "key": "v-6907e510",
  "path": "/vuePress/sourceCode.html",
  "title": "VuePress \u67B6\u6784\u8BBE\u8BA1",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vuePress/sourceCode.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var sourceCode_html$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$L
});
const data$K = {
  "key": "v-4244654e",
  "path": "/vueRouter/",
  "title": "Introduction",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "vue2 Router",
      "slug": "vue2-router",
      "children": []
    }
  ],
  "filePathRelative": "vueRouter/README.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$K
});
const data$J = {
  "key": "v-d7f3ee3c",
  "path": "/vueRouter/application.html",
  "title": "Vue Router 4 \u65B0\u7279\u6027",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u4F7F\u7528\u65B9\u6CD5",
      "slug": "\u4F7F\u7528\u65B9\u6CD5",
      "children": []
    },
    {
      "level": 2,
      "title": "\u52A8\u6001\u8DEF\u7531",
      "slug": "\u52A8\u6001\u8DEF\u7531",
      "children": []
    },
    {
      "level": 2,
      "title": "\u5BFC\u822A\u5B88\u536B",
      "slug": "\u5BFC\u822A\u5B88\u536B",
      "children": []
    }
  ],
  "filePathRelative": "vueRouter/application.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var application_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$J
});
const data$I = {
  "key": "v-f66c67fe",
  "path": "/vueRouter/browserRouter.html",
  "title": "\u539F\u751F\u8DEF\u7531\u57FA\u7840",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "hash",
      "slug": "hash",
      "children": []
    },
    {
      "level": 2,
      "title": "history \u6A21\u5F0F",
      "slug": "history-\u6A21\u5F0F",
      "children": [
        {
          "level": 3,
          "title": "pushState",
          "slug": "pushstate",
          "children": []
        },
        {
          "level": 3,
          "title": "replaceState",
          "slug": "replacestate",
          "children": []
        },
        {
          "level": 3,
          "title": "popstate",
          "slug": "popstate",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "location",
      "slug": "location",
      "children": [
        {
          "level": 3,
          "title": "Location.assign()",
          "slug": "location-assign",
          "children": []
        },
        {
          "level": 3,
          "title": "Location.replace()",
          "slug": "location-replace",
          "children": []
        },
        {
          "level": 3,
          "title": "Location \u5C5E\u6027",
          "slug": "location-\u5C5E\u6027",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "\u5176\u5B83",
      "slug": "\u5176\u5B83",
      "children": []
    }
  ],
  "filePathRelative": "vueRouter/browserRouter.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var browserRouter_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$I
});
const data$H = {
  "key": "v-00fc65d3",
  "path": "/vueRouter/code.html",
  "title": "vue-router v4.0.12",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vueRouter/code.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var code_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$H
});
const data$G = {
  "key": "v-438f331a",
  "path": "/vueRouter/miniVueRouter.html",
  "title": "miniVueRouter",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vueRouter/miniVueRouter.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var miniVueRouter_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$G
});
const data$F = {
  "key": "v-08959ab8",
  "path": "/vueRouter/sourceCode.html",
  "title": "Vue Router \u6E90\u7801\u89E3\u8BFB",
  "lang": "en-US",
  "frontmatter": {
    "sidebarDepth": 1
  },
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u76EE\u5F55\u7ED3\u6784",
      "slug": "\u76EE\u5F55\u7ED3\u6784",
      "children": []
    },
    {
      "level": 2,
      "title": "createRouter",
      "slug": "createrouter",
      "children": [
        {
          "level": 3,
          "title": "install",
          "slug": "install",
          "children": []
        },
        {
          "level": 3,
          "title": "provide",
          "slug": "provide",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "currentRoute",
      "slug": "currentroute",
      "children": [
        {
          "level": 3,
          "title": "pushWithRedirect",
          "slug": "pushwithredirect",
          "children": []
        },
        {
          "level": 3,
          "title": "navigate",
          "slug": "navigate",
          "children": []
        },
        {
          "level": 3,
          "title": "finalizeNavigation",
          "slug": "finalizenavigation",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "history \u7684\u6A21\u5F0F",
      "slug": "history-\u7684\u6A21\u5F0F",
      "children": [
        {
          "level": 3,
          "title": "\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5",
          "slug": "\u6E90\u7801\u4E2D\u7684\u65B9\u6CD5",
          "children": []
        },
        {
          "level": 3,
          "title": "createWebHistory",
          "slug": "createwebhistory",
          "children": []
        },
        {
          "level": 3,
          "title": "useHistoryStateNavigation",
          "slug": "usehistorystatenavigation",
          "children": []
        },
        {
          "level": 3,
          "title": "changeLocation",
          "slug": "changelocation",
          "children": []
        },
        {
          "level": 3,
          "title": "useHistoryListeners",
          "slug": "usehistorylisteners",
          "children": []
        },
        {
          "level": 3,
          "title": "finalizeNavigation",
          "slug": "finalizenavigation-1",
          "children": []
        },
        {
          "level": 3,
          "title": "markAsReady",
          "slug": "markasready",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "RouterView",
      "slug": "routerview",
      "children": [
        {
          "level": 3,
          "title": "matched \u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684",
          "slug": "matched-\u7684\u503C\u662F\u600E\u4E48\u5728\u8DEF\u5F84\u5207\u6362\u7684\u60C5\u51B5\u4E0B\u66F4\u65B0\u7684",
          "children": []
        },
        {
          "level": 3,
          "title": "createRouteRecordMatcher",
          "slug": "createrouterecordmatcher",
          "children": []
        },
        {
          "level": 3,
          "title": "resolve",
          "slug": "resolve",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0",
      "slug": "\u5BFC\u822A\u5B88\u536B\u7684\u5B9E\u73B0",
      "children": []
    }
  ],
  "filePathRelative": "vueRouter/sourceCode.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var sourceCode_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$F
});
const data$E = {
  "key": "v-15788f64",
  "path": "/vuex/",
  "title": "vuex \u7B14\u8BB0",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "vuex \u5173\u7CFB\u56FE",
      "slug": "vuex-\u5173\u7CFB\u56FE",
      "children": []
    },
    {
      "level": 2,
      "title": "\u793A\u4F8B",
      "slug": "\u793A\u4F8B",
      "children": []
    },
    {
      "level": 2,
      "title": "form \u8868\u5355\u95EE\u9898",
      "slug": "form-\u8868\u5355\u95EE\u9898",
      "children": [
        {
          "level": 3,
          "title": "\u5B98\u65B9\u89E3\u51B3",
          "slug": "\u5B98\u65B9\u89E3\u51B3",
          "children": []
        },
        {
          "level": 3,
          "title": "\u8BA1\u7B97\u5C5E\u6027 set\u3001get \u65B9\u5F0F",
          "slug": "\u8BA1\u7B97\u5C5E\u6027-set\u3001get-\u65B9\u5F0F",
          "children": []
        }
      ]
    }
  ],
  "filePathRelative": "vuex/README.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$3 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$E
});
const data$D = {
  "key": "v-f5df4e28",
  "path": "/vuex/miniVuex.html",
  "title": "\u81EA\u5B9A\u4E49 Vuex",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vuex/miniVuex.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var miniVuex_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$D
});
const data$C = {
  "key": "v-81d9f8bc",
  "path": "/vuex/plugin.html",
  "title": "vuex \u63D2\u4EF6",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u6301\u4E45\u5316\u5B58\u50A8\u63D2\u4EF6",
      "slug": "\u6301\u4E45\u5316\u5B58\u50A8\u63D2\u4EF6",
      "children": []
    }
  ],
  "filePathRelative": "vuex/plugin.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var plugin_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$C
});
const data$B = {
  "key": "v-c1f44ade",
  "path": "/vuex/q&a.html",
  "title": "vuex \u6709\u5173\u7684\u95EE\u9898",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 3,
      "title": "action \u548C mutations",
      "slug": "action-\u548C-mutations",
      "children": []
    },
    {
      "level": 3,
      "title": "state \u5185\u90E8\u652F\u6301\u6A21\u5757\u914D\u7F6E\u548C\u6A21\u5757\u5D4C\u5957\uFF0C\u5982\u4F55\u5B9E\u73B0\u7684\uFF1F",
      "slug": "state-\u5185\u90E8\u652F\u6301\u6A21\u5757\u914D\u7F6E\u548C\u6A21\u5757\u5D4C\u5957-\u5982\u4F55\u5B9E\u73B0\u7684",
      "children": []
    },
    {
      "level": 3,
      "title": "defineProperty \u4F55\u65F6\u6267\u884C",
      "slug": "defineproperty-\u4F55\u65F6\u6267\u884C",
      "children": []
    },
    {
      "level": 3,
      "title": "\u4E3A\u4EC0\u4E48 vuex store \u4E2D\u7684\u503C\u9700\u8981\u653E\u5230 computed \u4E2D",
      "slug": "\u4E3A\u4EC0\u4E48-vuex-store-\u4E2D\u7684\u503C\u9700\u8981\u653E\u5230-computed-\u4E2D",
      "children": []
    }
  ],
  "filePathRelative": "vuex/q&a.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var q_a_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$B
});
const data$A = {
  "key": "v-73238b6e",
  "path": "/vuex/sourceCode_v3.html",
  "title": "vuex3 \u6E90\u7801",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "Vue.mixin",
      "slug": "vue-mixin",
      "children": []
    },
    {
      "level": 2,
      "title": "Vuex.Store",
      "slug": "vuex-store",
      "children": []
    },
    {
      "level": 2,
      "title": "resetStoreVM",
      "slug": "resetstorevm",
      "children": []
    },
    {
      "level": 2,
      "title": "enableStrictMode",
      "slug": "enablestrictmode",
      "children": []
    },
    {
      "level": 2,
      "title": "ModuleCollection",
      "slug": "modulecollection",
      "children": []
    },
    {
      "level": 2,
      "title": "dispatch",
      "slug": "dispatch",
      "children": []
    },
    {
      "level": 2,
      "title": "commit",
      "slug": "commit",
      "children": []
    }
  ],
  "filePathRelative": "vuex/sourceCode_v3.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var sourceCode_v3_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$A
});
const data$z = {
  "key": "v-6fb9da30",
  "path": "/vuex/sourceCode_v4.html",
  "title": "vuex4 \u6E90\u7801\u89E3\u8BFB",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u6E90\u7801\u8C03\u8BD5",
      "slug": "\u6E90\u7801\u8C03\u8BD5",
      "children": [
        {
          "level": 3,
          "title": "source-map",
          "slug": "source-map",
          "children": []
        },
        {
          "level": 3,
          "title": "@rollup/plugin-buble",
          "slug": "rollup-plugin-buble",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "\u6E90\u7801\u5165\u53E3",
      "slug": "\u6E90\u7801\u5165\u53E3",
      "children": []
    },
    {
      "level": 2,
      "title": "store \u5BF9\u8C61",
      "slug": "store-\u5BF9\u8C61",
      "children": [
        {
          "level": 3,
          "title": "\u5224\u65AD\u73AF\u5883",
          "slug": "\u5224\u65AD\u73AF\u5883",
          "children": []
        },
        {
          "level": 3,
          "title": "\u521D\u59CB\u5316\u53D8\u91CF",
          "slug": "\u521D\u59CB\u5316\u53D8\u91CF",
          "children": []
        },
        {
          "level": 3,
          "title": "ModuleCollection",
          "slug": "modulecollection",
          "children": []
        },
        {
          "level": 3,
          "title": "Module",
          "slug": "module",
          "children": []
        },
        {
          "level": 3,
          "title": "installModule",
          "slug": "installmodule",
          "children": []
        },
        {
          "level": 3,
          "title": "resetStoreState",
          "slug": "resetstorestate",
          "children": []
        },
        {
          "level": 3,
          "title": "vue2 \u4E2D vuex \u7684\u54CD\u5E94\u5F0F",
          "slug": "vue2-\u4E2D-vuex-\u7684\u54CD\u5E94\u5F0F",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "install",
      "slug": "install",
      "children": [
        {
          "level": 3,
          "title": "provide / inject",
          "slug": "provide-inject",
          "children": []
        },
        {
          "level": 3,
          "title": "install \u65B9\u6CD5",
          "slug": "install-\u65B9\u6CD5",
          "children": []
        },
        {
          "level": 3,
          "title": "Vue.mixin",
          "slug": "vue-mixin",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "\u5DE5\u5177\u65B9\u6CD5",
      "slug": "\u5DE5\u5177\u65B9\u6CD5",
      "children": [
        {
          "level": 3,
          "title": "enableStrictMode",
          "slug": "enablestrictmode",
          "children": []
        },
        {
          "level": 3,
          "title": "partial",
          "slug": "partial",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "store \u4E2D\u7684\u4E00\u4E9B API",
      "slug": "store-\u4E2D\u7684\u4E00\u4E9B-api",
      "children": [
        {
          "level": 3,
          "title": "commit",
          "slug": "commit",
          "children": []
        },
        {
          "level": 3,
          "title": "dispatch",
          "slug": "dispatch",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "plugins",
      "slug": "plugins",
      "children": [
        {
          "level": 3,
          "title": "genericSubscribe",
          "slug": "genericsubscribe",
          "children": []
        },
        {
          "level": 3,
          "title": "logger \u63D2\u4EF6",
          "slug": "logger-\u63D2\u4EF6",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "\u53C2\u8003\u9605\u8BFB",
      "slug": "\u53C2\u8003\u9605\u8BFB",
      "children": []
    }
  ],
  "filePathRelative": "vuex/sourceCode_v4.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var sourceCode_v4_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$z
});
const data$y = {
  "key": "v-dad5dad4",
  "path": "/vuex/vuexCode.html",
  "title": "vuex v4.0.2",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vuex/vuexCode.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var vuexCode_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$y
});
const data$x = {
  "key": "v-4ffb9324",
  "path": "/elementPlus/hooks/use-attrs.html",
  "title": "use-attrs",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "$attrs \u4E0E attrs",
      "slug": "attrs-\u4E0E-attrs",
      "children": []
    },
    {
      "level": 2,
      "title": "use-attrs",
      "slug": "use-attrs-1",
      "children": []
    }
  ],
  "filePathRelative": "elementPlus/hooks/use-attrs.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var useAttrs_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$x
});
const data$w = {
  "key": "v-592d0456",
  "path": "/elementPlus/hooks/use-namespace.html",
  "title": "useNamespace",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/hooks/use-namespace.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var useNamespace_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$w
});
const data$v = {
  "key": "v-1f48a459",
  "path": "/elementPlus/theme-chalk/BEM.html",
  "title": "BEM",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/theme-chalk/BEM.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var BEM_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$v
});
const data$u = {
  "key": "v-b8062c82",
  "path": "/elementPlus/theme-chalk/scss.html",
  "title": "scss",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u53D8\u91CF",
      "slug": "\u53D8\u91CF",
      "children": []
    },
    {
      "level": 2,
      "title": "\u6CE8\u91CA",
      "slug": "\u6CE8\u91CA",
      "children": []
    },
    {
      "level": 2,
      "title": "At-rules",
      "slug": "at-rules",
      "children": []
    },
    {
      "level": 2,
      "title": "@extend",
      "slug": "extend",
      "children": []
    },
    {
      "level": 2,
      "title": "@mixin",
      "slug": "mixin",
      "children": []
    },
    {
      "level": 2,
      "title": "@use",
      "slug": "use",
      "children": []
    },
    {
      "level": 2,
      "title": "@forward",
      "slug": "forward",
      "children": [
        {
          "level": 3,
          "title": "@forward \u6DFB\u52A0\u524D\u7F00",
          "slug": "forward-\u6DFB\u52A0\u524D\u7F00",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "@content",
      "slug": "content",
      "children": []
    },
    {
      "level": 2,
      "title": "@at-root",
      "slug": "at-root",
      "children": [
        {
          "level": 3,
          "title": "@at-root\u548C&\u7684\u7ED3\u5408",
          "slug": "at-root\u548C-\u7684\u7ED3\u5408",
          "children": []
        },
        {
          "level": 3,
          "title": "@at-root\u548C#{&}\u7ED3\u5408",
          "slug": "at-root\u548C-\u7ED3\u5408",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "\u8D44\u6599",
      "slug": "\u8D44\u6599",
      "children": []
    }
  ],
  "filePathRelative": "elementPlus/theme-chalk/scss.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var scss_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$u
});
const data$t = {
  "key": "v-5801bab2",
  "path": "/elementPlus/utils/buildProps.html",
  "title": "buildProps",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u6CDB\u578B",
      "slug": "\u6CDB\u578B",
      "children": []
    },
    {
      "level": 2,
      "title": "\u5E26\u7EA6\u675F\u7684\u6CDB\u578B",
      "slug": "\u5E26\u7EA6\u675F\u7684\u6CDB\u578B",
      "children": []
    },
    {
      "level": 2,
      "title": "buildProps \u8FD4\u56DE\u503C",
      "slug": "buildprops-\u8FD4\u56DE\u503C",
      "children": [
        {
          "level": 3,
          "title": "[K in keyof Props]",
          "slug": "k-in-keyof-props",
          "children": []
        },
        {
          "level": 3,
          "title": "\u503C\u5224\u65AD",
          "slug": "\u503C\u5224\u65AD",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "buildProps \u51FD\u6570\u5B9E\u9645\u5185\u5BB9",
      "slug": "buildprops-\u51FD\u6570\u5B9E\u9645\u5185\u5BB9",
      "children": []
    },
    {
      "level": 2,
      "title": "\u5C0F\u7ED3",
      "slug": "\u5C0F\u7ED3",
      "children": []
    }
  ],
  "filePathRelative": "elementPlus/utils/buildProps.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var buildProps_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$t
});
const data$s = {
  "key": "v-1b208c8b",
  "path": "/sourceCode/DeepDive/Render-function.html",
  "title": "Render function",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/DeepDive/Render-function.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var RenderFunction_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$s
});
const data$r = {
  "key": "v-312af42a",
  "path": "/sourceCode/DeepDive/creating-a-mini-vue.html",
  "title": "creating a mini vue",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/DeepDive/creating-a-mini-vue.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var creatingAMiniVue_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$r
});
const data$q = {
  "key": "v-5945442a",
  "path": "/sourceCode/DeepDive/miniVue.html",
  "title": "mini vue",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/DeepDive/miniVue.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var miniVue_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$q
});
const data$p = {
  "key": "v-154ce3f6",
  "path": "/sourceCode/DeepDive/useFetch.html",
  "title": "useFetch",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/DeepDive/useFetch.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var useFetch_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$p
});
const data$o = {
  "key": "v-7359a5bc",
  "path": "/sourceCode/component/setup.html",
  "title": "Setup",
  "lang": "en-US",
  "frontmatter": {
    "sidebarDepth": 1
  },
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u521B\u5EFA\u548C\u8BBE\u7F6E\u7EC4\u4EF6\u5B9E\u4F8B",
      "slug": "\u521B\u5EFA\u548C\u8BBE\u7F6E\u7EC4\u4EF6\u5B9E\u4F8B",
      "children": []
    },
    {
      "level": 2,
      "title": "\u7EC4\u4EF6\u5B9E\u4F8B\u7684\u8BBE\u7F6E\u6D41\u7A0B",
      "slug": "\u7EC4\u4EF6\u5B9E\u4F8B\u7684\u8BBE\u7F6E\u6D41\u7A0B",
      "children": []
    },
    {
      "level": 2,
      "title": "setupStatefulComponent",
      "slug": "setupstatefulcomponent",
      "children": []
    },
    {
      "level": 2,
      "title": "\u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406",
      "slug": "\u521B\u5EFA\u6E32\u67D3\u4E0A\u4E0B\u6587\u4EE3\u7406",
      "children": []
    },
    {
      "level": 2,
      "title": "setup \u8FD4\u56DE\u503C",
      "slug": "setup-\u8FD4\u56DE\u503C",
      "children": []
    },
    {
      "level": 2,
      "title": "vue3 \u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528 setup",
      "slug": "vue3-\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528-setup",
      "children": []
    },
    {
      "level": 2,
      "title": "\u8BBE\u8BA1\u52A8\u673A",
      "slug": "\u8BBE\u8BA1\u52A8\u673A",
      "children": [
        {
          "level": 3,
          "title": "\u903B\u8F91\u7EC4\u5408\u4E0E\u590D\u7528",
          "slug": "\u903B\u8F91\u7EC4\u5408\u4E0E\u590D\u7528",
          "children": []
        }
      ]
    }
  ],
  "filePathRelative": "sourceCode/component/setup.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var setup_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$o
});
const data$n = {
  "key": "v-57862f7c",
  "path": "/sourceCode/parser/",
  "title": "",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/parser/index.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$n
});
const data$m = {
  "key": "v-4800f6cd",
  "path": "/sourceCode/reactivity/computed.html",
  "title": "computed",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/reactivity/computed.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var computed_html$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$m
});
const data$l = {
  "key": "v-b3dbcc8c",
  "path": "/sourceCode/reactivity/reactivity.cjs.html",
  "title": "reactivity \u6E90\u7801",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/reactivity/reactivity.cjs.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var reactivity_cjs_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$l
});
const data$k = {
  "key": "v-f2b64710",
  "path": "/sourceCode/reactivity/reactivity.html",
  "title": "\u624B\u5199reactivity",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "basic",
      "slug": "basic",
      "children": []
    },
    {
      "level": 2,
      "title": "depsMap",
      "slug": "depsmap",
      "children": []
    },
    {
      "level": 2,
      "title": "targetMap",
      "slug": "targetmap",
      "children": []
    },
    {
      "level": 2,
      "title": "Proxy and Reflect",
      "slug": "proxy-and-reflect",
      "children": []
    },
    {
      "level": 2,
      "title": "activeEffect",
      "slug": "activeeffect",
      "children": []
    },
    {
      "level": 2,
      "title": "ref",
      "slug": "ref",
      "children": []
    },
    {
      "level": 2,
      "title": "computed",
      "slug": "computed",
      "children": []
    }
  ],
  "filePathRelative": "sourceCode/reactivity/reactivity.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var reactivity_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$k
});
const data$j = {
  "key": "v-38a137ae",
  "path": "/sourceCode/reactivity/watch.html",
  "title": "watch",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/reactivity/watch.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var watch_html$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$j
});
const data$i = {
  "key": "v-024bb864",
  "path": "/sourceCode/renderer/componentRender.html",
  "title": "\u7EC4\u4EF6\u6E32\u67D3",
  "lang": "en-US",
  "frontmatter": {
    "sidebarDepth": 2
  },
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "\u666E\u901A\u5143\u7D20\u8282\u70B9",
      "slug": "\u666E\u901A\u5143\u7D20\u8282\u70B9",
      "children": []
    },
    {
      "level": 2,
      "title": "\u7EC4\u4EF6\u8282\u70B9",
      "slug": "\u7EC4\u4EF6\u8282\u70B9",
      "children": []
    },
    {
      "level": 2,
      "title": "\u90A3\u4E48 vnode \u6709\u4EC0\u4E48\u4F18\u52BF",
      "slug": "\u90A3\u4E48-vnode-\u6709\u4EC0\u4E48\u4F18\u52BF",
      "children": []
    },
    {
      "level": 2,
      "title": "\u521B\u5EFA vnode",
      "slug": "\u521B\u5EFA-vnode",
      "children": []
    },
    {
      "level": 2,
      "title": "\u6E32\u67D3 vnode",
      "slug": "\u6E32\u67D3-vnode",
      "children": []
    },
    {
      "level": 2,
      "title": "patch \u51FD\u6570",
      "slug": "patch-\u51FD\u6570",
      "children": []
    },
    {
      "level": 2,
      "title": "\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D",
      "slug": "\u628A\u7EC4\u4EF6\u5C01\u88C5\u5728\u4E00\u4E2A\u51FD\u6570\u4E2D",
      "children": []
    }
  ],
  "filePathRelative": "sourceCode/renderer/componentRender.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var componentRender_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$i
});
const data$h = {
  "key": "v-5dd6cdc6",
  "path": "/sourceCode/renderer/createAppAPI.html",
  "title": "createAppAPI",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/renderer/createAppAPI.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var createAppAPI_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$h
});
const data$g = {
  "key": "v-d8fea8c4",
  "path": "/sourceCode/renderer/",
  "title": "\u6E32\u67D3\u5668\u4E0E\u54CD\u5E94\u5F0F\u7CFB\u7EDF\u7684\u7ED3\u5408",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "sourceCode/renderer/index.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$g
});
const data$f = {
  "key": "v-16a9f525",
  "path": "/vite/sourceCode/createServer.html",
  "title": "createServer",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "createServer",
      "slug": "createserver-1",
      "children": []
    },
    {
      "level": 2,
      "title": "ViteDevServer",
      "slug": "vitedevserver",
      "children": []
    },
    {
      "level": 2,
      "title": "\u4E00\u4E2A\u4F8B\u5B50",
      "slug": "\u4E00\u4E2A\u4F8B\u5B50",
      "children": []
    }
  ],
  "filePathRelative": "vite/sourceCode/createServer.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var createServer_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$f
});
const data$e = {
  "key": "v-6818c89c",
  "path": "/vite/sourceCode/http.html",
  "title": "http",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vite/sourceCode/http.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var http_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$e
});
const data$d = {
  "key": "v-2d7f1302",
  "path": "/vite/sourceCode/indexHtmlMiddleware.html",
  "title": "indexHtmlMiddleware",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "indexHtml",
      "slug": "indexhtml",
      "children": []
    },
    {
      "level": 2,
      "title": "createDevHtmlTransformFn",
      "slug": "createdevhtmltransformfn",
      "children": []
    }
  ],
  "filePathRelative": "vite/sourceCode/indexHtmlMiddleware.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var indexHtmlMiddleware_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$d
});
const data$c = {
  "key": "v-b5fb9518",
  "path": "/vue3Basic/QA/computed.html",
  "title": "\u4E3A\u4EC0\u4E48 vuex store \u4E2D\u7684\u503C\u9700\u8981\u653E\u5230 computed \u4E2D",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vue3Basic/QA/computed.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var computed_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$c
});
const data$b = {
  "key": "v-78e6b6ba",
  "path": "/vue3Basic/QA/proxy.html",
  "title": "Proxy",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vue3Basic/QA/proxy.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var proxy_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$b
});
const data$a = {
  "key": "v-2c83fee2",
  "path": "/vue3Basic/QA/watch.html",
  "title": "",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "vue3Basic/QA/watch.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var watch_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$a
});
const data$9 = {
  "key": "v-256286d0",
  "path": "/elementPlus/components/card/",
  "title": "card",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/components/card/index.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var index_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$9
});
const data$8 = {
  "key": "v-07e8239c",
  "path": "/elementPlus/components/form/async-validator.html",
  "title": "async-validator",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/components/form/async-validator.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var asyncValidator_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$8
});
const data$7 = {
  "key": "v-6b1ab37e",
  "path": "/elementPlus/components/form/form-item.html",
  "title": "form-item",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/components/form/form-item.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var formItem_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$7
});
const data$6 = {
  "key": "v-3095eea6",
  "path": "/elementPlus/components/form/rules.html",
  "title": "validation",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/components/form/rules.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var rules_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$6
});
const data$5 = {
  "key": "v-73407006",
  "path": "/elementPlus/components/input/input-code.html",
  "title": "input code",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/components/input/input-code.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var inputCode_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$5
});
const data$4 = {
  "key": "v-0233039b",
  "path": "/elementPlus/components/input/input.html",
  "title": "input",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/components/input/input.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var input_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$4
});
const data$3 = {
  "key": "v-fef4e608",
  "path": "/elementPlus/components/table/table-column.html",
  "title": "table-column",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "showOverflowTooltip",
      "slug": "showoverflowtooltip",
      "children": []
    },
    {
      "level": 2,
      "title": "render-helper",
      "slug": "render-helper",
      "children": []
    }
  ],
  "filePathRelative": "elementPlus/components/table/table-column.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var tableColumn_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$3
});
const data$2 = {
  "key": "v-46db3393",
  "path": "/elementPlus/components/table/table.html",
  "title": "table",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/components/table/table.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var table_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$2
});
const data$1 = {
  "key": "v-50482b4f",
  "path": "/elementPlus/components/table/util.html",
  "title": "util",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [],
  "filePathRelative": "elementPlus/components/table/util.md",
  "git": {
    "contributors": [
      {
        "name": "tanyp",
        "email": "759227027@qq.com",
        "commits": 1
      }
    ]
  }
};
var util_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data: data$1
});
const data = {
  "key": "v-3706649a",
  "path": "/404.html",
  "title": "",
  "lang": "en-US",
  "frontmatter": {
    "layout": "404"
  },
  "excerpt": "",
  "headers": [],
  "filePathRelative": null,
  "git": {}
};
var _404_html = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  data
});
const _sfc_main$d = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    var _a, _b, _c;
    const routeLocale = useRouteLocale();
    const themeLocale = useThemeLocaleData();
    const messages = (_a = themeLocale.value.notFound) != null ? _a : ["Not Found"];
    const getMsg = () => messages[Math.floor(Math.random() * messages.length)];
    const homeLink = (_b = themeLocale.value.home) != null ? _b : routeLocale.value;
    const homeText = (_c = themeLocale.value.backToHome) != null ? _c : "Back to home";
    return (_ctx, _push, _parent, _attrs) => {
      const _component_RouterLink = vue.resolveComponent("RouterLink");
      _push(`<div${serverRenderer.ssrRenderAttrs(vue.mergeProps({ class: "theme-container" }, _attrs))}><div class="theme-default-content"><h1>404</h1><blockquote>${serverRenderer.ssrInterpolate(getMsg())}</blockquote>`);
      _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: vue.unref(homeLink) }, {
        default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(`${serverRenderer.ssrInterpolate(vue.unref(homeText))}`);
          } else {
            return [
              vue.createTextVNode(vue.toDisplayString(vue.unref(homeText)), 1)
            ];
          }
        }),
        _: 1
      }, _parent));
      _push(`</div></div>`);
    };
  }
});
const _sfc_setup$d = _sfc_main$d.setup;
_sfc_main$d.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/layouts/404.vue");
  return _sfc_setup$d ? _sfc_setup$d(props, ctx) : void 0;
};
var _404 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _sfc_main$d
});
const __default__ = vue.defineComponent({
  inheritAttrs: false
});
function setup(__props) {
  const props = __props;
  const route = vueRouter.useRoute();
  const site = useSiteData();
  const { item } = vue.toRefs(props);
  const hasHttpProtocol = vue.computed(() => shared.isLinkHttp(item.value.link));
  const hasNonHttpProtocal = vue.computed(() => shared.isLinkMailto(item.value.link) || shared.isLinkTel(item.value.link));
  const linkTarget = vue.computed(() => {
    if (hasNonHttpProtocal.value)
      return void 0;
    if (item.value.target)
      return item.value.target;
    if (hasHttpProtocol.value)
      return "_blank";
    return void 0;
  });
  const isBlankTarget = vue.computed(() => linkTarget.value === "_blank");
  const isRouterLink = vue.computed(() => !hasHttpProtocol.value && !hasNonHttpProtocal.value && !isBlankTarget.value);
  const linkRel = vue.computed(() => {
    if (hasNonHttpProtocal.value)
      return void 0;
    if (item.value.rel)
      return item.value.rel;
    if (isBlankTarget.value)
      return "noopener noreferrer";
    return void 0;
  });
  const linkAriaLabel = vue.computed(() => item.value.ariaLabel || item.value.text);
  const shouldBeActiveInSubpath = vue.computed(() => {
    const localeKeys = Object.keys(site.value.locales);
    if (localeKeys.length) {
      return !localeKeys.some((key) => key === item.value.link);
    }
    return item.value.link !== "/";
  });
  const isActiveInSubpath = vue.computed(() => {
    if (!shouldBeActiveInSubpath.value) {
      return false;
    }
    return route.path.startsWith(item.value.link);
  });
  const isActive = vue.computed(() => {
    if (!isRouterLink.value) {
      return false;
    }
    if (item.value.activeMatch) {
      return new RegExp(item.value.activeMatch).test(route.path);
    }
    return isActiveInSubpath.value;
  });
  return (_ctx, _push, _parent, _attrs) => {
    const _component_RouterLink = vue.resolveComponent("RouterLink");
    const _component_OutboundLink = vue.resolveComponent("OutboundLink");
    if (vue.unref(isRouterLink)) {
      _push(serverRenderer.ssrRenderComponent(_component_RouterLink, vue.mergeProps({
        class: ["nav-link", { "router-link-active": vue.unref(isActive) }],
        to: vue.unref(item).link,
        "aria-label": vue.unref(linkAriaLabel)
      }, _ctx.$attrs, _attrs), {
        default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            serverRenderer.ssrRenderSlot(_ctx.$slots, "before", {}, null, _push2, _parent2, _scopeId);
            _push2(` ${serverRenderer.ssrInterpolate(vue.unref(item).text)} `);
            serverRenderer.ssrRenderSlot(_ctx.$slots, "after", {}, null, _push2, _parent2, _scopeId);
          } else {
            return [
              vue.renderSlot(_ctx.$slots, "before"),
              vue.createTextVNode(" " + vue.toDisplayString(vue.unref(item).text) + " ", 1),
              vue.renderSlot(_ctx.$slots, "after")
            ];
          }
        }),
        _: 3
      }, _parent));
    } else {
      _push(`<a${serverRenderer.ssrRenderAttrs(vue.mergeProps({
        class: "nav-link external",
        href: vue.unref(item).link,
        rel: vue.unref(linkRel),
        target: vue.unref(linkTarget),
        "aria-label": vue.unref(linkAriaLabel)
      }, _ctx.$attrs, _attrs))}>`);
      serverRenderer.ssrRenderSlot(_ctx.$slots, "before", {}, null, _push, _parent);
      _push(` ${serverRenderer.ssrInterpolate(vue.unref(item).text)} `);
      if (vue.unref(isBlankTarget)) {
        _push(serverRenderer.ssrRenderComponent(_component_OutboundLink, null, null, _parent));
      } else {
        _push(`<!---->`);
      }
      serverRenderer.ssrRenderSlot(_ctx.$slots, "after", {}, null, _push, _parent);
      _push(`</a>`);
    }
  };
}
const _sfc_main$c = /* @__PURE__ */ vue.defineComponent(__spreadProps(__spreadValues({}, __default__), {
  __ssrInlineRender: true,
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  setup
}));
const _sfc_setup$c = _sfc_main$c.setup;
_sfc_main$c.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/NavLink.vue");
  return _sfc_setup$c ? _sfc_setup$c(props, ctx) : void 0;
};
const _sfc_main$b = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    const frontmatter = usePageFrontmatter();
    const siteLocale = useSiteLocaleData();
    const heroImage = vue.computed(() => {
      if (!frontmatter.value.heroImage) {
        return null;
      }
      return withBase(frontmatter.value.heroImage);
    });
    const heroText = vue.computed(() => {
      if (frontmatter.value.heroText === null) {
        return null;
      }
      return frontmatter.value.heroText || siteLocale.value.title || "Hello";
    });
    const heroAlt = vue.computed(() => frontmatter.value.heroAlt || heroText.value || "hero");
    const tagline = vue.computed(() => {
      if (frontmatter.value.tagline === null) {
        return null;
      }
      return frontmatter.value.tagline || siteLocale.value.description || "Welcome to your VuePress site";
    });
    const actions = vue.computed(() => {
      if (!shared.isArray(frontmatter.value.actions)) {
        return [];
      }
      return frontmatter.value.actions.map(({ text, link, type = "primary" }) => ({
        text,
        link,
        type
      }));
    });
    const features = vue.computed(() => {
      if (shared.isArray(frontmatter.value.features)) {
        return frontmatter.value.features;
      }
      return [];
    });
    const footer = vue.computed(() => frontmatter.value.footer);
    const footerHtml = vue.computed(() => frontmatter.value.footerHtml);
    return (_ctx, _push, _parent, _attrs) => {
      const _component_Content = vue.resolveComponent("Content");
      _push(`<main${serverRenderer.ssrRenderAttrs(vue.mergeProps({
        class: "home",
        "aria-labelledby": vue.unref(heroText) ? "main-title" : void 0
      }, _attrs))}><header class="hero">`);
      if (vue.unref(heroImage)) {
        _push(`<img${serverRenderer.ssrRenderAttr("src", vue.unref(heroImage))}${serverRenderer.ssrRenderAttr("alt", vue.unref(heroAlt))}>`);
      } else {
        _push(`<!---->`);
      }
      if (vue.unref(heroText)) {
        _push(`<h1 id="main-title">${serverRenderer.ssrInterpolate(vue.unref(heroText))}</h1>`);
      } else {
        _push(`<!---->`);
      }
      if (vue.unref(tagline)) {
        _push(`<p class="description">${serverRenderer.ssrInterpolate(vue.unref(tagline))}</p>`);
      } else {
        _push(`<!---->`);
      }
      if (vue.unref(actions).length) {
        _push(`<p class="actions"><!--[-->`);
        serverRenderer.ssrRenderList(vue.unref(actions), (action) => {
          _push(serverRenderer.ssrRenderComponent(_sfc_main$c, {
            key: action.text,
            class: ["action-button", [action.type]],
            item: action
          }, null, _parent));
        });
        _push(`<!--]--></p>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</header>`);
      if (vue.unref(features).length) {
        _push(`<div class="features"><!--[-->`);
        serverRenderer.ssrRenderList(vue.unref(features), (feature) => {
          _push(`<div class="feature"><h2>${serverRenderer.ssrInterpolate(feature.title)}</h2><p>${serverRenderer.ssrInterpolate(feature.details)}</p></div>`);
        });
        _push(`<!--]--></div>`);
      } else {
        _push(`<!---->`);
      }
      _push(`<div class="theme-default-content custom">`);
      _push(serverRenderer.ssrRenderComponent(_component_Content, null, null, _parent));
      _push(`</div>`);
      if (vue.unref(footer)) {
        _push(`<!--[-->`);
        if (vue.unref(footerHtml)) {
          _push(`<div class="footer">${vue.unref(footer)}</div>`);
        } else {
          _push(`<div class="footer">${serverRenderer.ssrInterpolate(vue.unref(footer))}</div>`);
        }
        _push(`<!--]-->`);
      } else {
        _push(`<!---->`);
      }
      _push(`</main>`);
    };
  }
});
const _sfc_setup$b = _sfc_main$b.setup;
_sfc_main$b.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/Home.vue");
  return _sfc_setup$b ? _sfc_setup$b(props, ctx) : void 0;
};
const resolveRepoType = (repo) => {
  if (!shared.isLinkHttp(repo) || /github\.com/.test(repo))
    return "GitHub";
  if (/bitbucket\.org/.test(repo))
    return "Bitbucket";
  if (/gitlab\.com/.test(repo))
    return "GitLab";
  if (/gitee\.com/.test(repo))
    return "Gitee";
  return null;
};
const editLinkPatterns = {
  GitHub: ":repo/edit/:branch/:path",
  GitLab: ":repo/-/edit/:branch/:path",
  Gitee: ":repo/edit/:branch/:path",
  Bitbucket: ":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"
};
const resolveEditLink = ({ docsRepo, docsBranch, docsDir, filePathRelative, editLinkPattern }) => {
  const repoType = resolveRepoType(docsRepo);
  let pattern;
  if (editLinkPattern) {
    pattern = editLinkPattern;
  } else if (repoType !== null) {
    pattern = editLinkPatterns[repoType];
  }
  if (!pattern)
    return null;
  return pattern.replace(/:repo/, shared.isLinkHttp(docsRepo) ? docsRepo : `https://github.com/${docsRepo}`).replace(/:branch/, docsBranch).replace(/:path/, shared.removeLeadingSlash(`${shared.removeEndingSlash(docsDir)}/${filePathRelative}`));
};
const _sfc_main$a = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    return (_ctx, _push, _parent, _attrs) => {
      serverRenderer.ssrRenderSlot(_ctx.$slots, "default", {}, null, _push, _parent);
    };
  }
});
const _sfc_setup$a = _sfc_main$a.setup;
_sfc_main$a.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/DropdownTransition.vue");
  return _sfc_setup$a ? _sfc_setup$a(props, ctx) : void 0;
};
const _sfc_main$9 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  setup(__props) {
    const props = __props;
    const { item } = vue.toRefs(props);
    const dropdownAriaLabel = vue.computed(() => item.value.ariaLabel || item.value.text);
    const open = vue.ref(false);
    const route = vueRouter.useRoute();
    vue.watch(() => route.path, () => {
      open.value = false;
    });
    const isLastItemOfArray = (item2, arr) => arr[arr.length - 1] === item2;
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${serverRenderer.ssrRenderAttrs(vue.mergeProps({
        class: ["dropdown-wrapper", { open: open.value }]
      }, _attrs))}><button class="dropdown-title" type="button"${serverRenderer.ssrRenderAttr("aria-label", vue.unref(dropdownAriaLabel))}><span class="title">${serverRenderer.ssrInterpolate(vue.unref(item).text)}</span><span class="arrow down"></span></button><button class="mobile-dropdown-title" type="button"${serverRenderer.ssrRenderAttr("aria-label", vue.unref(dropdownAriaLabel))}><span class="title">${serverRenderer.ssrInterpolate(vue.unref(item).text)}</span><span class="${serverRenderer.ssrRenderClass([open.value ? "down" : "right", "arrow"])}"></span></button>`);
      _push(serverRenderer.ssrRenderComponent(_sfc_main$a, null, {
        default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(`<ul style="${serverRenderer.ssrRenderStyle(open.value ? null : { display: "none" })}" class="nav-dropdown"${_scopeId}><!--[-->`);
            serverRenderer.ssrRenderList(vue.unref(item).children, (child, index2) => {
              _push2(`<li class="dropdown-item"${_scopeId}>`);
              if (child.children) {
                _push2(`<!--[--><h4 class="dropdown-subtitle"${_scopeId}>`);
                if (child.link) {
                  _push2(serverRenderer.ssrRenderComponent(_sfc_main$c, { item: child }, null, _parent2, _scopeId));
                } else {
                  _push2(`<span${_scopeId}>${serverRenderer.ssrInterpolate(child.text)}</span>`);
                }
                _push2(`</h4><ul class="dropdown-subitem-wrapper"${_scopeId}><!--[-->`);
                serverRenderer.ssrRenderList(child.children, (grandchild) => {
                  _push2(`<li class="dropdown-subitem"${_scopeId}>`);
                  _push2(serverRenderer.ssrRenderComponent(_sfc_main$c, { item: grandchild }, null, _parent2, _scopeId));
                  _push2(`</li>`);
                });
                _push2(`<!--]--></ul><!--]-->`);
              } else {
                _push2(serverRenderer.ssrRenderComponent(_sfc_main$c, { item: child }, null, _parent2, _scopeId));
              }
              _push2(`</li>`);
            });
            _push2(`<!--]--></ul>`);
          } else {
            return [
              vue.withDirectives(vue.createVNode("ul", { class: "nav-dropdown" }, [
                (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList(vue.unref(item).children, (child, index2) => {
                  return vue.openBlock(), vue.createBlock("li", {
                    key: child.link || index2,
                    class: "dropdown-item"
                  }, [
                    child.children ? (vue.openBlock(), vue.createBlock(vue.Fragment, { key: 0 }, [
                      vue.createVNode("h4", { class: "dropdown-subtitle" }, [
                        child.link ? (vue.openBlock(), vue.createBlock(_sfc_main$c, {
                          key: 0,
                          item: child,
                          onFocusout: ($event) => isLastItemOfArray(child, vue.unref(item).children) && child.children.length === 0 && (open.value = false)
                        }, null, 8, ["item", "onFocusout"])) : (vue.openBlock(), vue.createBlock("span", { key: 1 }, vue.toDisplayString(child.text), 1))
                      ]),
                      vue.createVNode("ul", { class: "dropdown-subitem-wrapper" }, [
                        (vue.openBlock(true), vue.createBlock(vue.Fragment, null, vue.renderList(child.children, (grandchild) => {
                          return vue.openBlock(), vue.createBlock("li", {
                            key: grandchild.link,
                            class: "dropdown-subitem"
                          }, [
                            vue.createVNode(_sfc_main$c, {
                              item: grandchild,
                              onFocusout: ($event) => isLastItemOfArray(grandchild, child.children) && isLastItemOfArray(child, vue.unref(item).children) && (open.value = false)
                            }, null, 8, ["item", "onFocusout"])
                          ]);
                        }), 128))
                      ])
                    ], 64)) : (vue.openBlock(), vue.createBlock(_sfc_main$c, {
                      key: 1,
                      item: child,
                      onFocusout: ($event) => isLastItemOfArray(child, vue.unref(item).children) && (open.value = false)
                    }, null, 8, ["item", "onFocusout"]))
                  ]);
                }), 128))
              ], 512), [
                [vue.vShow, open.value]
              ])
            ];
          }
        }),
        _: 1
      }, _parent));
      _push(`</div>`);
    };
  }
});
const _sfc_setup$9 = _sfc_main$9.setup;
_sfc_main$9.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/DropdownLink.vue");
  return _sfc_setup$9 ? _sfc_setup$9(props, ctx) : void 0;
};
const _sfc_main$8 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    const useNavbarSelectLanguage = () => {
      const router = vueRouter.useRouter();
      const routeLocale = useRouteLocale();
      const siteLocale = useSiteLocaleData();
      const themeLocale = useThemeLocaleData();
      return vue.computed(() => {
        var _a, _b;
        const localePaths = Object.keys(siteLocale.value.locales);
        if (localePaths.length < 2) {
          return [];
        }
        const currentPath = router.currentRoute.value.path;
        const currentFullPath = router.currentRoute.value.fullPath;
        const languageDropdown = {
          text: (_a = themeLocale.value.selectLanguageText) != null ? _a : "unkown language",
          ariaLabel: (_b = themeLocale.value.selectLanguageAriaLabel) != null ? _b : "unkown language",
          children: localePaths.map((targetLocalePath) => {
            var _a2, _b2, _c, _d, _e, _f;
            const targetSiteLocale = (_b2 = (_a2 = siteLocale.value.locales) == null ? void 0 : _a2[targetLocalePath]) != null ? _b2 : {};
            const targetThemeLocale = (_d = (_c = themeLocale.value.locales) == null ? void 0 : _c[targetLocalePath]) != null ? _d : {};
            const targetLang = `${targetSiteLocale.lang}`;
            const text = (_e = targetThemeLocale.selectLanguageName) != null ? _e : targetLang;
            let link;
            if (targetLang === siteLocale.value.lang) {
              link = currentFullPath;
            } else {
              const targetLocalePage = currentPath.replace(routeLocale.value, targetLocalePath);
              if (router.getRoutes().some((item) => item.path === targetLocalePage)) {
                link = targetLocalePage;
              } else {
                link = (_f = targetThemeLocale.home) != null ? _f : targetLocalePath;
              }
            }
            return {
              text,
              link
            };
          })
        };
        return [languageDropdown];
      });
    };
    const useNavbarRepo = () => {
      const themeLocale = useThemeLocaleData();
      const repo = vue.computed(() => themeLocale.value.repo);
      const repoType = vue.computed(() => repo.value ? resolveRepoType(repo.value) : null);
      const repoLink = vue.computed(() => {
        if (repo.value && !shared.isLinkHttp(repo.value)) {
          return `https://github.com/${repo.value}`;
        }
        return repo.value;
      });
      const repoLabel = vue.computed(() => {
        if (!repoLink.value)
          return null;
        if (themeLocale.value.repoLabel)
          return themeLocale.value.repoLabel;
        if (repoType.value === null)
          return "Source";
        return repoType.value;
      });
      return vue.computed(() => {
        if (!repoLink.value || !repoLabel.value) {
          return [];
        }
        return [
          {
            text: repoLabel.value,
            link: repoLink.value
          }
        ];
      });
    };
    const resolveNavbarItem = (item) => {
      if (shared.isString(item)) {
        return useNavLink(item);
      }
      if (item.children) {
        return __spreadProps(__spreadValues({}, item), {
          children: item.children.map(resolveNavbarItem)
        });
      }
      return item;
    };
    const useNavbarConfig = () => {
      const themeLocale = useThemeLocaleData();
      return vue.computed(() => (themeLocale.value.navbar || []).map(resolveNavbarItem));
    };
    const navbarConfig = useNavbarConfig();
    const navbarSelectLanguage = useNavbarSelectLanguage();
    const navbarRepo = useNavbarRepo();
    const navbarLinks = vue.computed(() => [
      ...navbarConfig.value,
      ...navbarSelectLanguage.value,
      ...navbarRepo.value
    ]);
    return (_ctx, _push, _parent, _attrs) => {
      if (vue.unref(navbarLinks).length) {
        _push(`<nav${serverRenderer.ssrRenderAttrs(vue.mergeProps({ class: "navbar-links" }, _attrs))}><!--[-->`);
        serverRenderer.ssrRenderList(vue.unref(navbarLinks), (item) => {
          _push(`<div class="navbar-links-item">`);
          if (item.children) {
            _push(serverRenderer.ssrRenderComponent(_sfc_main$9, { item }, null, _parent));
          } else {
            _push(serverRenderer.ssrRenderComponent(_sfc_main$c, { item }, null, _parent));
          }
          _push(`</div>`);
        });
        _push(`<!--]--></nav>`);
      } else {
        _push(`<!---->`);
      }
    };
  }
});
const _sfc_setup$8 = _sfc_main$8.setup;
_sfc_main$8.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/NavbarLinks.vue");
  return _sfc_setup$8 ? _sfc_setup$8(props, ctx) : void 0;
};
const _sfc_main$7 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    const themeLocale = useThemeLocaleData();
    const isDarkMode = useDarkMode();
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<button${serverRenderer.ssrRenderAttrs(vue.mergeProps({
        class: "toggle-dark-button",
        title: vue.unref(themeLocale).toggleDarkMode
      }, _attrs))}><svg style="${serverRenderer.ssrRenderStyle(!vue.unref(isDarkMode) ? null : { display: "none" })}" class="icon" focusable="false" viewBox="0 0 32 32"><path d="M16 12.005a4 4 0 1 1-4 4a4.005 4.005 0 0 1 4-4m0-2a6 6 0 1 0 6 6a6 6 0 0 0-6-6z" fill="currentColor"></path><path d="M5.394 6.813l1.414-1.415l3.506 3.506L8.9 10.318z" fill="currentColor"></path><path d="M2 15.005h5v2H2z" fill="currentColor"></path><path d="M5.394 25.197L8.9 21.691l1.414 1.415l-3.506 3.505z" fill="currentColor"></path><path d="M15 25.005h2v5h-2z" fill="currentColor"></path><path d="M21.687 23.106l1.414-1.415l3.506 3.506l-1.414 1.414z" fill="currentColor"></path><path d="M25 15.005h5v2h-5z" fill="currentColor"></path><path d="M21.687 8.904l3.506-3.506l1.414 1.415l-3.506 3.505z" fill="currentColor"></path><path d="M15 2.005h2v5h-2z" fill="currentColor"></path></svg><svg style="${serverRenderer.ssrRenderStyle(vue.unref(isDarkMode) ? null : { display: "none" })}" class="icon" focusable="false" viewBox="0 0 32 32"><path d="M13.502 5.414a15.075 15.075 0 0 0 11.594 18.194a11.113 11.113 0 0 1-7.975 3.39c-.138 0-.278.005-.418 0a11.094 11.094 0 0 1-3.2-21.584M14.98 3a1.002 1.002 0 0 0-.175.016a13.096 13.096 0 0 0 1.825 25.981c.164.006.328 0 .49 0a13.072 13.072 0 0 0 10.703-5.555a1.01 1.01 0 0 0-.783-1.565A13.08 13.08 0 0 1 15.89 4.38A1.015 1.015 0 0 0 14.98 3z" fill="currentColor"></path></svg></button>`);
    };
  }
});
const _sfc_setup$7 = _sfc_main$7.setup;
_sfc_main$7.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/ToggleDarkModeButton.vue");
  return _sfc_setup$7 ? _sfc_setup$7(props, ctx) : void 0;
};
const _sfc_main$6 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  emits: ["toggle"],
  setup(__props) {
    const themeLocale = useThemeLocaleData();
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${serverRenderer.ssrRenderAttrs(vue.mergeProps({
        class: "toggle-sidebar-button",
        title: vue.unref(themeLocale).toggleSidebar,
        "aria-expanded": "false",
        role: "button",
        tabindex: "0"
      }, _attrs))}><div class="icon" aria-hidden="true"><span></span><span></span><span></span></div></div>`);
    };
  }
});
const _sfc_setup$6 = _sfc_main$6.setup;
_sfc_main$6.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/ToggleSidebarButton.vue");
  return _sfc_setup$6 ? _sfc_setup$6(props, ctx) : void 0;
};
const _sfc_main$5 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  emits: ["toggle-sidebar"],
  setup(__props) {
    const routeLocale = useRouteLocale();
    const siteLocale = useSiteLocaleData();
    const themeLocale = useThemeLocaleData();
    const isDarkMode = useDarkMode();
    const navbar = vue.ref(null);
    const siteBrand = vue.ref(null);
    const siteBrandLink = vue.computed(() => themeLocale.value.home || routeLocale.value);
    const siteBrandLogo = vue.computed(() => {
      if (isDarkMode.value && themeLocale.value.logoDark !== void 0) {
        return themeLocale.value.logoDark;
      }
      return themeLocale.value.logo;
    });
    const siteBrandTitle = vue.computed(() => siteLocale.value.title);
    const linksWrapperMaxWidth = vue.ref(0);
    const linksWrapperStyle = vue.computed(() => {
      if (!linksWrapperMaxWidth.value) {
        return {};
      }
      return {
        maxWidth: linksWrapperMaxWidth.value + "px"
      };
    });
    const enableDarkMode = vue.computed(() => themeLocale.value.darkMode);
    vue.onMounted(() => {
      const MOBILE_DESKTOP_BREAKPOINT = 719;
      const navbarHorizontalPadding = getCssValue(navbar.value, "paddingLeft") + getCssValue(navbar.value, "paddingRight");
      const handleLinksWrapWidth = () => {
        var _a;
        if (window.innerWidth <= MOBILE_DESKTOP_BREAKPOINT) {
          linksWrapperMaxWidth.value = 0;
        } else {
          linksWrapperMaxWidth.value = navbar.value.offsetWidth - navbarHorizontalPadding - (((_a = siteBrand.value) == null ? void 0 : _a.offsetWidth) || 0);
        }
      };
      handleLinksWrapWidth();
      window.addEventListener("resize", handleLinksWrapWidth, false);
      window.addEventListener("orientationchange", handleLinksWrapWidth, false);
    });
    function getCssValue(el, property) {
      var _a, _b, _c;
      const val = (_c = (_b = (_a = el == null ? void 0 : el.ownerDocument) == null ? void 0 : _a.defaultView) == null ? void 0 : _b.getComputedStyle(el, null)) == null ? void 0 : _c[property];
      const num = Number.parseInt(val, 10);
      return Number.isNaN(num) ? 0 : num;
    }
    return (_ctx, _push, _parent, _attrs) => {
      const _component_RouterLink = vue.resolveComponent("RouterLink");
      const _component_NavbarSearch = vue.resolveComponent("NavbarSearch");
      _push(`<header${serverRenderer.ssrRenderAttrs(vue.mergeProps({
        ref: (_value, _refs) => {
          _refs["navbar"] = _value;
          navbar.value = _value;
        },
        class: "navbar"
      }, _attrs))}>`);
      _push(serverRenderer.ssrRenderComponent(_sfc_main$6, null, null, _parent));
      _push(`<span>`);
      _push(serverRenderer.ssrRenderComponent(_component_RouterLink, { to: vue.unref(siteBrandLink) }, {
        default: vue.withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            if (vue.unref(siteBrandLogo)) {
              _push2(`<img class="logo"${serverRenderer.ssrRenderAttr("src", vue.unref(withBase)(vue.unref(siteBrandLogo)))}${serverRenderer.ssrRenderAttr("alt", vue.unref(siteBrandTitle))}${_scopeId}>`);
            } else {
              _push2(`<!---->`);
            }
            if (vue.unref(siteBrandTitle)) {
              _push2(`<span class="${serverRenderer.ssrRenderClass([{ "can-hide": vue.unref(siteBrandLogo) }, "site-name"])}"${_scopeId}>${serverRenderer.ssrInterpolate(vue.unref(siteBrandTitle))}</span>`);
            } else {
              _push2(`<!---->`);
            }
          } else {
            return [
              vue.unref(siteBrandLogo) ? (vue.openBlock(), vue.createBlock("img", {
                key: 0,
                class: "logo",
                src: vue.unref(withBase)(vue.unref(siteBrandLogo)),
                alt: vue.unref(siteBrandTitle)
              }, null, 8, ["src", "alt"])) : vue.createCommentVNode("", true),
              vue.unref(siteBrandTitle) ? (vue.openBlock(), vue.createBlock("span", {
                key: 1,
                class: ["site-name", { "can-hide": vue.unref(siteBrandLogo) }]
              }, vue.toDisplayString(vue.unref(siteBrandTitle)), 3)) : vue.createCommentVNode("", true)
            ];
          }
        }),
        _: 1
      }, _parent));
      _push(`</span><div class="navbar-links-wrapper" style="${serverRenderer.ssrRenderStyle(vue.unref(linksWrapperStyle))}">`);
      serverRenderer.ssrRenderSlot(_ctx.$slots, "before", {}, null, _push, _parent);
      _push(serverRenderer.ssrRenderComponent(_sfc_main$8, { class: "can-hide" }, null, _parent));
      serverRenderer.ssrRenderSlot(_ctx.$slots, "after", {}, null, _push, _parent);
      if (vue.unref(enableDarkMode)) {
        _push(serverRenderer.ssrRenderComponent(_sfc_main$7, null, null, _parent));
      } else {
        _push(`<!---->`);
      }
      _push(serverRenderer.ssrRenderComponent(_component_NavbarSearch, null, null, _parent));
      _push(`</div></header>`);
    };
  }
});
const _sfc_setup$5 = _sfc_main$5.setup;
_sfc_main$5.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/Navbar.vue");
  return _sfc_setup$5 ? _sfc_setup$5(props, ctx) : void 0;
};
const _sfc_main$4 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    const useEditNavLink = () => {
      const themeLocale2 = useThemeLocaleData();
      const page = usePageData();
      const frontmatter = usePageFrontmatter();
      return vue.computed(() => {
        var _a, _b;
        const showEditLink = (_b = (_a = frontmatter.value.editLink) != null ? _a : themeLocale2.value.editLink) != null ? _b : true;
        if (!showEditLink) {
          return null;
        }
        const {
          repo,
          docsRepo = repo,
          docsBranch = "main",
          docsDir = "",
          editLinkText
        } = themeLocale2.value;
        if (!docsRepo)
          return null;
        const editLink = resolveEditLink({
          docsRepo,
          docsBranch,
          docsDir,
          filePathRelative: page.value.filePathRelative,
          editLinkPattern: themeLocale2.value.editLinkPattern
        });
        if (!editLink)
          return null;
        return {
          text: editLinkText != null ? editLinkText : "Edit this page",
          link: editLink
        };
      });
    };
    const useLastUpdated = () => {
      const siteLocale = useSiteLocaleData();
      const themeLocale2 = useThemeLocaleData();
      const page = usePageData();
      const frontmatter = usePageFrontmatter();
      return vue.computed(() => {
        var _a, _b, _c, _d;
        const showLastUpdated = (_b = (_a = frontmatter.value.lastUpdated) != null ? _a : themeLocale2.value.lastUpdated) != null ? _b : true;
        if (!showLastUpdated)
          return null;
        if (!((_c = page.value.git) == null ? void 0 : _c.updatedTime))
          return null;
        const updatedDate = new Date((_d = page.value.git) == null ? void 0 : _d.updatedTime);
        return updatedDate.toLocaleString(siteLocale.value.lang);
      });
    };
    const useContributors = () => {
      const themeLocale2 = useThemeLocaleData();
      const page = usePageData();
      const frontmatter = usePageFrontmatter();
      return vue.computed(() => {
        var _a, _b, _c, _d;
        const showContributors = (_b = (_a = frontmatter.value.contributors) != null ? _a : themeLocale2.value.contributors) != null ? _b : true;
        if (!showContributors)
          return null;
        return (_d = (_c = page.value.git) == null ? void 0 : _c.contributors) != null ? _d : null;
      });
    };
    const themeLocale = useThemeLocaleData();
    const editNavLink = useEditNavLink();
    const lastUpdated = useLastUpdated();
    const contributors = useContributors();
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<footer${serverRenderer.ssrRenderAttrs(vue.mergeProps({ class: "page-meta" }, _attrs))}>`);
      if (vue.unref(editNavLink)) {
        _push(`<div class="meta-item edit-link">`);
        _push(serverRenderer.ssrRenderComponent(_sfc_main$c, {
          class: "meta-item-label",
          item: vue.unref(editNavLink)
        }, null, _parent));
        _push(`</div>`);
      } else {
        _push(`<!---->`);
      }
      if (vue.unref(lastUpdated)) {
        _push(`<div class="meta-item last-updated"><span class="meta-item-label">${serverRenderer.ssrInterpolate(vue.unref(themeLocale).lastUpdatedText)}: </span><span class="meta-item-info">${serverRenderer.ssrInterpolate(vue.unref(lastUpdated))}</span></div>`);
      } else {
        _push(`<!---->`);
      }
      if (vue.unref(contributors) && vue.unref(contributors).length) {
        _push(`<div class="meta-item contributors"><span class="meta-item-label">${serverRenderer.ssrInterpolate(vue.unref(themeLocale).contributorsText)}: </span><span class="meta-item-info"><!--[-->`);
        serverRenderer.ssrRenderList(vue.unref(contributors), (contributor, index2) => {
          _push(`<!--[--><span class="contributor"${serverRenderer.ssrRenderAttr("title", `email: ${contributor.email}`)}>${serverRenderer.ssrInterpolate(contributor.name)}</span>`);
          if (index2 !== vue.unref(contributors).length - 1) {
            _push(`<!--[-->, <!--]-->`);
          } else {
            _push(`<!---->`);
          }
          _push(`<!--]-->`);
        });
        _push(`<!--]--></span></div>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</footer>`);
    };
  }
});
const _sfc_setup$4 = _sfc_main$4.setup;
_sfc_main$4.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/PageMeta.vue");
  return _sfc_setup$4 ? _sfc_setup$4(props, ctx) : void 0;
};
const _sfc_main$3 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    const resolveFromFrontmatterConfig = (conf) => {
      if (conf === false) {
        return null;
      }
      if (shared.isString(conf)) {
        return useNavLink(conf);
      }
      if (shared.isPlainObject(conf)) {
        return conf;
      }
      return false;
    };
    const resolveFromSidebarItems = (sidebarItems2, currentPath, offset) => {
      const index2 = sidebarItems2.findIndex((item) => item.link === currentPath);
      if (index2 !== -1) {
        const targetItem = sidebarItems2[index2 + offset];
        if (!(targetItem == null ? void 0 : targetItem.link)) {
          return null;
        }
        return targetItem;
      }
      for (const item of sidebarItems2) {
        if (item.children) {
          const childResult = resolveFromSidebarItems(item.children, currentPath, offset);
          if (childResult) {
            return childResult;
          }
        }
      }
      return null;
    };
    const frontmatter = usePageFrontmatter();
    const sidebarItems = useSidebarItems();
    const route = vueRouter.useRoute();
    const prevNavLink = vue.computed(() => {
      const prevConfig = resolveFromFrontmatterConfig(frontmatter.value.prev);
      if (prevConfig !== false) {
        return prevConfig;
      }
      return resolveFromSidebarItems(sidebarItems.value, route.path, -1);
    });
    const nextNavLink = vue.computed(() => {
      const nextConfig = resolveFromFrontmatterConfig(frontmatter.value.next);
      if (nextConfig !== false) {
        return nextConfig;
      }
      return resolveFromSidebarItems(sidebarItems.value, route.path, 1);
    });
    return (_ctx, _push, _parent, _attrs) => {
      if (vue.unref(prevNavLink) || vue.unref(nextNavLink)) {
        _push(`<nav${serverRenderer.ssrRenderAttrs(vue.mergeProps({ class: "page-nav" }, _attrs))}><p class="inner">`);
        if (vue.unref(prevNavLink)) {
          _push(`<span class="prev"> \u2190 `);
          _push(serverRenderer.ssrRenderComponent(_sfc_main$c, { item: vue.unref(prevNavLink) }, null, _parent));
          _push(`</span>`);
        } else {
          _push(`<!---->`);
        }
        if (vue.unref(nextNavLink)) {
          _push(`<span class="next">`);
          _push(serverRenderer.ssrRenderComponent(_sfc_main$c, { item: vue.unref(nextNavLink) }, null, _parent));
          _push(` \u2192 </span>`);
        } else {
          _push(`<!---->`);
        }
        _push(`</p></nav>`);
      } else {
        _push(`<!---->`);
      }
    };
  }
});
const _sfc_setup$3 = _sfc_main$3.setup;
_sfc_main$3.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/PageNav.vue");
  return _sfc_setup$3 ? _sfc_setup$3(props, ctx) : void 0;
};
const _sfc_main$2 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    return (_ctx, _push, _parent, _attrs) => {
      const _component_Content = vue.resolveComponent("Content");
      _push(`<main${serverRenderer.ssrRenderAttrs(vue.mergeProps({ class: "page" }, _attrs))}>`);
      serverRenderer.ssrRenderSlot(_ctx.$slots, "top", {}, null, _push, _parent);
      _push(`<div class="theme-default-content">`);
      _push(serverRenderer.ssrRenderComponent(_component_Content, null, null, _parent));
      _push(`</div>`);
      _push(serverRenderer.ssrRenderComponent(_sfc_main$4, null, null, _parent));
      _push(serverRenderer.ssrRenderComponent(_sfc_main$3, null, null, _parent));
      serverRenderer.ssrRenderSlot(_ctx.$slots, "bottom", {}, null, _push, _parent);
      _push(`</main>`);
    };
  }
});
const _sfc_setup$2 = _sfc_main$2.setup;
_sfc_main$2.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/Page.vue");
  return _sfc_setup$2 ? _sfc_setup$2(props, ctx) : void 0;
};
const normalizePath = (path) => decodeURI(path).replace(/#.*$/, "").replace(/(index)?\.(md|html)$/, "");
const isActiveLink = (route, link) => {
  if (link === void 0) {
    return false;
  }
  if (route.hash === link) {
    return true;
  }
  const currentPath = normalizePath(route.path);
  const targetPath = normalizePath(link);
  return currentPath === targetPath;
};
const isActiveItem = (route, item) => {
  if (isActiveLink(route, item.link)) {
    return true;
  }
  if (item.children) {
    return item.children.some((child) => isActiveItem(route, child));
  }
  return false;
};
const renderItem = (item, props) => {
  if (item.link) {
    return vue.h(_sfc_main$c, __spreadProps(__spreadValues({}, props), {
      item
    }));
  }
  return vue.h("p", props, item.text);
};
const renderChildren = (item, depth) => {
  var _a;
  if (!((_a = item.children) === null || _a === void 0 ? void 0 : _a.length)) {
    return null;
  }
  return vue.h("ul", {
    class: {
      "sidebar-sub-items": depth > 0
    }
  }, item.children.map((child) => vue.h("li", vue.h(SidebarChild, {
    item: child,
    depth: depth + 1
  }))));
};
const SidebarChild = ({ item, depth = 0 }) => {
  const route = vueRouter.useRoute();
  const active = isActiveItem(route, item);
  return [
    renderItem(item, {
      class: {
        "sidebar-heading": depth === 0,
        "sidebar-item": true,
        active
      }
    }),
    renderChildren(item, depth)
  ];
};
SidebarChild.displayName = "SidebarChild";
SidebarChild.props = {
  item: {
    type: Object,
    required: true
  },
  depth: {
    type: Number,
    required: false
  }
};
const _sfc_main$1 = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    const sidebarItems = useSidebarItems();
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<aside${serverRenderer.ssrRenderAttrs(vue.mergeProps({ class: "sidebar" }, _attrs))}>`);
      _push(serverRenderer.ssrRenderComponent(_sfc_main$8, null, null, _parent));
      serverRenderer.ssrRenderSlot(_ctx.$slots, "top", {}, null, _push, _parent);
      _push(`<ul class="sidebar-links"><!--[-->`);
      serverRenderer.ssrRenderList(vue.unref(sidebarItems), (item) => {
        _push(serverRenderer.ssrRenderComponent(vue.unref(SidebarChild), {
          key: item.link || item.text,
          item
        }, null, _parent));
      });
      _push(`<!--]--></ul>`);
      serverRenderer.ssrRenderSlot(_ctx.$slots, "bottom", {}, null, _push, _parent);
      _push(`</aside>`);
    };
  }
});
const _sfc_setup$1 = _sfc_main$1.setup;
_sfc_main$1.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/components/Sidebar.vue");
  return _sfc_setup$1 ? _sfc_setup$1(props, ctx) : void 0;
};
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  __ssrInlineRender: true,
  setup(__props) {
    const page = usePageData();
    const frontmatter = usePageFrontmatter();
    const themeLocale = useThemeLocaleData();
    const shouldShowNavbar = vue.computed(() => frontmatter.value.navbar !== false && themeLocale.value.navbar !== false);
    const sidebarItems = useSidebarItems();
    const isSidebarOpen = vue.ref(false);
    const toggleSidebar = (to) => {
      isSidebarOpen.value = typeof to === "boolean" ? to : !isSidebarOpen.value;
    };
    const containerClass = vue.computed(() => [
      {
        "no-navbar": !shouldShowNavbar.value,
        "no-sidebar": !sidebarItems.value.length,
        "sidebar-open": isSidebarOpen.value
      },
      frontmatter.value.pageClass
    ]);
    let unregisterRouterHook;
    vue.onMounted(() => {
      const router = vueRouter.useRouter();
      unregisterRouterHook = router.afterEach(() => {
        toggleSidebar(false);
      });
    });
    vue.onUnmounted(() => {
      unregisterRouterHook();
    });
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${serverRenderer.ssrRenderAttrs(vue.mergeProps({
        class: ["theme-container", vue.unref(containerClass)]
      }, _attrs))}>`);
      serverRenderer.ssrRenderSlot(_ctx.$slots, "navbar", {}, () => {
        if (vue.unref(shouldShowNavbar)) {
          _push(serverRenderer.ssrRenderComponent(_sfc_main$5, null, {
            before: vue.withCtx((_, _push2, _parent2, _scopeId) => {
              if (_push2) {
                serverRenderer.ssrRenderSlot(_ctx.$slots, "navbar-before", {}, null, _push2, _parent2, _scopeId);
              } else {
                return [
                  vue.renderSlot(_ctx.$slots, "navbar-before")
                ];
              }
            }),
            after: vue.withCtx((_, _push2, _parent2, _scopeId) => {
              if (_push2) {
                serverRenderer.ssrRenderSlot(_ctx.$slots, "navbar-after", {}, null, _push2, _parent2, _scopeId);
              } else {
                return [
                  vue.renderSlot(_ctx.$slots, "navbar-after")
                ];
              }
            }),
            _: 3
          }, _parent));
        } else {
          _push(`<!---->`);
        }
      }, _push, _parent);
      _push(`<div class="sidebar-mask"></div>`);
      serverRenderer.ssrRenderSlot(_ctx.$slots, "sidebar", {}, () => {
        _push(serverRenderer.ssrRenderComponent(_sfc_main$1, null, {
          top: vue.withCtx((_, _push2, _parent2, _scopeId) => {
            if (_push2) {
              serverRenderer.ssrRenderSlot(_ctx.$slots, "sidebar-top", {}, null, _push2, _parent2, _scopeId);
            } else {
              return [
                vue.renderSlot(_ctx.$slots, "sidebar-top")
              ];
            }
          }),
          bottom: vue.withCtx((_, _push2, _parent2, _scopeId) => {
            if (_push2) {
              serverRenderer.ssrRenderSlot(_ctx.$slots, "sidebar-bottom", {}, null, _push2, _parent2, _scopeId);
            } else {
              return [
                vue.renderSlot(_ctx.$slots, "sidebar-bottom")
              ];
            }
          }),
          _: 3
        }, _parent));
      }, _push, _parent);
      serverRenderer.ssrRenderSlot(_ctx.$slots, "page", {}, () => {
        if (vue.unref(frontmatter).home) {
          _push(serverRenderer.ssrRenderComponent(_sfc_main$b, null, null, _parent));
        } else {
          _push(serverRenderer.ssrRenderComponent(_sfc_main$2, vue.mergeProps({
            key: vue.unref(page).path
          }, _attrs), {
            top: vue.withCtx((_, _push2, _parent2, _scopeId) => {
              if (_push2) {
                serverRenderer.ssrRenderSlot(_ctx.$slots, "page-top", {}, null, _push2, _parent2, _scopeId);
              } else {
                return [
                  vue.renderSlot(_ctx.$slots, "page-top")
                ];
              }
            }),
            bottom: vue.withCtx((_, _push2, _parent2, _scopeId) => {
              if (_push2) {
                serverRenderer.ssrRenderSlot(_ctx.$slots, "page-bottom", {}, null, _push2, _parent2, _scopeId);
              } else {
                return [
                  vue.renderSlot(_ctx.$slots, "page-bottom")
                ];
              }
            }),
            _: 3
          }, _parent));
        }
      }, _push, _parent);
      _push(`</div>`);
    };
  }
});
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = vue.useSSRContext();
  (ssrContext.modules || (ssrContext.modules = new Set())).add("../../../../node_modules/@vuepress/theme-default/lib/client/layouts/Layout.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
var Layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _sfc_main
});
exports.createVueApp = createVueApp;
